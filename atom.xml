<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若邪</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaycewu.site/"/>
  <updated>2019-05-15T16:05:35.708Z</updated>
  <id>https://jaycewu.site/</id>
  
  <author>
    <name>若邪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Node.js 写一个代码生成器</title>
    <link href="https://jaycewu.site/2019/05/09/%E4%BD%BF%E7%94%A8%20Node.js%20%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://jaycewu.site/2019/05/09/使用 Node.js 写一个代码生成器/</id>
    <published>2019-05-09T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>代码生成器的原理就是：<code>数据 + 模板 =&gt; 文件</code>。</p><p><code>数据</code>一般为数据库的表字段结构。</p><p><code>模板</code>的语法与使用的模板引擎有关。</p><p>使用模板引擎将<code>数据</code>和<code>模板</code>进行编译，编译后的内容输出到文件中就得到了一份代码文件。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>因为这个代码生成器是要集成到一个小工具 <a href="https://github.com/wjkang/lazy-mock" target="_blank" rel="noopener">lazy-mock</a> 内，这个工具的主要功能是启动一个 mock server 服务，包含curd功能，并且支持数据的持久化，文件变化的时候自动重启服务以最新的代码提供 api mock 服务。</p><p>代码生成器的功能就是根据配置的数据和模板，编译后将内容输出到指定的目录文件中。因为添加了新的文件，mock server 服务会自动重启。</p><p>还要支持模板的定制与开发，以及使用 CLI 安装模板。</p><p>可以开发前端项目的模板，直接将编译后的内容输出到前端项目的相关目录下，webpack 的热更新功能也会起作用。</p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎使用的是 <a href="http://mozilla.github.io/nunjucks/getting-started.html" target="_blank" rel="noopener">nunjucks</a>。</p><p><a href="https://github.com/wjkang/lazy-mock" target="_blank" rel="noopener">lazy-mock</a> 使用的构建工具是 gulp，使用 gulp-nodemon 实现 mock-server 服务的自动重启。所以这里使用 gulp-nunjucks-render 配合 gulp 的构建流程。</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>编写一个 gulp task ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>)</span><br><span class="line"><span class="keyword">const</span> nunjucksRender = <span class="built_in">require</span>(<span class="string">'gulp-nunjucks-render'</span>)</span><br><span class="line"><span class="keyword">const</span> codeGenerate = <span class="built_in">require</span>(<span class="string">'./templates/generate'</span>)</span><br><span class="line"><span class="keyword">const</span> ServerFullPath = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).ServerFullPath; <span class="comment">//mock -server项目的绝对路径</span></span><br><span class="line"><span class="keyword">const</span> FrontendFullPath = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).FrontendFullPath; <span class="comment">//前端项目的绝对路径</span></span><br><span class="line"><span class="keyword">const</span> nunjucksRenderConfig = &#123;</span><br><span class="line">  path: <span class="string">'templates/server'</span>,</span><br><span class="line">  envOptions: &#123;</span><br><span class="line">    tags: &#123;</span><br><span class="line">      blockStart: <span class="string">'&lt;%'</span>,</span><br><span class="line">      blockEnd: <span class="string">'%&gt;'</span>,</span><br><span class="line">      variableStart: <span class="string">'&lt;$'</span>,</span><br><span class="line">      variableEnd: <span class="string">'$&gt;'</span>,</span><br><span class="line">      commentStart: <span class="string">'&lt;#'</span>,</span><br><span class="line">      commentEnd: <span class="string">'#&gt;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ext: <span class="string">'.js'</span>,</span><br><span class="line">  <span class="comment">//以上是 nunjucks 的配置</span></span><br><span class="line">  ServerFullPath,</span><br><span class="line">  FrontendFullPath</span><br><span class="line">&#125;</span><br><span class="line">gulp.task(<span class="string">'code'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter.defaultMaxListeners = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> codeGenerate(gulp, nunjucksRender, rename, nunjucksRenderConfig)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>代码具体结构细节可以打开 <a href="https://github.com/wjkang/lazy-mock" target="_blank" rel="noopener">lazy-mock</a> 进行参照</p></blockquote><p>为了支持模板的开发，以及更灵活的配置，我将代码生成的逻辑全都放在模板目录中。</p><p><code>templates</code> 是存放模板以及数据配置的目录。结构如下：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://user-gold-cdn.xitu.io/2019/5/10/16a9e71ad9b2e8b1?w=433&h=660&f=png&s=27198" alt></div><div class="image-caption"></div></figure><p>只生成 lazy-mock 代码的模板中 ：</p><p><code>generate.js</code>的内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> CodeGenerateConfig = <span class="built_in">require</span>(<span class="string">'./config'</span>).default;</span><br><span class="line"><span class="keyword">const</span> Model = CodeGenerateConfig.model;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">gulp, nunjucksRender, rename, nunjucksRenderConfig</span>) </span>&#123;</span><br><span class="line">    nunjucksRenderConfig.data = &#123;</span><br><span class="line">        model: CodeGenerateConfig.model,</span><br><span class="line">        config: CodeGenerateConfig.config</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ServerProjectRootPath = nunjucksRenderConfig.ServerFullPath;</span><br><span class="line">    <span class="comment">//server</span></span><br><span class="line">    <span class="keyword">const</span> serverTemplatePath = <span class="string">'templates/server/'</span></span><br><span class="line">    gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>controller.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.ControllerRelativePath));</span><br><span class="line"></span><br><span class="line">    gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>service.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'Service.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.ServiceRelativePath));</span><br><span class="line"></span><br><span class="line">    gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>model.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'Model.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.ModelRelativePath));</span><br><span class="line"></span><br><span class="line">    gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>db.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'_db.json'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.DBRelativePath));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>route.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'Route.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.RouteRelativePath));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">`<span class="subst">$&#123;serverTemplatePath&#125;</span>controller.njk`</span>)</span><br><span class="line">        .pipe(nunjucksRender(nunjucksRenderConfig))</span><br><span class="line">        .pipe(rename(Model.name + <span class="string">'.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(ServerProjectRootPath + CodeGenerateConfig.config.ControllerRelativePath));</span><br></pre></td></tr></table></figure><p>表示使用 controller.njk 作为模板，nunjucksRenderConfig作为数据（模板内可以获取到 nunjucksRenderConfig 属性 data 上的数据）。编译后进行文件重命名，并保存到指定目录下。</p><p><code>model.js</code> 的内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shortid = <span class="built_in">require</span>(<span class="string">'shortid'</span>)</span><br><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">var</span> Random = Mock.Random</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须包含字段id</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"book"</span>,</span><br><span class="line">    Name: <span class="string">"Book"</span>,</span><br><span class="line">    properties: [</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="string">"id"</span>,</span><br><span class="line">            title: <span class="string">"id"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="string">"name"</span>,</span><br><span class="line">            title: <span class="string">"书名"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="string">"author"</span>,</span><br><span class="line">            title: <span class="string">"作者"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            key: <span class="string">"press"</span>,</span><br><span class="line">            title: <span class="string">"出版社"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    buildMockData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//不需要生成设为false</span></span><br><span class="line">        <span class="keyword">let</span> data = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            data.push(&#123;</span><br><span class="line">                id: shortid.generate(),</span><br><span class="line">                name: Random.cword(<span class="number">5</span>, <span class="number">7</span>),</span><br><span class="line">                author: Random.cname(),</span><br><span class="line">                press: Random.cword(<span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板中使用最多的就是这个数据，也是生成新代码需要配置的地方，比如这里配置的是 book ，生成的就是关于 book 的curd 的 mock 服务。要生成别的，修改后执行生成命令即可。</p><p>buildMockData 函数的作用是生成 mock 服务需要的随机数据，在 db.njk 模板中会使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;&lt;$ model.name $&gt;&quot;:&lt;% if model.buildMockData %&gt;&lt;$ model.buildMockData()|dump|safe $&gt;&lt;% else %&gt;[]&lt;% endif %&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这也是 nunjucks 如何在模板中执行函数</p></blockquote><p><code>config.js</code> 的内容如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//server</span></span><br><span class="line">    RouteRelativePath: <span class="string">'/src/routes/'</span>,</span><br><span class="line">    ControllerRelativePath: <span class="string">'/src/controllers/'</span>,</span><br><span class="line">    ServiceRelativePath: <span class="string">'/src/services/'</span>,</span><br><span class="line">    ModelRelativePath: <span class="string">'/src/models/'</span>,</span><br><span class="line">    DBRelativePath: <span class="string">'/src/db/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>配置相应的模板编译后保存的位置。</p><p><code>config/index.js</code> 的内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">'./model'</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    model,</span><br><span class="line">    config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对 lazy-mock 的代码生成的功能就已经完成了，要实现模板的定制直接修改模板文件即可，比如要修改 mock server 服务 api 的接口定义，直接修改 route.njk 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> KoaRouter <span class="keyword">from</span> <span class="string">'koa-router'</span></span><br><span class="line"><span class="keyword">import</span> controllers <span class="keyword">from</span> <span class="string">'../controllers/index.js'</span></span><br><span class="line"><span class="keyword">import</span> PermissionCheck <span class="keyword">from</span> <span class="string">'../middleware/PermissionCheck'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> KoaRouter()</span><br><span class="line">router</span><br><span class="line">    .get(<span class="string">'/&lt;$ model.name $&gt;/paged'</span>, controllers.&lt;$model.name $&gt;.get&lt;$ model.Name $&gt;PagedList)</span><br><span class="line">    .get(<span class="string">'/&lt;$ model.name $&gt;/:id'</span>, controllers.&lt;$ model.name $&gt;.get&lt;$ model.Name $&gt;)</span><br><span class="line">    .del(<span class="string">'/&lt;$ model.name $&gt;/del'</span>, controllers.&lt;$ model.name $&gt;.del&lt;$ model.Name $&gt;)</span><br><span class="line">    .del(<span class="string">'/&lt;$ model.name $&gt;/batchdel'</span>, controllers.&lt;$ model.name $&gt;.del&lt;$ model.Name $&gt;s)</span><br><span class="line">    .post(<span class="string">'/&lt;$ model.name $&gt;/save'</span>, controllers.&lt;$ model.name $&gt;.save&lt;$ model.Name $&gt;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><h2 id="模板开发与安装"><a href="#模板开发与安装" class="headerlink" title="模板开发与安装"></a>模板开发与安装</h2><p>不同的项目，代码结构是不一样的，每次直接修改模板文件会很麻烦。</p><p>需要提供这样的功能：针对不同的项目开发一套独立的模板，支持模板的安装。</p><p>代码生成的相关逻辑都在模板目录的文件中，模板开发没有什么规则限制，只要保证目录名为 <code>templates</code>，<code>generate.js</code>中导出<code>generate</code>函数即可。</p><p>模板的安装原理就是将模板目录中的文件全部覆盖掉即可。不过具体的安装分为本地安装与在线安装。</p><p>之前已经说了，这个代码生成器是集成在 <a href="https://github.com/wjkang/lazy-mock" target="_blank" rel="noopener">lazy-mock</a> 中的，我的做法是在初始化一个新 <a href="https://github.com/wjkang/lazy-mock" target="_blank" rel="noopener">lazy-mock</a> 项目的时候，指定使用相应的模板进行初始化，也就是安装相应的模板。</p><p>使用 Node.js 写了一个 CLI 工具 <a href="https://github.com/wjkang/lazy-mock-cli" target="_blank" rel="noopener">lazy-mock-cli</a>，已发到 npm ，其功能包含下载指定的远程模板来初始化新的 lazy-mock 项目。代码参考（ copy ）了 <a href="https://github.com/vuejs/vue-cli/tree/v2" target="_blank" rel="noopener">vue-cli2</a>。代码不难，说下某些关键点。</p><p>安装 CLI 工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lazy-mock -g</span><br></pre></td></tr></table></figure><p>使用模板初始化项目：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lazy-mock init d2-admin-pm my-project</span><br></pre></td></tr></table></figure><p></p><blockquote><p><a href="https://github.com/lazy-mock-templates/d2-admin-pm" target="_blank" rel="noopener">d2-admin-pm</a> 是我为一个<a href="https://github.com/wjkang/d2-admin-pm" target="_blank" rel="noopener">前端项目</a>已经写好的一个模板。</p></blockquote><p><code>init</code> 命令调用的是 <a href="https://github.com/wjkang/lazy-mock-cli/blob/master/bin/lazy-mock-init.js" target="_blank" rel="noopener">lazy-mock-init.js</a> 中的逻辑：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>)</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"><span class="keyword">const</span> exists = <span class="built_in">require</span>(<span class="string">'fs'</span>).existsSync</span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>).sync</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">'user-home'</span>)</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>)</span><br><span class="line"><span class="keyword">const</span> tildify = <span class="built_in">require</span>(<span class="string">'tildify'</span>)</span><br><span class="line"><span class="keyword">const</span> cliSpinners = <span class="built_in">require</span>(<span class="string">'cli-spinners'</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'../lib/logger'</span>)</span><br><span class="line"><span class="keyword">const</span> localPath = <span class="built_in">require</span>(<span class="string">'../lib/local-path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isLocalPath = localPath.isLocalPath</span><br><span class="line"><span class="keyword">const</span> getTemplatePath = localPath.getTemplatePath</span><br><span class="line"></span><br><span class="line">program.usage(<span class="string">'&lt;template-name&gt; [project-name]'</span>)</span><br><span class="line">    .option(<span class="string">'-c, --clone'</span>, <span class="string">'use git clone'</span>)</span><br><span class="line">    .option(<span class="string">'--offline'</span>, <span class="string">'use cached template'</span>)</span><br><span class="line"></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.gray(<span class="string">'    # create a new project with an official template'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'    $ lazy-mock init d2-admin-pm my-project'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.gray(<span class="string">'    # create a new project straight from a github template'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'    $ vue init username/repo my-project'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">help</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    program.parse(process.argv)</span><br><span class="line">    <span class="keyword">if</span> (program.args.length &lt; <span class="number">1</span>) <span class="keyword">return</span> program.help()</span><br><span class="line">&#125;</span><br><span class="line">help()</span><br><span class="line"><span class="comment">//模板</span></span><br><span class="line"><span class="keyword">let</span> template = program.args[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//判断是否使用官方模板</span></span><br><span class="line"><span class="keyword">const</span> hasSlash = template.indexOf(<span class="string">'/'</span>) &gt; <span class="number">-1</span></span><br><span class="line"><span class="comment">//项目名称</span></span><br><span class="line"><span class="keyword">const</span> rawName = program.args[<span class="number">1</span>]</span><br><span class="line"><span class="comment">//在当前文件下创建</span></span><br><span class="line"><span class="keyword">const</span> inPlace = !rawName || rawName === <span class="string">'.'</span></span><br><span class="line"><span class="comment">//项目名称</span></span><br><span class="line"><span class="keyword">const</span> name = inPlace ? path.relative(<span class="string">'../'</span>, process.cwd()) : rawName</span><br><span class="line"><span class="comment">//创建项目完整目标位置</span></span><br><span class="line"><span class="keyword">const</span> to = path.resolve(rawName || <span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">const</span> clone = program.clone || <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存位置</span></span><br><span class="line"><span class="keyword">const</span> serverTmp = path.join(home, <span class="string">'.lazy-mock'</span>, <span class="string">'sever'</span>)</span><br><span class="line"><span class="keyword">const</span> tmp = path.join(home, <span class="string">'.lazy-mock'</span>, <span class="string">'templates'</span>, template.replace(<span class="regexp">/[\/:]/g</span>, <span class="string">'-'</span>))</span><br><span class="line"><span class="keyword">if</span> (program.offline) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`&gt; Use cached template at <span class="subst">$&#123;chalk.yellow(tildify(tmp))&#125;</span>`</span>)</span><br><span class="line">    template = tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否当前目录下初始化或者覆盖已有目录</span></span><br><span class="line"><span class="keyword">if</span> (inPlace || exists(to)) &#123;</span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        message: inPlace</span><br><span class="line">            ? <span class="string">'Generate project in current directory?'</span></span><br><span class="line">            : <span class="string">'Target directory exists. Continue?'</span>,</span><br><span class="line">        name: <span class="string">'ok'</span></span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (answers.ok) &#123;</span><br><span class="line">            run()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(logger.fatal)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//使用本地缓存</span></span><br><span class="line">    <span class="keyword">if</span> (isLocalPath(template)) &#123;</span><br><span class="line">        <span class="keyword">const</span> templatePath = getTemplatePath(template)</span><br><span class="line">        <span class="keyword">if</span> (exists(templatePath)) &#123;</span><br><span class="line">            generate(name, templatePath, to, err =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) logger.fatal(err)</span><br><span class="line">                <span class="built_in">console</span>.log()</span><br><span class="line">                logger.success(<span class="string">'Generated "%s"'</span>, name)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.fatal(<span class="string">'Local template "%s" not found.'</span>, template)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasSlash) &#123;</span><br><span class="line">            <span class="comment">//使用官方模板</span></span><br><span class="line">            <span class="keyword">const</span> officialTemplate = <span class="string">'lazy-mock-templates/'</span> + template</span><br><span class="line">            downloadAndGenerate(officialTemplate)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            downloadAndGenerate(template)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndGenerate</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    downloadServer(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        downloadTemplate(template)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadServer</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">'downloading server'</span>)</span><br><span class="line">    spinner.spinner = cliSpinners.bouncingBall</span><br><span class="line">    spinner.start()</span><br><span class="line">    <span class="keyword">if</span> (exists(serverTmp)) rm(serverTmp)</span><br><span class="line">    download(<span class="string">'wjkang/lazy-mock'</span>, serverTmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">        spinner.stop()</span><br><span class="line">        <span class="keyword">if</span> (err) logger.fatal(<span class="string">'Failed to download server '</span> + template + <span class="string">': '</span> + err.message.trim())</span><br><span class="line">        done()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadTemplate</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">'downloading template'</span>)</span><br><span class="line">    spinner.spinner = cliSpinners.bouncingBall</span><br><span class="line">    spinner.start()</span><br><span class="line">    <span class="keyword">if</span> (exists(tmp)) rm(tmp)</span><br><span class="line">    download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">        spinner.stop()</span><br><span class="line">        <span class="keyword">if</span> (err) logger.fatal(<span class="string">'Failed to download template '</span> + template + <span class="string">': '</span> + err.message.trim())</span><br><span class="line">        generate(name, tmp, to, err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) logger.fatal(err)</span><br><span class="line">            <span class="built_in">console</span>.log()</span><br><span class="line">            logger.success(<span class="string">'Generated "%s"'</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">name, src, dest, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fse.removeSync(path.join(serverTmp, <span class="string">'templates'</span>))</span><br><span class="line">        <span class="keyword">const</span> packageObj = fse.readJsonSync(path.join(serverTmp, <span class="string">'package.json'</span>))</span><br><span class="line">        packageObj.name = name</span><br><span class="line">        packageObj.author = <span class="string">""</span></span><br><span class="line">        packageObj.description = <span class="string">""</span></span><br><span class="line">        packageObj.ServerFullPath = path.join(dest)</span><br><span class="line">        packageObj.FrontendFullPath = path.join(dest, <span class="string">"front-page"</span>)</span><br><span class="line">        fse.writeJsonSync(path.join(serverTmp, <span class="string">'package.json'</span>), packageObj, &#123; <span class="attr">spaces</span>: <span class="number">2</span> &#125;)</span><br><span class="line">        fse.copySync(serverTmp, dest)</span><br><span class="line">        fse.copySync(path.join(src, <span class="string">'templates'</span>), path.join(dest, <span class="string">'templates'</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        done(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>判断了是使用本地缓存的模板还是拉取最新的模板，拉取线上模板时是从官方仓库拉取还是从别的仓库拉取。</p><h2 id="一些小问题"><a href="#一些小问题" class="headerlink" title="一些小问题"></a>一些小问题</h2><p>目前代码生成的相关数据并不是来源于数据库，而是在 <code>model.js</code> 中简单配置的，原因是我认为一个 mock server 不需要数据库，lazy-mock 确实如此。</p><p>但是如果写一个正儿八经的代码生成器，那肯定是需要根据已经设计好的数据库表来生成代码的。那么就需要连接数据库，读取数据表的字段信息，比如字段名称，字段类型，字段描述等。而不同关系型数据库，读取表字段信息的 sql 是不一样的，所以还要写一堆balabala的判断。可以使用现成的工具 <a href="https://github.com/sequelize/sequelize-auto" target="_blank" rel="noopener">sequelize-auto</a> , 把它读取的 model 数据转成我们需要的格式即可。</p><p>生成前端项目代码的时候，会遇到这种情况：</p><p>某个目录结构是这样的：</p><p><img src="https://user-gold-cdn.xitu.io/2019/5/10/16a9ef45e3963c64?w=660&amp;h=380&amp;f=png&amp;s=14236" alt></p><p><code>index.js</code> 的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> layoutHeaderAside <span class="keyword">from</span> <span class="string">'@/layout/header-aside'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="string">"layoutHeaderAside"</span>: layoutHeaderAside,</span><br><span class="line">    <span class="string">"menu"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "menu" */</span><span class="string">'@/pages/sys/menu'</span>),</span><br><span class="line">    <span class="string">"route"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "route" */</span><span class="string">'@/pages/sys/route'</span>),</span><br><span class="line">    <span class="string">"role"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "role" */</span><span class="string">'@/pages/sys/role'</span>),</span><br><span class="line">    <span class="string">"user"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "user" */</span><span class="string">'@/pages/sys/user'</span>),</span><br><span class="line">    <span class="string">"interface"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "interface" */</span><span class="string">'@/pages/sys/interface'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加一个 book 就需要在这里加上<code>&quot;book&quot;: () =&gt; import(/* webpackChunkName: &quot;book&quot; */&#39;@/pages/sys/book&#39;)</code></p><p>这一行内容也是可以通过配置模板来生成的，比如模板内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;$ model.name $&gt;&quot;: () =&gt; import(/* webpackChunkName: &quot;&lt;$ model.name $&gt;&quot; */&apos;@/pages&lt;$ model.module $&gt;&lt;$ model.name $&gt;&apos;)</span><br></pre></td></tr></table></figure><p>但是生成的内容怎么加到<code>index.js</code>中呢？</p><p>第一种方法：复制粘贴</p><p>第二种方法：</p><p>这部分的模板为 <a href="https://github.com/lazy-mock-templates/d2-admin-pm/blob/master/templates/front-end/routerMapComponent.njk" target="_blank" rel="noopener">routerMapComponent.njk</a> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    &quot;&lt;$ model.name $&gt;&quot;: () =&gt; import(/* webpackChunkName: &quot;&lt;$ model.name $&gt;&quot; */&apos;@/pages&lt;$ model.module $&gt;&lt;$ model.name $&gt;&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后文件保存到 routerMapComponents 目录下，比如 book.js</p><p>修改 index.js :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.context(<span class="string">'./'</span>, <span class="literal">true</span>, /\.js$/);</span><br><span class="line"><span class="keyword">import</span> layoutHeaderAside <span class="keyword">from</span> <span class="string">'@/layout/header-aside'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> componentMaps = &#123;</span><br><span class="line">    <span class="string">"layoutHeaderAside"</span>: layoutHeaderAside,</span><br><span class="line">    <span class="string">"menu"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "menu" */</span><span class="string">'@/pages/sys/menu'</span>),</span><br><span class="line">    <span class="string">"route"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "route" */</span><span class="string">'@/pages/sys/route'</span>),</span><br><span class="line">    <span class="string">"role"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "role" */</span><span class="string">'@/pages/sys/role'</span>),</span><br><span class="line">    <span class="string">"user"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "user" */</span><span class="string">'@/pages/sys/user'</span>),</span><br><span class="line">    <span class="string">"interface"</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "interface" */</span><span class="string">'@/pages/sys/interface'</span>),</span><br><span class="line">&#125;</span><br><span class="line">files.keys().forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'./index.js'</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(componentMaps, files(key).default)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> componentMaps</span><br></pre></td></tr></table></figure><blockquote><p>使用了 require.context</p></blockquote><p>我目前也是使用了这种方法</p><p>第三种方法：</p><p>开发模板的时候，做特殊处理，读取原有 index.js 的内容，按行进行分割，在数组的最后一个元素之前插入新生成的内容，注意逗号的处理，将新数组内容重新写入 index.js 中，注意换行。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Node.js" scheme="https://jaycewu.site/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>以中间件，路由，跨进程事件的姿势使用WebSocket--Node.js篇</title>
    <link href="https://jaycewu.site/2018/11/09/%E4%BB%A5%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8C%E8%B7%AF%E7%94%B1%EF%BC%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A7%BF%E5%8A%BF%E4%BD%BF%E7%94%A8WebSocket--Node.js%E7%AF%87/"/>
    <id>https://jaycewu.site/2018/11/09/以中间件，路由，跨进程事件的姿势使用WebSocket--Node.js篇/</id>
    <published>2018-11-09T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>上一篇文章介绍了在浏览器端以中间件，路由，跨进程事件的姿势使用原生WebSocket。这篇文章将介绍如何使用Node.js以相同的编程模式来实现WebSocket服务端。</p><p>Node.js中比较流行的两个WebSocket库分别是<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">socket.io</a>与<a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws</a>。其中socket.io已经实现了跨进程事件，广播，群发等功能，并且服务端与浏览器端是配套的，在不支持WebSocket技术的浏览器会降级为使用ajax轮询。所以。这里选择使用相对而言较为底层或原始的ws,在其基础上实现文章标题所提到的编程模式。</p><h2 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h2><p>使用ws简简单单就可以启动一个WebSocket服务：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received: %s'</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ws.send(<span class="string">'something'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>上面的wss支持的事件有<code>connection</code>,<code>close</code>,<code>error</code>,<code>headers</code>,<code>listening</code>,ws支持的事件有<code>message</code>,<code>close</code>,<code>error</code>。更多详情可以<a href="https://github.com/websockets/ws/blob/master/doc/ws.md" target="_blank" rel="noopener">这里</a>。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>对ws进行封装，上面提到的事件：WSS的<code>connection</code>，ws的<code>message</code>,<code>close</code>,<code>error</code>。分别提供注册中间件的接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EasySocket</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionMiddleware = [];</span><br><span class="line">        <span class="keyword">this</span>.closeMiddleware = [];</span><br><span class="line">        <span class="keyword">this</span>.messageMiddleware = [];</span><br><span class="line">        <span class="keyword">this</span>.errorMiddleware = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.connectionFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        <span class="keyword">this</span>.closeFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        <span class="keyword">this</span>.messageFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        <span class="keyword">this</span>.errorFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    connectionUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.connectionFn = compose(<span class="keyword">this</span>.connectionMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closeUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.closeMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.closeFn = compose(<span class="keyword">this</span>.closeMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    messageUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageFn = compose(<span class="keyword">this</span>.messageMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    errorUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.errorFn = compose(<span class="keyword">this</span>.errorMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过xxxUse注册相应的中间件。 xxxMiddleware中就是相应的中间件。xxxFn是中间件通过compose处理后的结构。使用runtime参数可以在运行时注册中间件。</p><p>再添加一个listen方法，处理相应的中间件并且实例化WebSocket.Server</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">listen(config) &#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = <span class="keyword">new</span> WebSocket.Server(config);</span><br><span class="line">        <span class="keyword">this</span>.connectionFn = compose(<span class="keyword">this</span>.connectionMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.messageFn = compose(<span class="keyword">this</span>.messageMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.closeFn = compose(<span class="keyword">this</span>.closeMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.errorFn = compose(<span class="keyword">this</span>.errorMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.socket.on(<span class="string">'connection'</span>, (client, req) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> context = &#123; <span class="attr">server</span>: <span class="keyword">this</span>, client, req &#125;;</span><br><span class="line">            <span class="keyword">this</span>.connectionFn(context).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line"></span><br><span class="line">            client.on(<span class="string">'message'</span>, (message) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> req;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    req = <span class="built_in">JSON</span>.parse(message);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    req = message;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> messageContext = &#123; <span class="attr">server</span>: <span class="keyword">this</span>, client, req &#125;</span><br><span class="line">                <span class="keyword">this</span>.messageFn(messageContext).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            client.on(<span class="string">'close'</span>, (code, message) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> closeContext = &#123; <span class="attr">server</span>: <span class="keyword">this</span>, client, code, message &#125;;</span><br><span class="line">                <span class="keyword">this</span>.closeFn(closeContext).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            client.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> errorContext = &#123; <span class="attr">server</span>: <span class="keyword">this</span>, client, error &#125;;</span><br><span class="line">                <span class="keyword">this</span>.errorFn(errorContext).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用<a href="https://github.com/koajs/compose" target="_blank" rel="noopener">koa-compose</a>模块处理中间件。注意xxContext传入了哪些东西，后续定义中间件的时候都可以使用。</p><blockquote><p>compose的作用可看这篇文章 <a href="https://juejin.im/post/5bd7238d51882579201028b0" target="_blank" rel="noopener">傻瓜式解读koa中间件处理模块koa-compose</a></p></blockquote><p>使用：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> EasySocket <span class="keyword">from</span> <span class="string">'easy-socket-node'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    port: <span class="number">3001</span>,</span><br><span class="line">    perMessageDeflate: &#123;</span><br><span class="line">        zlibDeflateOptions: &#123; <span class="comment">// See zlib defaults.</span></span><br><span class="line">            chunkSize: <span class="number">1024</span>,</span><br><span class="line">            memLevel: <span class="number">7</span>,</span><br><span class="line">            level: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        zlibInflateOptions: &#123;</span><br><span class="line">            chunkSize: <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Other options settable:</span></span><br><span class="line">        clientNoContextTakeover: <span class="literal">true</span>, <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        serverNoContextTakeover: <span class="literal">true</span>, <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        <span class="comment">//clientMaxWindowBits: 10,       // Defaults to negotiated value.</span></span><br><span class="line">        serverMaxWindowBits: <span class="number">10</span>,       <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        <span class="comment">// Below options specified as default values.</span></span><br><span class="line">        concurrencyLimit: <span class="number">10</span>,          <span class="comment">// Limits zlib concurrency for perf.</span></span><br><span class="line">        threshold: <span class="number">1024</span>,               <span class="comment">// Size (in bytes) below which messages</span></span><br><span class="line">        <span class="comment">// should not be compressed.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> easySocket = <span class="keyword">new</span> EasySocket();</span><br><span class="line"><span class="comment">//使用中间件获取token</span></span><br><span class="line">easySocket</span><br><span class="line">    .connectionUse(<span class="function">(<span class="params">context,next</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"new Connected"</span>);</span><br><span class="line">       <span class="keyword">let</span> location = url.parse(context.req.url, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">let</span> token=location.query.token;</span><br><span class="line">       <span class="keyword">if</span>(!token)&#123;</span><br><span class="line">           client.send(<span class="string">"invalid token"</span>);</span><br><span class="line">           client.close(<span class="number">1003</span>, <span class="string">"invalid token"</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       context.client.token=token;</span><br><span class="line">       next();</span><br><span class="line">    &#125;);</span><br><span class="line">easySocket</span><br><span class="line">    .listen(config)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Now start WebSocket server on port '</span> + config.port + <span class="string">'...'</span>)</span><br></pre></td></tr></table></figure><p></p><p>使用messageUse可以注册多个处理消息的中间件，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">easySocket.messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//群聊处理中间件</span></span><br><span class="line">   <span class="keyword">if</span> (context.req.action === <span class="string">'roomChatMessage'</span>) &#123;</span><br><span class="line">     <span class="comment">//可以在这里持久化消息，将消息发送给其它群聊客户端</span></span><br><span class="line">     <span class="built_in">console</span>.log(context.req);</span><br><span class="line">   &#125;</span><br><span class="line">   next();</span><br><span class="line"> &#125;)</span><br><span class="line"> .messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//私聊处理中间件</span></span><br><span class="line">   <span class="keyword">if</span> (context.req.action === <span class="string">'privateChatMessage'</span>) &#123;</span><br><span class="line">     <span class="comment">//可以在这里持久化消息，将消息发送给私聊客户端</span></span><br><span class="line">     <span class="built_in">console</span>.log(context.req);</span><br><span class="line">   &#125;</span><br><span class="line">   next();</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>每个中间件都要判断context.req.action，而这个context.res就是浏览器端或客户端发送的数据。怎么消除这个频繁的if判断呢? 我们实现一个简单的消息处理路由。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>定义消息路由中间件</p><p>messageRouteMiddleware.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (routes) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (routes[context.req.action]) &#123;</span><br><span class="line">            <span class="keyword">await</span> routes[context.req.action](context,next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(context.req)</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义路由</p><p>router.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    roomChatMessage:<span class="function"><span class="keyword">function</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里持久化消息，将消息发送给其它群聊客户端，以及其它业务逻辑</span></span><br><span class="line">        <span class="built_in">console</span>.log(context.req);</span><br><span class="line">        next();</span><br><span class="line">    &#125;,</span><br><span class="line">    privateChatMessage:<span class="function"><span class="keyword">function</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//可以在这里持久化消息，将消息发送给私聊客户端，以及其它业务逻辑</span></span><br><span class="line">        <span class="built_in">console</span>.log(context.req);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easySocket.messageUse(messageRouteMiddleware(router))</span><br></pre></td></tr></table></figure><p></p><h2 id="跨进程事件"><a href="#跨进程事件" class="headerlink" title="跨进程事件"></a>跨进程事件</h2><p>上一篇文章已经介绍了跨进程事件，这里直接说实现。</p><p>使用Node的原生事件模块<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span>;</span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">EasySocket</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitMiddleware = [];</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    remoteEmitUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.remoteEmitFn = compose(<span class="keyword">this</span>.remoteEmitMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listen(config) &#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = <span class="keyword">new</span> WebSocket.Server(config);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitFn = compose(<span class="keyword">this</span>.remoteEmitMiddleware);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    emit(event, args, isLocal = <span class="literal">false</span>) &#123; </span><br><span class="line">        <span class="keyword">let</span> arr = [event, args];</span><br><span class="line">        <span class="keyword">if</span> (isLocal) &#123;</span><br><span class="line">            <span class="keyword">super</span>.emit.apply(<span class="keyword">this</span>, arr);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> evt = &#123;</span><br><span class="line">            event: event,</span><br><span class="line">            args: args</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> remoteEmitContext = &#123; <span class="attr">server</span>: <span class="keyword">this</span>, <span class="attr">event</span>: evt &#125;;</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitFn(remoteEmitContext).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>源码地址：<a href="https://github.com/wjkang/easy-socket-node" target="_blank" rel="noopener">easy-socket-node</a></p><p>基于<a href="https://github.com/wjkang/easy-socket-node" target="_blank" rel="noopener">easy-socket-node</a>与<a href="https://github.com/wjkang/easy-socket-browser" target="_blank" rel="noopener">easy-socket-browser</a>一个完整例子：</p><p>index.html<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/easy-socket-browser@1.1.1/lib/easy-socket.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/easy-socket-browser@1.1.1/lib/easy-socket.min.js"</span>&gt;</span><span class="undefined"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> client = <span class="keyword">new</span> EasySocket(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'demo'</span>,</span></span><br><span class="line"><span class="javascript">        autoReconnect: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        pingMsg: <span class="string">'&#123;"type":"event","event":"ping","args":"ping"&#125;'</span><span class="comment">//模拟emit 消息体</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    client.openUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"open"</span>);</span></span><br><span class="line"><span class="undefined">        next();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">        .closeUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span></span><br><span class="line"><span class="undefined">            next();</span></span><br><span class="line"><span class="javascript">        &#125;).errorUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"error"</span>, context.event);</span></span><br><span class="line"><span class="undefined">            next();</span></span><br><span class="line"><span class="javascript">        &#125;).messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (context.res.type === <span class="string">'event'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                context.client.emit(context.res.event, context.res.args, <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            next();</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .reconnectUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'正在进行重连'</span>)</span></span><br><span class="line"><span class="undefined">            next();</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .remoteEmitUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> client = context.client;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> event = context.event;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (client.socket.readyState !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"连接已断开"</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                client.socket.send(<span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">'event'</span>,</span></span><br><span class="line"><span class="undefined">                    event: event.event,</span></span><br><span class="line"><span class="undefined">                    args: event.args</span></span><br><span class="line"><span class="undefined">                &#125;));</span></span><br><span class="line"><span class="undefined">                next();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    client.connect(<span class="string">'ws://localhost:3001'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> msg = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        client.emit(<span class="string">'chatMessage'</span>, msg++)</span></span><br><span class="line"><span class="undefined">    &#125;, 3000);</span></span><br><span class="line"><span class="javascript">    client.on(<span class="string">"serverMessage"</span>, (data) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"serverMessage:"</span> + data)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>server.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EasySocket = <span class="built_in">require</span>(<span class="string">'easy-socket-node'</span>).default;</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    port: <span class="number">3001</span>,</span><br><span class="line">    perMessageDeflate: &#123;</span><br><span class="line">        zlibDeflateOptions: &#123; <span class="comment">// See zlib defaults.</span></span><br><span class="line">            chunkSize: <span class="number">1024</span>,</span><br><span class="line">            memLevel: <span class="number">7</span>,</span><br><span class="line">            level: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        zlibInflateOptions: &#123;</span><br><span class="line">            chunkSize: <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Other options settable:</span></span><br><span class="line">        clientNoContextTakeover: <span class="literal">true</span>, <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        serverNoContextTakeover: <span class="literal">true</span>, <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        <span class="comment">//clientMaxWindowBits: 10,       // Defaults to negotiated value.</span></span><br><span class="line">        serverMaxWindowBits: <span class="number">10</span>,       <span class="comment">// Defaults to negotiated value.</span></span><br><span class="line">        <span class="comment">// Below options specified as default values.</span></span><br><span class="line">        concurrencyLimit: <span class="number">10</span>,          <span class="comment">// Limits zlib concurrency for perf.</span></span><br><span class="line">        threshold: <span class="number">1024</span>,               <span class="comment">// Size (in bytes) below which messages</span></span><br><span class="line">        <span class="comment">// should not be compressed.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> remoteEmitMiddleware = <span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> server = context.server;</span><br><span class="line">    <span class="keyword">var</span> event = context.event;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> client <span class="keyword">of</span> server.clients.values()) &#123;</span><br><span class="line">        client.readyState == <span class="number">1</span> &amp;&amp; client.send(makeEventMessage(event));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeEventMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        type: <span class="string">'event'</span>,</span><br><span class="line">        event: event.event,</span><br><span class="line">        args: event.args</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> messageRouteMiddleware = <span class="function">(<span class="params">routes</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.req.type === <span class="string">'event'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (routes[context.req.event]) &#123;</span><br><span class="line">                routes[context.req.event](context, next);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context.server.emit(context.req.event, context.req.args);<span class="comment">//将会直接触发remoteEmitMiddleware 中间件的调用</span></span><br><span class="line">                next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> router = &#123;</span><br><span class="line">    chatMessage: <span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> req = context.req;</span><br><span class="line">        context.server.emit(<span class="string">'serverMessage'</span>, req.args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> EasySocket();</span><br><span class="line">server</span><br><span class="line">    .connectionUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">        context.server.clients.set(<span class="number">1</span>, context.client)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new connection'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .closeUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'close'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .messageUse(messageRouteMiddleware(router))</span><br><span class="line">    .remoteEmitUse(remoteEmitMiddleware)</span><br><span class="line">    .listen(config)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Now start WebSocket server on port '</span> + config.port + <span class="string">'...'</span>)</span><br></pre></td></tr></table></figure><p></p><p>运行过程，可以停止后端服务，然后再启动，测下心跳重连</p><p>实现的聊天室例子：<a href="http://jaycewu.coding.me/easy-socket-chat/#/" target="_blank" rel="noopener">online chat demo</a></p><p>聊天室前端源码：<a href="https://github.com/wjkang/lazy-mock-im" target="_blank" rel="noopener">lazy-mock-im</a></p><p>聊天室服务端源码：<a href="https://github.com/wjkang/lazy-mock/tree/chat" target="_blank" rel="noopener">lazy-mock</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;上一篇文章介绍了在浏览器端以中间件，路由，跨进程事件的姿势使用原生WebSocket。这篇文章将介绍如何使用N
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="WebSocket" scheme="https://jaycewu.site/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>以中间件，路由，跨进程事件的姿势使用WebSocket</title>
    <link href="https://jaycewu.site/2018/11/05/%E4%BB%A5%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%8C%E8%B7%AF%E7%94%B1%EF%BC%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A7%BF%E5%8A%BF%E4%BD%BF%E7%94%A8WebSocket/"/>
    <id>https://jaycewu.site/2018/11/05/以中间件，路由，跨进程事件的姿势使用WebSocket/</id>
    <published>2018-11-05T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>通过参考koa中间件，socket.io远程事件调用，以一种新的姿势来使用WebSocket。</p><h2 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h2><p>浏览器端使用WebSocket很简单<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create WebSocket connection.</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connection opened</span></span><br><span class="line">socket.addEventListener(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="string">'Hello Server!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen for messages</span></span><br><span class="line">socket.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Message from server '</span>, event.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">MDN</a>关于WebSocket的介绍</p><p>能注册的事件有onclose，onerror，onmessage，onopen。用的比较多的是onmessage，从服务器接受到数据后，会触发message事件。通过注册相应的事件处理函数，可以根据后端推送的数据做相应的操作。</p><p>如果只是写个demo,单单输出后端推送的信息,如下使用即可：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Message from server '</span>, event.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>实际使用过程中，我们需要判断后端推送的数据然后执行相应的操作。比如聊天室应用中，需要判断消息是广播的还是私聊的或者群聊的，以及是纯文字信息还是图片等多媒体信息。这时message处理函数里可能就是一堆的if else。那么有没有什么别的优雅的姿势呢？答案就是中间件与事件，跨进程的事件的发布与订阅。在说远程事件发布订阅之前，需要先从中间件开始，因为后面实现的远程事件发布订阅是基于中间件的。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>前面说了，在WebSocket实例上可以注册事件有onclose，onerror，onmessage，onopen。每一个事件的处理函数里可能需要做各种判断，特别是message事件。参考koa，可以将事件处理函数以中间件方式来进行使用，将不同的操作逻辑分发到不同的中间件中，比如聊天室应用中，聊天信息与系统信息(比如用户登录属于系统信息)是可以放到不同的中间件中处理的。</p><p>koa提供use接口来注册中间件。我们针对不同的事件提供相应的中间件注册接口，并且对原生的WebSocket做封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">EasySocket</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(config) &#123;</span><br><span class="line">       <span class="keyword">this</span>.url = config.url;</span><br><span class="line">       <span class="keyword">this</span>.openMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.closeMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.messageMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.errorMiddleware = [];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">this</span>.openFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.closeFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.messageFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.errorFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    openUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.openMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closeUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.closeMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    messageUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    errorUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>xxxUse</code>注册相应的中间件。 <code>xxxMiddleware</code>中就是相应的中间件。<code>xxxFn</code> 中间件通过compose处理后的结构</p><p>再添加一个connect方法，处理相应的中间件并且实例化原生WebSocket<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">connect(url) &#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url || <span class="keyword">this</span>.url;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.url) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'url is required!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.socket = <span class="keyword">new</span> WebSocket(<span class="keyword">this</span>.url, <span class="string">'echo-protocol'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.openFn = compose(<span class="keyword">this</span>.openMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.socket.addEventListener(<span class="string">'open'</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> context = &#123; <span class="attr">client</span>: <span class="keyword">this</span>, event &#125;;</span><br><span class="line">            <span class="keyword">this</span>.openFn(context).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.closeFn = compose(<span class="keyword">this</span>.closeMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.socket.addEventListener(<span class="string">'close'</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> context = &#123; <span class="attr">client</span>: <span class="keyword">this</span>, event &#125;;</span><br><span class="line">            <span class="keyword">this</span>.closeFn(context).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.messageFn = compose(<span class="keyword">this</span>.messageMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.socket.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> res;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                res = <span class="built_in">JSON</span>.parse(event.data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                res = event.data;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> context = &#123; <span class="attr">client</span>: <span class="keyword">this</span>, event, res &#125;;</span><br><span class="line">            <span class="keyword">this</span>.messageFn(context).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.errorFn = compose(<span class="keyword">this</span>.errorMiddleware);</span><br><span class="line">        <span class="keyword">this</span>.socket.addEventListener(<span class="string">'error'</span>, (event) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> context = &#123; <span class="attr">client</span>: <span class="keyword">this</span>, event &#125;;</span><br><span class="line">            <span class="keyword">this</span>.errorFn(context).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>使用<a href="https://github.com/koajs/compose" target="_blank" rel="noopener">koa-compose</a>模块处理中间件。注意context传入了哪些东西，后续定义中间件的时候都可以使用。</p><blockquote><p>compose的作用可看这篇文章 <a href="https://juejin.im/post/5bd7238d51882579201028b0" target="_blank" rel="noopener">傻瓜式解读koa中间件处理模块koa-compose</a></p></blockquote><p>然后就可以使用了：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> EasySocket()</span><br><span class="line">  .openUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"open"</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .closeUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .errorUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error"</span>, context.event);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//用户登录处理中间件</span></span><br><span class="line">    <span class="keyword">if</span> (context.res.action === <span class="string">'userEnter'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(context.res.user.name+<span class="string">' 进入聊天室'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//创建房间处理中间件</span></span><br><span class="line">    <span class="keyword">if</span> (context.res.action === <span class="string">'createRoom'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'创建房间 '</span>+context.res.room.anme);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .connect(<span class="string">'ws://localhost:8080'</span>)</span><br></pre></td></tr></table></figure><p></p><p>可以看到，用户登录与创建房间的逻辑放到两个中间件中分开处理。不足之处就是每个中间件都要判断context.res.action，而这个context.res就是后端返回的数据。怎么消除这个频繁的if判断呢? 我们实现一个简单的消息处理路由。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>定义消息路由中间件</p><p>messageRouteMiddleware.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (routes) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (routes[context.res.action]) &#123;</span><br><span class="line">            <span class="keyword">await</span> routes[context.res.action](context,next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(context.res)</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义路由</p><p>router.js<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    userEnter:<span class="function"><span class="keyword">function</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(context.res.user.name+<span class="string">' 进入聊天室'</span>);</span><br><span class="line">        next();</span><br><span class="line">    &#125;,</span><br><span class="line">    createRoom:<span class="function"><span class="keyword">function</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'创建房间 '</span>+context.res.room.anme);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> EasySocket()</span><br><span class="line">  .openUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"open"</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .closeUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .errorUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error"</span>, context.event);</span><br><span class="line">    next();</span><br><span class="line">  &#125;)</span><br><span class="line">  .messageUse(messageRouteMiddleware(router))<span class="comment">//使用消息路由中间件，并传入定义好的路由</span></span><br><span class="line">  .connect(<span class="string">'ws://localhost:8080'</span>)</span><br></pre></td></tr></table></figure><p></p><p>一切都变得美好了，感觉就像在使用koa。想一个问题，当接收到后端推送的消息时，我们需要做相应的DOM操作。比如路由里面定义的userEnter，我们可能需要在对应的函数里操作用户列表的DOM，追加新用户。这使用原生JS或JQ都是没有问题的，但是如果使用vue,react这些，因为是组件化的，用户列表可能就是一个组件，怎么访问到这个组件实例呢？(当然也可以访问vuex,redux的store,但是并不是所有组件的数据都是用store管理的)。</p><p>我们需要一个运行时注册中间件的功能，然后在组件的相应的生命周期钩子里注册中间件并且传入组件实例</p><p>运行时注册中间件，修改如下代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">messageUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messageFn = compose(<span class="keyword">this</span>.messageMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>修改 messageRouteMiddleware.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (routes,component) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (context, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (routes[context.req.action]) &#123;</span><br><span class="line">            context.component=component;<span class="comment">//将组件实例挂到context下</span></span><br><span class="line">            <span class="keyword">await</span> routes[context.req.action](context,next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(context.req)</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似vue mounted中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  <span class="keyword">let</span> client = <span class="keyword">this</span>.$wsClients.get(<span class="string">"im"</span>);<span class="comment">//获取指定EasySocket实例</span></span><br><span class="line">  client.messageUse(messageRouteMiddleware(router,<span class="keyword">this</span>),<span class="literal">true</span>)<span class="comment">//运行时注册中间件，并传入定义好的路由以及当前组件中的this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由中通过 context.component 即可访问到当前组件。</p><p>完美了吗？每次组件mounted 都注册一次中间件，问题很大。所以需要一个判断中间件是否已经注册的功能。也就是一个支持具名注册中间件的功能。这里就暂时不实现了，走另外一条路，也就是之前说到的远程事件的发布与订阅，我们也可以称之为跨进程事件。</p><h2 id="跨进程事件"><a href="#跨进程事件" class="headerlink" title="跨进程事件"></a>跨进程事件</h2><p>看一段socket.io的代码：</p><p>Server (app.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(handler)</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(app);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.listen(<span class="number">80</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  fs.readFile(__dirname + <span class="string">'/index.html'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'Error loading index.html'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">  socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Client (index.html)<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/socket.io/socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> socket = io(<span class="string">'http://localhost'</span>);</span><br><span class="line">  socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>注意力转到这两部分：</p><p>服务端<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>客户端<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = io(<span class="string">'http://localhost'</span>);</span><br><span class="line">socket.on(<span class="string">'news'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  socket.emit(<span class="string">'my other event'</span>, &#123; <span class="attr">my</span>: <span class="string">'data'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>使用事件，客户端通过on订阅’news’事件，并且当触发‘new’事件的时候通过emit发布’my other event’事件。服务端在用户连接的时候发布’news’事件，并且订阅’my other event’事件。</p><p>一般我们使用事件的时候，都是在同一个页面中on和emit。而socket.io的神奇之处就是同一事件的on和emit是分别在客户端和服务端，这就是跨进程的事件。</p><p>那么，在某一端emit某个事件的时候，另一端如果on监听了此事件，是如何知道这个事件emit(发布)了呢？</p><p>没有看socket.io源码之前，我设想应该是emit方法里做了某些事情。就像java或c#，实现rpc的时候，可以依据接口定义动态生成实现(也称为代理)，动态实现的(代理)方法中，就会将当前方法名称以及参数通过相应协议进行序列化，然后通过http或者tcp等网络协议传输到RPC服务端，服务端进行反序列化，通过反射等技术调用本地实现，并返回执行结果给客户端。客户端拿到结果后，整个调用完成，就像调用本地方法一样实现了远程方法的调用。</p><p>看了socket.io emit的代码实现后，思路也是大同小异，通过将当前emit的事件名和参数按一定规则组合成数据，然后将数据通过WebSocket的send方法发送出去。接收端按规则取到事件名和参数，然后本地触发emit。(注意远程emit和本地emit，socket.io中直接调用的是远程emit)。</p><p>下面是实现代码，事件直接用的<a href="https://github.com/component/emitter" target="_blank" rel="noopener">emitter</a>模块，并且为了能自定义emit事件名和参数组合规则，以中间件的方式提供处理方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">EasySocket</span> <span class="keyword">extends</span> <span class="title">Emitter</span></span>&#123;<span class="comment">//继承Emitter</span></span><br><span class="line">    <span class="keyword">constructor</span>(config) &#123;</span><br><span class="line">       <span class="keyword">this</span>.url = config.url;</span><br><span class="line">       <span class="keyword">this</span>.openMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.closeMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.messageMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.errorMiddleware = [];</span><br><span class="line">       <span class="keyword">this</span>.remoteEmitMiddleware = [];<span class="comment">//新增的部分</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">this</span>.openFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.closeFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.messageFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.errorFn = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">       <span class="keyword">this</span>.remoteEmitFn = <span class="built_in">Promise</span>.resolve();<span class="comment">//新增的部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    openUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.openMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closeUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.closeMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    messageUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.messageMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    errorUse(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errorMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增的部分</span></span><br><span class="line">    remoteEmitUse(fn, runtime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitMiddleware.push(fn);</span><br><span class="line">        <span class="keyword">if</span> (runtime) &#123;</span><br><span class="line">            <span class="keyword">this</span>.remoteEmitFn = compose(<span class="keyword">this</span>.remoteEmitMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    connect(url) &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">//新增部分</span></span><br><span class="line">       <span class="keyword">this</span>.remoteEmitFn = compose(<span class="keyword">this</span>.remoteEmitMiddleware);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写emit方法，支持本地调用以远程调用</span></span><br><span class="line">    emit(event, args, isLocal = <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = [event, args];</span><br><span class="line">        <span class="keyword">if</span> (isLocal) &#123;</span><br><span class="line">            <span class="keyword">super</span>.emit.apply(<span class="keyword">this</span>, arr);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> evt = &#123;</span><br><span class="line">            event: event,</span><br><span class="line">            args: args</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> remoteEmitContext = &#123; <span class="attr">client</span>: <span class="keyword">this</span>, <span class="attr">event</span>: evt &#125;;</span><br><span class="line">        <span class="keyword">this</span>.remoteEmitFn(remoteEmitContext).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(error) &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个简单的处理中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">client.remoteEmitUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> client = context.client;</span><br><span class="line">    <span class="keyword">let</span> event = context.event;</span><br><span class="line">    <span class="keyword">if</span> (client.socket.readyState !== <span class="number">1</span>) &#123;</span><br><span class="line">      alert(<span class="string">"连接已断开!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      client.socket.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        type: <span class="string">'event'</span>,</span><br><span class="line">        event: event.event,</span><br><span class="line">        args: event.args</span><br><span class="line">      &#125;));</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>意味着调用<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client.emit(<span class="string">'chatMessage'</span>,&#123;</span><br><span class="line">    <span class="keyword">from</span>:<span class="string">'admin'</span>,</span><br><span class="line">    masg:<span class="string">"Hello WebSocket"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>就会组合成数据<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type: <span class="string">'event'</span>,</span><br><span class="line">    event: <span class="string">'chatMessage'</span>,</span><br><span class="line">    args: &#123;</span><br><span class="line">        <span class="keyword">from</span>:<span class="string">'admin'</span>,</span><br><span class="line">        masg:<span class="string">"Hello WebSocket"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>发送出去。</p><p>服务端接受到这样的数据，可以做相应的数据处理（后面会使用nodejs实现类似的编程模式），也可以直接发送给别的客户端。客户受到类似的数据，可以写专门的中间件进行处理，比如：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client.messageUse(<span class="function">(<span class="params">context, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.res.type === <span class="string">'event'</span>) &#123;</span><br><span class="line">      context.client.emit(context.res.event, context.res.args, <span class="literal">true</span>);<span class="comment">//注意这里的emit是本地emit。</span></span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>如果本地订阅的chatMessage事件，回到函数就会被触发。</p><p>在vue或react中使用，也会比之前使用路由的方式简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">   <span class="keyword">let</span> client = <span class="keyword">this</span>.$wsClients.get(<span class="string">"im"</span>);</span><br><span class="line">   client.on(<span class="string">"chatMessage"</span>, data =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> isSelf = data.from.id == <span class="keyword">this</span>.user.id;</span><br><span class="line">      <span class="keyword">let</span> msg = &#123;</span><br><span class="line">        name: data.from.name,</span><br><span class="line">        msg: data.msg,</span><br><span class="line">        createdDate: data.createdDate,</span><br><span class="line">        isSelf</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.broadcastMessageList.push(msg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件销毁的时候移除相应的事件订阅即可，或者清空所有事件订阅</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">destroyed() &#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="keyword">this</span>.$wsClients.get(<span class="string">"im"</span>);</span><br><span class="line">    client.removeAllListeners();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="心跳重连"><a href="#心跳重连" class="headerlink" title="心跳重连"></a>心跳重连</h2><p>核心代码直接从<a href="https://github.com/zimv/websocket-heartbeat-js" target="_blank" rel="noopener">websocket-heartbeat-js</a> copy过来的(用npm包，还得在它的基础上再包一层)，相关文章 <a href="https://www.cnblogs.com/1wen/p/5808276.html" target="_blank" rel="noopener">初探和实现websocket心跳重连</a>。</p><p>核心代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">heartCheck() &#123;</span><br><span class="line">    <span class="keyword">this</span>.heartReset();</span><br><span class="line">    <span class="keyword">this</span>.heartStart();</span><br><span class="line">&#125;</span><br><span class="line">heartStart() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pingTimeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里发送一个心跳，后端收到后，返回一个心跳消息</span></span><br><span class="line">        <span class="keyword">this</span>.socket.send(<span class="keyword">this</span>.pingMsg);</span><br><span class="line">        <span class="comment">//接收到心跳信息说明连接正常,会执行heartCheck(),重置心跳(清除下面定时器)</span></span><br><span class="line">        <span class="keyword">this</span>.pongTimeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//此定时器有运行的机会，说明发送ping后，设置的超时时间内未收到返回信息</span></span><br><span class="line">            <span class="keyword">this</span>.socket.close();<span class="comment">//不直接调用reconnect，避免旧WebSocket实例没有真正关闭，导致不可预料的问题</span></span><br><span class="line">        &#125;, <span class="keyword">this</span>.pongTimeout);</span><br><span class="line">    &#125;, <span class="keyword">this</span>.pingTimeout);</span><br><span class="line">&#125;</span><br><span class="line">heartReset() &#123;</span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.pingTimeoutId);</span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.pongTimeoutId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>源码地址：<a href="https://github.com/wjkang/easy-socket-browser" target="_blank" rel="noopener">easy-socket-browser</a></p><p>nodejs实现的类似的编程模式(有空再细说)：<a href="https://github.com/wjkang/easy-socket-node" target="_blank" rel="noopener">easy-socket-node</a></p><p>实现的聊天室例子：<a href="http://jaycewu.coding.me/easy-socket-chat/#/" target="_blank" rel="noopener">online chat demo</a></p><p>聊天室前端源码：<a href="https://github.com/wjkang/lazy-mock-im" target="_blank" rel="noopener">lazy-mock-im</a></p><p>聊天室服务端源码：<a href="https://github.com/wjkang/lazy-mock/tree/chat" target="_blank" rel="noopener">lazy-mock</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;通过参考koa中间件，socket.io远程事件调用，以一种新的姿势来使用WebSocket。&lt;/p&gt;&lt;h2 
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="WebSocket" scheme="https://jaycewu.site/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>傻瓜式解读koa中间件处理模块koa-compose</title>
    <link href="https://jaycewu.site/2018/10/29/%E5%82%BB%E7%93%9C%E5%BC%8F%E8%A7%A3%E8%AF%BBkoa%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97koa-compose/"/>
    <id>https://jaycewu.site/2018/10/29/傻瓜式解读koa中间件处理模块koa-compose/</id>
    <published>2018-10-29T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>最近需要单独使用到koa-compose这个模块，虽然使用koa的时候大致知道中间件的执行流程，但是没仔细研究过源码用起来还是不放心(主要是这个模块代码少，多的话也没兴趣去研究了)。</p><p>koa-compose看起来代码少，但是确实绕。闭包，递归，Promise。。。看了一遍脑子里绕不清楚。看了网上几篇解读文章，都是针对单行代码做解释，还是绕不清楚。最后只好采取一种傻瓜的方式：</p><p>koa-compose去掉一些注释，类型校验后，源码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出如下代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">var</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'fn is undefined'</span>)</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 1'</span>);</span><br><span class="line">    next().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 1'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'middleware 1 return'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 2'</span>);</span><br><span class="line">    next().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 2'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'middleware 2 return'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 3'</span>);</span><br><span class="line">    next().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'middleware 3 return'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">var</span> middleware=[</span><br><span class="line">  f1,f2,f3</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> next=<span class="function"><span class="keyword">function</span>(<span class="params">context,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 4'</span>);</span><br><span class="line">    next().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middleware 4'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'middleware 4 return'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">compose().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p></p><p>直接运行结果如下：</p><p>“middleware 1”</p><p>“middleware 2”</p><p>“middleware 3”</p><p>“middleware 4”</p><p>“middleware 4”</p><p>“middleware 3”</p><p>“middleware 2”</p><p>“middleware 1”</p><p>“fn is undefined”</p><p>“middleware 4 return”</p><p>“middleware 3 return”</p><p>“middleware 2 return”</p><p>“middleware 1 return”</p><p>按着代码运行流程一步步分析：</p><blockquote><p><code>dispatch(0)</code></p></blockquote><blockquote><p>i==0,index==-1 i&gt;index 往下</p></blockquote><blockquote><p><code>index=0</code></p></blockquote><blockquote><p><code>fn=f1</code></p></blockquote><blockquote><p><code>Promise.resolve(f1(context, dispatch.bind(null, 0 + 1)))</code></p></blockquote><blockquote><p>这就会执行</p></blockquote><blockquote><p><code>f1(context, dispatch.bind(null, 0 + 1))</code></p></blockquote><blockquote><p>进入到f1执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 1&#39;);</code></p></blockquote><p>输出middleware 1</p><blockquote><p><code>next()</code></p></blockquote><blockquote><p>其实就是调用<code>dispatch(1)</code> bind的功劳</p></blockquote><p>递归开始</p><blockquote><p><code>dispatch(1)</code></p></blockquote><blockquote><p>i==1,index==0 i&gt;index 往下</p></blockquote><blockquote><p><code>index=1</code></p></blockquote><blockquote><p><code>fn=f2</code></p></blockquote><blockquote><p><code>Promise.resolve(f2(context, dispatch.bind(null, 1 + 1)))</code></p></blockquote><blockquote><p>这就会执行</p></blockquote><blockquote><p><code>f2(context, dispatch.bind(null, 1 + 1))</code></p></blockquote><blockquote><p>进入到f2执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 2&#39;);</code></p></blockquote><p>输出middleware 2</p><blockquote><p><code>next()</code></p></blockquote><blockquote><p>其实就是调用<code>dispatch(2)</code></p></blockquote><p>接着递归</p><blockquote><p><code>dispatch(2)</code></p></blockquote><blockquote><p>i==2,index==1 i&gt;index 往下</p></blockquote><blockquote><p><code>index=2</code></p></blockquote><blockquote><p><code>fn=f3</code></p></blockquote><blockquote><p><code>Promise.resolve(f3(context, dispatch.bind(null, 2 + 1)))</code></p></blockquote><blockquote><p>这就会执行</p></blockquote><blockquote><p><code>f3(context, dispatch.bind(null, 2 + 1))</code></p></blockquote><blockquote><p>进入到f3执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 3&#39;);</code></p></blockquote><p>输出middleware 3</p><blockquote><p><code>next()</code></p></blockquote><blockquote><p>其实就是调用<code>dispatch(3)</code></p></blockquote><p>接着递归</p><blockquote><p><code>dispatch(3)</code></p></blockquote><blockquote><p>i==3,index==2 i&gt;index 往下</p></blockquote><blockquote><p><code>index=3</code></p></blockquote><blockquote><p><strong><code>i === middleware.length</code></strong></p></blockquote><blockquote><p><strong><code>fn=next</code></strong></p></blockquote><blockquote><p><code>Promise.resolve(next(context, dispatch.bind(null, 3 + 1)))</code></p></blockquote><blockquote><p>这就会执行</p></blockquote><blockquote><p><code>next(context, dispatch.bind(null, 3 + 1))</code></p></blockquote><blockquote><p>进入到next执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 4&#39;);</code></p></blockquote><p>输出middleware 4</p><blockquote><p><code>next()</code></p></blockquote><blockquote><p>其实就是调用<code>dispatch(4)</code></p></blockquote><p>接着递归</p><blockquote><p><code>dispatch(4)</code></p></blockquote><blockquote><p>i==4,index==3 i&gt;index 往下</p></blockquote><blockquote><p><code>index=4</code></p></blockquote><blockquote><p><strong><code>fn=middleware[4]</code></strong></p></blockquote><blockquote><p><strong><code>fn=undefined</code></strong></p></blockquote><blockquote><p><code>reuturn Promise.resolve(&#39;fn is undefined&#39;)</code></p></blockquote><blockquote><p>回到next执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 4&#39;);</code></p></blockquote><p>输出middleware 4</p><blockquote><p><code>return &#39;middleware 4 return&#39;</code></p></blockquote><blockquote><p><code>Promise.resolve(&#39;middleware 4 return&#39;)</code></p></blockquote><blockquote><p>回到f3执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 3&#39;);</code></p></blockquote><p>输出middleware 3</p><blockquote><p><code>return &#39;middleware 3 return&#39;</code></p></blockquote><blockquote><p><code>Promise.resolve(&#39;middleware 3 return&#39;)</code></p></blockquote><blockquote><p>回到f2执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 2&#39;);</code></p></blockquote><p>输出middleware 2</p><blockquote><p><code>return &#39;middleware 2 return&#39;</code></p></blockquote><blockquote><p><code>Promise.resolve(&#39;middleware 2 return&#39;)</code></p></blockquote><blockquote><p>回到f1执行上下文</p></blockquote><blockquote><p><code>console.log(&#39;middleware 1&#39;);</code></p></blockquote><p>输出middleware 1</p><blockquote><p><code>return &#39;middleware 1 return&#39;</code></p></blockquote><blockquote><p><code>Promise.resolve(&#39;middleware 1 return&#39;)</code></p></blockquote><blockquote><p>回到全局上下文</p></blockquote><p>至此已经输出</p><p>“middleware 1”</p><p>“middleware 2”</p><p>“middleware 3”</p><p>“middleware 4”</p><p>“middleware 4”</p><p>“middleware 3”</p><p>“middleware 2”</p><p>“middleware 1”</p><p>那么</p><p>“fn is undefined”</p><p>“middleware 4 return”</p><p>“middleware 3 return”</p><p>“middleware 2 return”</p><p>“middleware 1 return”</p><p>怎么来的呢</p><p>回头看一下，每个中间件里都有</p><p><code>next().then(data=&gt;console.log(data));</code></p><p>按照之前的分析，then里最先拿到结果的应该是next中间件的，而且结果就是<code>Promise.resolve(&#39;fn is undefined&#39;)</code>的结果，然后分别是f4,f3,f2,f1。那么为什么都是最后才输出呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'fn is undefined'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'middleware 4'</span>);</span><br></pre></td></tr></table></figure><p>运行一下就清楚了</p><p>或者<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'fn is undefined'</span>),<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'middleware 4'</span>);</span><br></pre></td></tr></table></figure><p></p><p>整个调用过程还可以看成是这样的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composeDetail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">    f1(context,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">        f2(context,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">            f3(context,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                next(context,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'fn is undefined'</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">              )</span><br><span class="line">            &#125;)</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">composeDetail().then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p></p><p>方法虽蠢，但是compose的作用不言而喻了</p><p>最后，<code>if (i &lt;= index) return Promise.reject(new Error(&#39;next() called multiple times&#39;))</code>这句代码何时回其作用呢？</p><p>一个中间件里调用两次<code>next()</code>，按照上面的套路走，相信很快就明白了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;最近需要单独使用到koa-compose这个模块，虽然使用koa的时候大致知道中间件的执行流程，但是没仔细研究
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="koa" scheme="https://jaycewu.site/tags/koa/"/>
    
      <category term="compose" scheme="https://jaycewu.site/tags/compose/"/>
    
      <category term="中间件" scheme="https://jaycewu.site/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>企业管理系统前后端分离架构设计  系列一  权限模型篇</title>
    <link href="https://jaycewu.site/2018/10/22/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%20%20%E7%B3%BB%E5%88%97%E4%B8%80%20%20%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B%E7%AF%87/"/>
    <id>https://jaycewu.site/2018/10/22/企业管理系统前后端分离架构设计  系列一  权限模型篇/</id>
    <published>2018-10-22T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><h2 id="术语描述"><a href="#术语描述" class="headerlink" title="术语描述"></a>术语描述</h2><ul><li>用户(Subject)：发起操作的主体</li><li>对象(Object)：指操作所针对的客体对象，比如文章或评论</li><li>权限(Permission)：用来指代对某种对象的某一种操作，例如“添加文章的操作”</li><li>权限码：权限的代号，例如用“ARTICLE_ADD”来指代“添加文章的操作”权限</li></ul><blockquote><p>权限有时候也可以称为动作或者功能。比如“添加文章”，既可以认为它是一个动作，也可以认为它是一个功能。对象也可以称为资源。</p></blockquote><h2 id="常用的权限模型"><a href="#常用的权限模型" class="headerlink" title="常用的权限模型"></a>常用的权限模型</h2><ul><li>ACL(Access Control List)(访问控制列表)</li><li>DAC(Discretionary Access Control)(自主访问控制)</li><li>MAC(Mandatory Access Control)(强制访问控制)</li><li>RBAC(Role-Based Access Control)(基于角色的访问控制)</li><li>ABAC(Attribute-Based Access Control)(基于属性的访问控制)</li></ul><h2 id="ACL-Access-Control-List-访问控制列表"><a href="#ACL-Access-Control-List-访问控制列表" class="headerlink" title="ACL(Access Control List)(访问控制列表)"></a>ACL(Access Control List)(访问控制列表)</h2><p>ACL是最早也是最基本的一种访问控制机制，它是用来描述用户和权限之间关系的数据列表。它的原理非常简单：每一项资源，都配有一个列表，这个列表记录的就是哪些用户可以对这项资源执行CRUD等操作。当试图访问这项资源时，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定当前用户可否执行相应的操作。</p><p>例如一个文件对象的 ACL 为 Alice: read,write; Bob: read，这代表 Alice 对该文件既能读又能写，而 Bob 只能读取。</p><p>由于ACL的简单性，使得它几乎不需要任何基础设施就可以完成访问控制。但同时它的缺点也是很明显的，由于需要维护大量的访问权限列表，ACL在性能上有明显的缺陷。另外，对于拥有大量用户与众多资源的应用，管理访问控制列表本身就变成非常繁重的工作。</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/7/16514ae1622fdb0d?w=1114&amp;h=602&amp;f=png&amp;s=34314" alt></p><blockquote><p>最开始的ACL定义中，用户直接和权限挂钩，数据存储的是用户与权限的关联关系。如果两个用户的权限是一样的，那么就需要分别存储这两个用户与权限的关联关系，也是上面所提到的ACL的缺陷。为了解决这些问题，便有了对ACL设计的改进，相同权限的用户放到同一个分组里，分组与权限挂钩，不再是用户直接与权限挂钩。以及后来出现的RBAC(基于角色的访问控制)，角色与分组也是差不多的概念，角色直接与权限挂钩，用户再与角色进行关联。</p></blockquote><blockquote><p>所以，现在一般说ACL,不再是用户直接和权限挂钩的一种权限控制模型，把它看做一个单纯的访问控制列表即可。列表里维护的可能是用户与权限的关系，也可以是用户组与权限的关系，也可以是角色与权限的关系，甚至是部门，职位等等于权限的关系。</p></blockquote><blockquote><p>ACL是权限体系中的业务规则。RBAC等权限模型要用到ACL才能工作，ACL服务于RBAC等权限模型，其它权限控制体系里的权限规则也叫ACL。</p></blockquote><h2 id="DAC-Discretionary-Access-Control-自主访问控制"><a href="#DAC-Discretionary-Access-Control-自主访问控制" class="headerlink" title="DAC(Discretionary Access Control)(自主访问控制)"></a>DAC(Discretionary Access Control)(自主访问控制)</h2><p>系统会识别用户，然后根据被操作对象（Subject）的权限控制列表（ACL: Access Control List）或者权限控制矩阵（ACL: Access Control Matrix）的信息来决定用户的是否能对其进行哪些操作，例如读取或修改。<br>而拥有对象权限的用户，又可以将该对象的权限分配给其他用户，所以称之为“自主（Discretionary）”控制。</p><p>因为用户能自主地将自己拥有的权限授予其他用户，所以DAC模型可以任意传递权限，用户能间接获得本不具有的访问权限，因此DAC模型的安全性较低，不能给系统充分的数据保护。</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/7/16514b6c83f28b43?w=1117&amp;h=599&amp;f=png&amp;s=34354" alt></p><p>DAC可以直接使用ACL的物理模型，区别在于，DAC模型中用户可以将自己具备的权限分配给其它用户(程序里的操作就是根据用户ID筛选出权限列表，根据列表为要分配权限的用户构造出新的权限列表并保存)</p><blockquote><p>DAC是传统的UNIX访问控制模型，也是Windows文件系统的访问控制模型。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/8/7/16514fc92373b6e0?w=510&amp;h=529&amp;f=png&amp;s=17026" alt></p><p>Windows的文件访问权限的设置中，除了用户，还有组。这个组与后面要说到的RABC模型的角色有什么区别呢？</p><p><a href="https://stackoverflow.com/questions/7770728/group-vs-role-any-real-difference" target="_blank" rel="noopener">https://stackoverflow.com/questions/7770728/group-vs-role-any-real-difference</a></p><p>我认为没必要去划分的太清楚，不管是组还是角色，都是为了更好的管理和分配权限在最原始的ACL模型上做的改进。如果有需要，甚至可以把权限分配到部门，职位上。</p><h2 id="MAC-Mandatory-Access-Control-强制访问控制"><a href="#MAC-Mandatory-Access-Control-强制访问控制" class="headerlink" title="MAC(Mandatory Access Control)(强制访问控制)"></a>MAC(Mandatory Access Control)(强制访问控制)</h2><p>MAC是为了弥补DAC权限控制过于分散的问题而诞生的。在MAC的设计中，每一个对象都有一些权限标识，每个用户同样也会有一些权限标识，而用户能否对该对象进行操作取决于双方的权限标识的关系，这个限制判断通常是由系统硬性限制的。访问时，系统先对用户的访问许可级别和资源对象的密级进行比较，再决定用户是否可以访问资源对象。用户不能改变自身和资源对象的安全级别，只有系统管理员或管理程序才能 控制资源对象和用户的级别。比如在影视作品中我们经常能看到特工在查询机密文件时，屏幕提示需要“无法访问，需要一级安全许可”，这个例子中，文件上就有“一级安全许可”的权限标识，而用户并不具有。</p><p>MAC非常适合机密机构或者其他等级观念强烈的行业，但对于类似商业服务系统，则因为不够灵活而不能适用。</p><p>MAC可以继续使用DAC的模型，但是要对用户进行等级划分，比如一级，二级，三级。。。，对对象资源也要做划分，比如机密，秘密和最高机密。用户访问的资源的时候，根据用户等级与资源访问级别来做判断，比如一级用户只能访问机密文件，如果访问的是最高机密文件，系统就会拒绝。这一系列规则是优先于DAC的，如果MAC与DAC混用，要先校验MAC再校验DAC。</p><h2 id="RBAC-Role-Based-Access-Control-基于角色的访问控制"><a href="#RBAC-Role-Based-Access-Control-基于角色的访问控制" class="headerlink" title="RBAC(Role-Based Access Control)(基于角色的访问控制)"></a>RBAC(Role-Based Access Control)(基于角色的访问控制)</h2><p>ACL的访问控制机制中，直接维护的是用户与功能的关系，这一系列的关系就是一个权限列表。当很多的用户具有相同功能权限的时候，就要进行繁琐的关联操作。RBAC就是在用户与权限之间引入了角色的概念。用户与角色之间做关联，权限列表维护的是角色与功能的关系。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/21/16696c228a8981ac?w=1069&amp;h=717&amp;f=png&amp;s=45661" alt></p><p>RBAC是目前使用最普遍的权限控制模型。当某些用户具备相同的权限的时候，只需要为这些用户建一个角色，把相应的功能关联到这个角色上，生成角色的权限列表。当有新的用户需要相同权限的时候，把用户关联到这个角色上即可。而当用检查或校验用户的操作权限的时候，查询用户所属角色的权限列表即可。</p><p>当然，RBAC也不是完美的，比如想要为某个用户单独设置某个功能权限，可能需要为这个功能权限单独创建一个角色，然后把特定的用户关联到这个角色上。当想要移除某个用户的特定功能权限的时候，可能需要重新设置角色的功能权限，把特定功能权限从当前角色中移除，建立新的角色并关联特定的功能权限，然后再把新角色与相关的用户做关联(也可以直接在特定功能的程序里校验操作用户)</p><p>这里说一个比较常见的RBAC的错误的用法：那就是直接使用角色做权限判断。比如只有角色A才能做文章的删除操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delPost</span>(<span class="params">postId</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isRole(<span class="string">'A'</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需求该为角色B也可以删除文章。那就必须修改代码<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delPost</span>(<span class="params">postId</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isRole(<span class="string">'A'</span>)&amp;&amp;!isRole(<span class="string">'B'</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>正确的做法应该是添加”删除文章”这个功能，把这个功能关联到相应的角色上。判断的时候是根据功能去判断而不是角色。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delPost</span>(<span class="params">postId</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!hasPermission(<span class="string">'POST_DEL'</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>针对“只有角色A才能做文章的删除操作”这一需求，把这个删除功能关联到角色A上，然后把需要这个操作权限的用户加入到角色A中即可。当别的角色也需要这个操作权限，把功能关联到对应角色上即可，不需要再修改代码。</p><p>在RBAC的核心基础上，还可以做相应的扩展，比如角色继承，角色分组之类的，这些扩展都是为了在一定程度简化权限管理工作。</p><h2 id="ABAC-Attribute-Based-Access-Control-基于属性的权限控制"><a href="#ABAC-Attribute-Based-Access-Control-基于属性的权限控制" class="headerlink" title="ABAC(Attribute-Based Access Control)(基于属性的权限控制)"></a>ABAC(Attribute-Based Access Control)(基于属性的权限控制)</h2><p>RBAC虽然是目前最普遍的权限控制模型。但是某些情况下，RBAC是无法满足并且也实现不了的。比如业务员1和业务员2都属于业务员角色，都有查看客户订单的权限。当有一个需求，要求业务员1只能查看北京地区的客户的订单，业务员2只能查看上海的客户的订单。这单单使用RBAC是无法实现。借助RBAC，可行的做法是，分地区创建角色，然后程序中根据角色做数据的过滤，这种做法缺点之前也提到过，需求变更的时候可能需要每次都修改代码。</p><p>上面业务员查看订单的例子，地区是订单的一个属性，需求就是针对这个地区属性来做订单的查询范围的权限控制。这种权限控制方式就是ABAC(Attribute-Based Access Control)(基于属性的权限控制)，也被一些人称为是权限系统设计的未来。</p><p>不同于常见的将用户通过某种方式关联到权限的方式，ABAC则是通过动态计算一个或一组属性是否满足某种条件来进行授权判断的（可以编写简单的逻辑）。属性通常来说分为四类：用户属性（如用户年龄），环境属性（如当前时间），操作属性（如读取）和对象属性（如一篇文章，又称资源属性），所以理论上能够实现非常灵活的权限控制，几乎能满足所有类型的需求。</p><p>例如规则：“允许所有班主任在上课时间自由进出校门”这条规则，其中，“班主任”是用户的角色属性，“上课时间”是环境属性，“进出”是操作属性，而“校门”就是对象属性了。</p><p>ABAC非常的灵活，但是实现也是非常的难。这其中涉及到逻辑的动态执行，数据动态过滤等，更加具体就是动态拼接SQL语句(使用ORM的话就是动态组装对应ORM的查询语句)。</p><p>感兴趣的可以在Github上搜索ABAC，看看不同语言是否已经有现成的解决方案。下面说说我学习到的一种实现方式：</p><p>还是业务员查看订单的例子，在RBAC的基础上，扩展一个实体规则，订单就是实体，也就是针对订单设置一系列的规则。规则存储格式可以是json也可以是xml,甚至是Sql语句，能解析即可。比如北京地区这个规则：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"regionId"</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上海地区：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"regionId"</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>regionId</code> 就是系统里对应区域的Id,也是订单或订单相关表的某个字段。</p><p>保存这个规则的时候，规则内容(就是上面的json),规则实体(也就是订单，表明这个规则是针对订单的)是必须的。也可以加上这个规则是适用增删改查中的一种或多种。</p><p>创建好实体的规则，将规则与角色做关联，也就是将北京地区的规则关联到北京地区角色上，上海地区的规则关联到上海地区角色上。</p><p>后端做权限校验的时候，还是先按RBAC模型的控制方式进行校验(是否具备订单查看权限)，然后根据当前操作对象(也就是实体)，取出用户所属角色关联的对应实体的规则。然后解析规则，动态拼接Sql或者ORM语句。</p><p>没做地区限制(或没配置规则)的时候，Sql可能是<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select userId,orderNo,createdDate from T_Order</span><br></pre></td></tr></table></figure><p></p><p>配置了规则，解析拼接后可能就是<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select userId,orderNo,createdDate from T_Order where regionId=1</span><br></pre></td></tr></table></figure><p></p><p>这里是针对地区这个属性实现了动态的权限控制。实际开发过程中，要控制的东西是非常多了，查看字段的控制，数据范围的控制。要满足这些复杂的控制，需要制定一套完整的规则，以及针对规则编写相应的解析程序。比如根据配置的规则，最后解析出来可能是各种Sql语句:&lt;,&gt;,=,like,in,not in等等。</p><p>可以看出，要真正的落地实现ABAC是多么的复杂。每次都要解析规则，对程序的性能也造成的影响，就算使用缓存，命中的概率也是非常的小，因为很多因素都是动态的。</p><p>所以，如果需要根据属性做权限判断的场景不是很多的话，还是建议使用RBAC，然后程序中做判断比较省事省力。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ACL早期定义中是一种权限控制机制，这种机制直接维护的是用户与功能的关系，功能就是针对对象定义的一些操作，比如增删改查的等。用户与功能的关系列表也称为权限列表或访问控制列表，现在说ACL，一般就是指这个权限列表或访问控制列表，但是里面维护的关系不一定是用户与功能的关系，在RBAC中维护的就是角色与功能的关系。</p><p>RBAC在ACL的基础上加入了角色的概念，权限列表或访问控制列表里维护的不再是用户与功能的关系，而是角色与功能的关系。ACL可以和RBAC混着用，既可以在角色上设置权限，也可以直接给用户设置权限，更加灵活。借助角色的思想，可以在用户组，组织，职位等等上设置权限，以便更好的做好权限管理，也就是将权限设置从单一个体转移到某一类组合上。</p><p>ABAC非常的灵活，也非常的难实现。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/ce0944b4a903" target="_blank" rel="noopener">权限系统设计模型分析</a></p><p><a href="http://dinolai.com/notes/others/authorization-models-acl-dac-mac-rbac-abac.html" target="_blank" rel="noopener">Authorization Models: ACL, DAC, MAC, RBAC, ABAC</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;术语描述&quot;&gt;&lt;a href=&quot;#术语描述&quot; class=&quot;headerlink&quot; title=&quot;术语
      
    
    </summary>
    
      <category term="架构" scheme="https://jaycewu.site/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://jaycewu.site/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="前后端分离" scheme="https://jaycewu.site/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
      <category term="权限管理" scheme="https://jaycewu.site/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vue权限路由实现方式总结</title>
    <link href="https://jaycewu.site/2018/07/28/vue%E6%9D%83%E9%99%90%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://jaycewu.site/2018/07/28/vue权限路由实现方式总结/</id>
    <published>2018-07-28T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><h2 id="使用全局路由守卫"><a href="#使用全局路由守卫" class="headerlink" title="使用全局路由守卫"></a>使用全局路由守卫</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>前端定义好路由，并且在路由上标记相应的权限信息<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routerMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/permission'</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">'/permission/index'</span>,</span><br><span class="line">    alwaysShow: <span class="literal">true</span>, <span class="comment">// will always show the root menu</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'permission'</span>,</span><br><span class="line">      icon: <span class="string">'lock'</span>,</span><br><span class="line">      roles: [<span class="string">'admin'</span>, <span class="string">'editor'</span>] <span class="comment">// you can set roles in root nav</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">'page'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/page'</span>),</span><br><span class="line">      name: <span class="string">'pagePermission'</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: <span class="string">'pagePermission'</span>,</span><br><span class="line">        roles: [<span class="string">'admin'</span>] <span class="comment">// or you can only set roles in sub nav</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      path: <span class="string">'directive'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/directive'</span>),</span><br><span class="line">      name: <span class="string">'directivePermission'</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: <span class="string">'directivePermission'</span></span><br><span class="line">        <span class="comment">// if do not set roles, means: this page does not require permission</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure><p></p><p>全局路由守卫每次都判断用户是否已经登录，没有登录则跳到登录页。已经登录(已经取得后台返回的用户的权限信息(角色之类的))，则判断当前要跳转的路由，用户是否有权限访问(根据路由名称到全部路由里找到对应的路由，判断用户是否具备路由上标注的权限信息(比如上面的<code>roles: [&#39;admin&#39;, &#39;editor&#39;]</code>))。没有权限则跳到事先定义好的界面(403,404之类的)。</p><p>这种方式，菜单可以直接用路由生成(用户没有权限的菜单也会显示，点击跳转的时候才做权限判断)，也可以在用户登录后根据用户权限把路由过滤一遍生成菜单(菜单需要保存在vuex里)。</p><blockquote><p>目前<a href="https://github.com/iview/iview-admin/blob/dev/src/router/index.js" target="_blank" rel="noopener">iview-admin</a>还是用的这种方式</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>加载所有的路由，如果路由很多，而用户并不是所有的路由都有权限访问，对性能会有影响。</p></li><li><p>全局路由守卫里，每次路由跳转都要做权限判断。</p></li><li><p>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译</p></li><li>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</li></ul><h2 id="登录页与主应用分离"><a href="#登录页与主应用分离" class="headerlink" title="登录页与主应用分离"></a>登录页与主应用分离</h2><p>针对前一种实现方式的缺点，可以将登录页与主应用放到不同的页面(不在同一个vue应用实例里)。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>登录成功后，进行页面跳转(真正的页面跳转，不是路由跳转)，并将用户权限传递到主应用所在页面，主应用初始化之前，根据用户权限筛选路由，筛选后的路由作为vue的实例化参数，而不是像前一种方式所有的路由都传递进去，也不需要在全局路由守卫里做权限判断了。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>需要做页面跳转，不是纯粹的单页应用</li><li>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译</li><li>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</li></ul><h2 id="使用addRoutes动态挂载路由"><a href="#使用addRoutes动态挂载路由" class="headerlink" title="使用addRoutes动态挂载路由"></a>使用<code>addRoutes</code>动态挂载路由</h2><p><code>addRoutes</code>允许在应用初始化之后，动态的挂载路由。有了这个新姿势，就不用像前一种方式那样要在应用初始化之要对路由进行筛选。</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>应用初始化的时候先挂载不需要权限控制的路由，比如登录页，404等错误页。</p><p>有个问题，<code>addRoutes</code>应该何时调用，在哪里调用</p><p>登录后，获取用户的权限信息，然后筛选有权限访问的路由，再调用<code>addRoutes</code>添加路由。这个方法是可行的。但是不可能每次进入应用都需要登录，用户刷新浏览器又要登陆一次。</p><p>所以<code>addRoutes</code>还是要在全局路由守卫里进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span> <span class="comment">// progress bar</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span><span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span> <span class="comment">// getToken from cookie</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)<span class="comment">// NProgress Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// permission judge function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">roles, permissionRoles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (roles.indexOf(<span class="string">'admin'</span>) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// admin permission passed directly</span></span><br><span class="line">  <span class="keyword">if</span> (!permissionRoles) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> roles.some(<span class="function"><span class="params">role</span> =&gt;</span> permissionRoles.indexOf(role) &gt;= <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>, <span class="string">'/authredirect'</span>]<span class="comment">// no redirect whitelist</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start() <span class="comment">// start progress bar</span></span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123; <span class="comment">// determine if there has token</span></span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">      NProgress.done() <span class="comment">// if current page is dashboard will not triggerafterEach hook, so manually handle it</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.dispatch(<span class="string">'GetUserInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">          <span class="keyword">const</span> roles = res.data.roles <span class="comment">// note: roles must be a array! such as: ['editor','develop']</span></span><br><span class="line">          store.dispatch(<span class="string">'GenerateRoutes'</span>, &#123; roles &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.addRoutes(store.getters.addRouters) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            Message.error(err || <span class="string">'Verification failed, please login again'</span>)</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓</span></span><br><span class="line">        <span class="keyword">if</span> (hasPermission(store.getters.roles, to.meta.roles)) &#123;</span><br><span class="line">          next()<span class="comment">//</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(&#123; <span class="attr">path</span>: <span class="string">'/401'</span>, <span class="attr">replace</span>: <span class="literal">true</span>, <span class="attr">query</span>: &#123; <span class="attr">noGoBack</span>: <span class="literal">true</span> &#125;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可删 ↑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token*/</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">'/login'</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      NProgress.done() <span class="comment">// if current page is login will not trigger afterEach hook, so manually handle it</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  NProgress.done() <span class="comment">// finish progress bar</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>关键的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.dispatch(<span class="string">'GetUserInfo'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">          <span class="keyword">const</span> roles = res.data.roles <span class="comment">// note: roles must be a array! such as: ['editor','develop']</span></span><br><span class="line">          store.dispatch(<span class="string">'GenerateRoutes'</span>, &#123; roles &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.addRoutes(store.getters.addRouters) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          store.dispatch(<span class="string">'FedLogOut'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            Message.error(err || <span class="string">'Verification failed, please login again'</span>)</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码就是<a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a>的实现</p></blockquote><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>全局路由守卫里，每次路由跳转都要做判断</li><li>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译</li><li>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，而且路由不一定作为菜单显示，还要多加字段进行标识</li></ul><h2 id="菜单与路由分离，菜单由后端返回"><a href="#菜单与路由分离，菜单由后端返回" class="headerlink" title="菜单与路由分离，菜单由后端返回"></a>菜单与路由分离，菜单由后端返回</h2><p>菜单的显示标题，图片等需要随时更改，要对菜单做管理功能。</p><p>后端直接根据用户权限返回可访问的菜单。</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>前端定义路由信息(标准的路由定义，不需要加其他标记字段)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">"login"</span>,</span><br><span class="line">    path: <span class="string">"/login"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/pages/Login.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name字段都不为空，需要根据此字段与后端返回菜单做关联。</p><p>做菜单管理功能的时候，一定要有个字段与前端的路由的name字段对应上(也可以是其他字段，只要菜单能找到对应的路由或者路由能找到对应的菜单就行)，并且做唯一性校验。菜单上还需要定义权限字段，可以是一个或多个。其他信息，比如显示标题，图标，排序，锁定之类的，可以根据实际需求进行设计。</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/28/164dfe8dcf86273a?w=1458&amp;h=747&amp;f=png&amp;s=40963" alt></p><p>还是在全局路由守卫里做判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">router, accessMenu</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (whiteList.indexOf(router.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> menu = Util.getMenuByName(router.name, accessMenu);</span><br><span class="line">  <span class="keyword">if</span> (menu.name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo = store.state.user.userInfo;</span><br><span class="line">    <span class="keyword">if</span> (!userInfo.name) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> store.dispatch(<span class="string">"GetUserInfo"</span>)</span><br><span class="line">        <span class="keyword">await</span> store.dispatch(<span class="string">'updateAccessMenu'</span>)</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">          next(&#123; <span class="attr">name</span>: <span class="string">'home_index'</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//Util.toDefaultPage([...routers], to.name, router, next);</span></span><br><span class="line">          next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)<span class="comment">//菜单权限更新完成,重新进一次当前路由</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">          next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(<span class="string">'/login'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">        next(&#123; <span class="attr">name</span>: <span class="string">'home_index'</span> &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasPermission(to, store.getters.accessMenu)) &#123;</span><br><span class="line">          Util.toDefaultPage(store.getters.accessMenu,to, routes, next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(&#123; <span class="attr">path</span>: <span class="string">'/403'</span>,<span class="attr">replace</span>:<span class="literal">true</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next(<span class="string">'/login'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> menu = Util.getMenuByName(to.name, store.getters.accessMenu);</span><br><span class="line">  Util.title(menu.title);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Router.afterEach(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码是<a href="https://github.com/wjkang/vue-quasar-admin" target="_blank" rel="noopener">vue-quasar-admin</a>的实现。因为没有使用<code>addRoutes</code>,每次路由跳转的时候都要判断权限，这里的判断也很简单，因为菜单的name与路由的name是一一对应的,而后端返回的菜单就已经是经过权限过滤的，所以如果根据路由name找不到对应的菜单，就表示用户有没权限访问。</p><p>如果路由很多，可以在应用初始化的时候，只挂载不需要权限控制的路由。取得后端返回的菜单后，根据菜单与路由的对应关系，筛选出可访问的路由，通过<code>addRoutes</code>动态挂载。</p><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ul><li>菜单需要与路由做一一对应，前端添加了新功能，需要通过菜单管理功能添加新的菜单，如果菜单配置的不对会导致应用不能正常使用</li><li>全局路由守卫里，每次路由跳转都要做判断</li></ul><h2 id="菜单与路由完全由后端返回"><a href="#菜单与路由完全由后端返回" class="headerlink" title="菜单与路由完全由后端返回"></a>菜单与路由完全由后端返回</h2><p>菜单由后端返回是可行的，但是路由由后端返回呢？看一下路由的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">"login"</span>,</span><br><span class="line">    path: <span class="string">"/login"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/pages/Login.vue"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端如果直接返回<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"login"</span>,</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/login"</span>,</span><br><span class="line">    <span class="string">"component"</span>: <span class="string">"() =&gt; import('@/pages/Login.vue')"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这是什么鬼，明显不行。<code>() =&gt; import(&#39;@/pages/Login.vue&#39;)</code>这代码如果没出现在前端，webpack不会对<code>Login.vue</code>进行编译打包</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p>前端统一定义路由组件，比如<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Home = () =&gt; import(&quot;../pages/Home.vue&quot;);</span><br><span class="line">const UserInfo = () =&gt; import(&quot;../pages/UserInfo.vue&quot;);</span><br><span class="line">export default &#123;</span><br><span class="line">  home: Home,</span><br><span class="line">  userInfo: UserInfo</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>将路由组件定义为这种key-value的结构。</p><p>后端返回格式<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"home"</span>,</span><br><span class="line">        path: <span class="string">"/"</span>,</span><br><span class="line">        component: <span class="string">"home"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"home"</span>,</span><br><span class="line">        path: <span class="string">"/userinfo"</span>,</span><br><span class="line">        component: <span class="string">"userInfo"</span></span><br><span class="line">      &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>在将后端返回路由通过<code>addRoutes</code>动态挂载之间，需要将数据处理一下，将component字段换为真正的组件。</p><p>至于菜单与路由是否还要分离，怎么对应，可以根据实际需求进行处理。</p><p>如果有嵌套路由，后端功能设计的时候，要注意添加相应的字段。前端拿到数据也要做相应的处理。</p><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ul><li>全局路由守卫里，每次路由跳转都要做判断</li><li>前后端的配合要求更高</li></ul><h2 id="不使用全局路由守卫"><a href="#不使用全局路由守卫" class="headerlink" title="不使用全局路由守卫"></a>不使用全局路由守卫</h2><p>前面几种方式，除了<code>登录页与主应用分离</code>,每次路由跳转，都在全局路由守卫里做了判断。</p><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><p>应用初始化的时候只挂载不需要权限控制的路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> constRouterMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"login"</span>,</span><br><span class="line">    path: <span class="string">"/login"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/pages/Login.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/404"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/pages/Page404.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/init"</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/pages/Init.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"*"</span>,</span><br><span class="line">    redirect: <span class="string">"/404"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> constRouterMap;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> ConstantRouterMap <span class="keyword">from</span> <span class="string">"./routers"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// mode: 'history', // require service support</span></span><br><span class="line">  scrollBehavior: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  routes: ConstantRouterMap</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录成功后跳到<code>/</code>路由<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">submitForm(formName) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this=<span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          _this.$store.dispatch(<span class="string">"loginByUserName"</span>,&#123;</span><br><span class="line">            name:_this.ruleForm2.name,</span><br><span class="line">            pass:_this.ruleForm2.pass</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            _this.$router.push(&#123;</span><br><span class="line">              path:<span class="string">'/'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>因为当前没有<code>/</code>路由，会跳到<code>/404</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;<span class="number">404</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name:<span class="string">'page404'</span>,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.$store.state.isLogin)&#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.replace(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.$store.state.initedApp)&#123;</span><br><span class="line">       <span class="keyword">this</span>.$router.replace(&#123; <span class="attr">path</span>: <span class="string">'/init'</span> &#125;);</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>404组件里判断已经登录，接着判断应用是否已经初始化(用户权限信息，可访问菜单，路由等是否已经从后端取得)。没有初始化则跳转到<code>/init</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; getAccessMenuList &#125; from "../m</span>ock/menus<span class="string">";</span></span><br><span class="line"><span class="string">import components from "</span>../router/routerComponents.js<span class="string">";</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  async mounted() &#123;</span></span><br><span class="line"><span class="string">    if (!this.$store.state.isLogin) &#123;</span></span><br><span class="line"><span class="string">      this.$router.push(&#123; path: "</span>/login<span class="string">" &#125;);</span></span><br><span class="line"><span class="string">      return;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (!this.$store.state.initedApp) &#123;</span></span><br><span class="line"><span class="string">      const loading = this.$loading(&#123;</span></span><br><span class="line"><span class="string">        lock: true,</span></span><br><span class="line"><span class="string">        text: "</span>初始化中<span class="string">",</span></span><br><span class="line"><span class="string">        spinner: "</span>el-icon-loading<span class="string">",</span></span><br><span class="line"><span class="string">        background: "</span>rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>)<span class="string">"</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      let menus = await getAccessMenuList(); //模拟从后端获取</span></span><br><span class="line"><span class="string">      var routers = [...menus];</span></span><br><span class="line"><span class="string">      for (let router of routers) &#123;</span></span><br><span class="line"><span class="string">        let component = components[router.component];</span></span><br><span class="line"><span class="string">        router.component = component;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      this.$router.addRoutes(routers);</span></span><br><span class="line"><span class="string">      this.$store.dispatch("</span>setAccessMenuList<span class="string">", menus).then(() =&gt; &#123;</span></span><br><span class="line"><span class="string">        loading.close();</span></span><br><span class="line"><span class="string">        this.$router.replace(&#123;</span></span><br><span class="line"><span class="string">          path: "</span>/<span class="string">"</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      return;</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      this.$router.replace(&#123;</span></span><br><span class="line"><span class="string">        path: "</span>/<span class="string">"</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>init组件里判断应用是否已经初始化(避免初始化后，直接从地址栏输入地址再次进入当前组件)。</p><p>如果已经初始化，跳转<code>/</code>路由(如果后端返回的路由里没有定义次路由，则会跳转404)。</p><p>没有初始化，则调用远程接口获取菜单和路由等，然后处理后端返回的路由，将component赋值为真正<br>的组件，接着调用<code>addRoutes</code>挂载新路由，最后跳转<code>/</code>路由即可。菜单的处理也是在此处，看实际<br>需求。</p><blockquote><p><a href="https://codesandbox.io/s/r02zvvlpno" target="_blank" rel="noopener">实现例子</a></p></blockquote><h3 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在404页面做了判断，感觉比较怪异</li><li>多引入了一个init页面组件</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较推荐后面两种实现方式。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;使用全局路由守卫&quot;&gt;&lt;a href=&quot;#使用全局路由守卫&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://jaycewu.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>IdentityServer4实现Token认证登录以及权限控制</title>
    <link href="https://jaycewu.site/2017/11/05/IdentityServer4%E5%AE%9E%E7%8E%B0Token%E7%99%BB%E5%BD%95%E4%BB%A5%E5%8F%8A%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>https://jaycewu.site/2017/11/05/IdentityServer4实现Token登录以及权限控制/</id>
    <published>2017-11-05T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><p>不再对IdentityServer4做相关介绍，博客园上已经有人出了相关的系列文章，不了解的可以看一下：</p><p>蟋蟀大神的：<a href="http://www.cnblogs.com/xishuai/tag/%5B34%5D%E5%B0%8F%E8%8F%9C%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B-IdentityServer4/" target="_blank" rel="noopener">小菜学习编程-IdentityServer4</a></p><p>晓晨Master：<a href="http://www.cnblogs.com/stulzq/tag/IdentityServer4/" target="_blank" rel="noopener">IdentityServer4</a></p><p>以及Identity,Claim等相关知识：</p><p>Savorboard：<a href="http://www.cnblogs.com/savorboard/p/aspnetcore-identity.html" target="_blank" rel="noopener"> ASP.NET Core 之 Identity 入门（一）</a>，<a href="http://www.cnblogs.com/savorboard/p/aspnetcore-identity2.html" target="_blank" rel="noopener">ASP.NET Core 之 Identity 入门（二）</a></p><h3 id="创建IndentityServer4-服务"><a href="#创建IndentityServer4-服务" class="headerlink" title="创建IndentityServer4 服务"></a>创建IndentityServer4 服务</h3><p>创建一个名为QuickstartIdentityServer的ASP.NET Core Web 空项目（asp.net core 2.0），端口5000</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-cf107209ba258212.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-4805b07226cee1e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>NuGet包：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-fc62950ab394b5fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>修改Startup.cs 设置使用IdentityServer：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// configure identity server with in-memory stores, keys, clients and scopes</span></span><br><span class="line">            services.AddIdentityServer()</span><br><span class="line">                .AddDeveloperSigningCredential()</span><br><span class="line">                .AddInMemoryIdentityResources(Config.GetIdentityResourceResources())</span><br><span class="line">                .AddInMemoryApiResources(Config.GetApiResources())</span><br><span class="line">                .AddInMemoryClients(Config.GetClients())</span><br><span class="line">                .AddResourceOwnerValidator&lt;ResourceOwnerPasswordValidator&gt;()</span><br><span class="line">                .AddProfileService&lt;ProfileService&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseIdentityServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>添加Config.cs配置IdentityResource，ApiResource以及Client：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Config</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;IdentityResource&gt; <span class="title">GetIdentityResourceResources</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> List&lt;IdentityResource&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">new</span> IdentityResources.OpenId(), <span class="comment">//必须要添加，否则报无效的scope错误</span></span><br><span class="line">               <span class="keyword">new</span> IdentityResources.Profile()</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// scopes define the API resources in your system</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;ApiResource&gt; <span class="title">GetApiResources</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> List&lt;ApiResource&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">new</span> ApiResource(<span class="string">"api1"</span>, <span class="string">"My API"</span>)</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// clients want to access resources (aka scopes)</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;Client&gt; <span class="title">GetClients</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="comment">// client credentials client</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> List&lt;Client&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">new</span> Client</span><br><span class="line">               &#123;</span><br><span class="line">                   ClientId = <span class="string">"client1"</span>,</span><br><span class="line">                   AllowedGrantTypes = GrantTypes.ClientCredentials,</span><br><span class="line"></span><br><span class="line">                   ClientSecrets =</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">new</span> Secret(<span class="string">"secret"</span>.Sha256())</span><br><span class="line">                   &#125;,</span><br><span class="line">                   AllowedScopes = &#123; <span class="string">"api1"</span>,IdentityServerConstants.StandardScopes.OpenId, <span class="comment">//必须要添加，否则报forbidden错误</span></span><br><span class="line">                 IdentityServerConstants.StandardScopes.Profile&#125;,</span><br><span class="line"></span><br><span class="line">               &#125;,</span><br><span class="line"></span><br><span class="line">               <span class="comment">// resource owner password grant client</span></span><br><span class="line">               <span class="keyword">new</span> Client</span><br><span class="line">               &#123;</span><br><span class="line">                   ClientId = <span class="string">"client2"</span>,</span><br><span class="line">                   AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,</span><br><span class="line"></span><br><span class="line">                   ClientSecrets =</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">new</span> Secret(<span class="string">"secret"</span>.Sha256())</span><br><span class="line">                   &#125;,</span><br><span class="line">                   AllowedScopes = &#123; <span class="string">"api1"</span>,IdentityServerConstants.StandardScopes.OpenId, <span class="comment">//必须要添加，否则报forbidden错误</span></span><br><span class="line">                 IdentityServerConstants.StandardScopes.Profile &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>因为要使用登录的时候要使用数据中保存的用户进行验证，要实IResourceOwnerPasswordValidator接口：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResourceOwnerPasswordValidator</span> : <span class="title">IResourceOwnerPasswordValidator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ResourceOwnerPasswordValidator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">ValidateAsync</span>(<span class="params">ResourceOwnerPasswordValidationContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//根据context.UserName和context.Password与数据库的数据做校验，判断是否合法</span></span><br><span class="line">            <span class="keyword">if</span> (context.UserName==<span class="string">"wjk"</span>&amp;&amp;context.Password==<span class="string">"123"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                context.Result = <span class="keyword">new</span> GrantValidationResult(</span><br><span class="line">                 subject: context.UserName,</span><br><span class="line">                 authenticationMethod: <span class="string">"custom"</span>,</span><br><span class="line">                 claims: GetUserClaims());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">//验证失败</span></span><br><span class="line">                 context.Result = <span class="keyword">new</span> GrantValidationResult(TokenRequestErrors.InvalidGrant, <span class="string">"invalid custom credential"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可以根据需要设置相应的Claim</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Claim[] <span class="title">GetUserClaims</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Claim[]</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">new</span> Claim(<span class="string">"UserId"</span>, <span class="number">1.</span>ToString()),</span><br><span class="line">            <span class="keyword">new</span> Claim(JwtClaimTypes.Name,<span class="string">"wjk"</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(JwtClaimTypes.GivenName, <span class="string">"jaycewu"</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(JwtClaimTypes.FamilyName, <span class="string">"yyy"</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(JwtClaimTypes.Email, <span class="string">"977865769@qq.com"</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(JwtClaimTypes.Role,<span class="string">"admin"</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>IdentityServer提供了接口访问用户信息，但是默认返回的数据只有sub，就是上面设置的subject: context.UserName，要返回更多的信息，需要实现IProfileService接口：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProfileService</span> : <span class="title">IProfileService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetProfileDataAsync</span>(<span class="params">ProfileDataRequestContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//depending on the scope accessing the user data.</span></span><br><span class="line">                <span class="keyword">var</span> claims = context.Subject.Claims.ToList();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//set issued claims to return</span></span><br><span class="line">                context.IssuedClaims = claims.ToList();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//log your error</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">IsActiveAsync</span>(<span class="params">IsActiveContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            context.IsActive = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p></p><p>context.Subject.Claims就是之前实现IResourceOwnerPasswordValidator接口时claims: GetUserClaims()给到的数据。<br>另外，经过调试发现，显示执行ResourceOwnerPasswordValidator 里的ValidateAsync，然后执行ProfileService 里的IsActiveAsync，GetProfileDataAsync。</p><p>启动项目，使用postman进行请求就可以获取到token：</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-cf65dadc447a35d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>再用token获取相应的用户信息：</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-eebb00f8f68d8915.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>token认证服务一般是与web程序分开的，上面创建的QuickstartIdentityServer项目就相当于服务端，我们需要写业务逻辑的web程序就相当于客户端。当用户请求web程序的时候，web程序拿着用户已经登录取得的token去IdentityServer服务端校验。</p><h3 id="创建web应用"><a href="#创建web应用" class="headerlink" title="创建web应用"></a>创建web应用</h3><p>创建一个名为API的ASP.NET Core Web 空项目（asp.net core 2.0），端口5001。</p><p>NuGet包：</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-5dafa321288df66e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>修改Startup.cs 设置使用IdentityServer进行校验：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.AddMvcCore(option=&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                option.Filters.Add(<span class="keyword">new</span> TestAuthorizationFilter());</span><br><span class="line">            &#125;).AddAuthorization()</span><br><span class="line">                .AddJsonFormatters();</span><br><span class="line"></span><br><span class="line">            services.AddAuthentication(<span class="string">"Bearer"</span>)</span><br><span class="line">                .AddIdentityServerAuthentication(options =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    options.Authority = <span class="string">"http://localhost:5000"</span>;</span><br><span class="line">                    options.RequireHttpsMetadata = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                    options.ApiName = <span class="string">"api1"</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            app.UseAuthentication();</span><br><span class="line"></span><br><span class="line">            app.UseMvc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建IdentityController：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdentityController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        [<span class="meta">Authorize</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="string">"Hello Word"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>分别运行QuickstartIdentityServer，API项目。用生成的token访问API：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-38958488026e6a83.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>通过上述程序，已经可以做一个前后端分离的登录功能。</p><p>实际上，web应用程序中我们经常需要获取当前用户的相关信息进行操作，比如记录用户的一些操作日志等。之前说过IdentityServer提供了接口/connect/userinfo来获取用户的相关信息。之前我的想法也是web程序中拿着token去请求这个接口来获取用户信息，并且第一次获取后做相应的缓冲。但是感觉有点怪怪的，IdentityServer不可能没有想到这一点，正常的做法应该是校验通过会将用户的信息返回的web程序中。问题又来了，如果IdentityServer真的是这么做的，web程序该怎么获取到呢，查了官方文档也没有找到。然后就拿着”Claim”关键字查了一通（之前没了解过ASP.NET Identity），最后通过HttpContext.User.Claims取到了设置的用户信息：</p><p>修改IdentityController ：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IdentityController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        [<span class="meta">Authorize</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JsonResult(<span class="keyword">from</span> c <span class="keyword">in</span> HttpContext.User.Claims <span class="keyword">select</span> <span class="keyword">new</span> &#123; c.Type, c.Value &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-da0e6d31052b0cb5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>IdentityServer4 也提供了权限管理的功能，大概看了一眼，没有达到我想要（没耐心去研究）。<br>我需要的是针对不同的模块，功能定义权限码（字符串），每个权限码对应相应的功能权限。当用户进行请求的时候，判断用户是否具备相应功能的权限（是否赋予了相应的权限字符串编码），来达到权限控制。</p><p>IdentityServer的校验是通过Authorize特性来判断相应的Controller或Action是否需要校验。这里也通过自定义特性来实现权限的校验，并且是在原有的Authorize特性上进行扩展。可行的方案继承AuthorizeAttribute，重写。可是在.net core中提示没有OnAuthorization方法可进行重写。最后参考的ABP的做法，过滤器和特性共同使用。</p><p>新建TestAuthorizationFilter.cs<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestAuthorizationFilter</span> : <span class="title">IAuthorizationFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnAuthorization</span>(<span class="params">AuthorizationFilterContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.Filters.Any(item =&gt; item <span class="keyword">is</span> IAllowAnonymousFilter))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!(context.ActionDescriptor <span class="keyword">is</span> ControllerActionDescriptor))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> attributeList = <span class="keyword">new</span> List&lt;<span class="keyword">object</span>&gt;();</span><br><span class="line">            attributeList.AddRange((context.ActionDescriptor <span class="keyword">as</span> ControllerActionDescriptor).MethodInfo.GetCustomAttributes(<span class="literal">true</span>));</span><br><span class="line">            attributeList.AddRange((context.ActionDescriptor <span class="keyword">as</span> ControllerActionDescriptor).MethodInfo.DeclaringType.GetCustomAttributes(<span class="literal">true</span>));</span><br><span class="line">            <span class="keyword">var</span> authorizeAttributes = attributeList.OfType&lt;TestAuthorizeAttribute&gt;().ToList();</span><br><span class="line">            <span class="keyword">var</span> claims = context.HttpContext.User.Claims;</span><br><span class="line">            <span class="comment">// 从claims取出用户相关信息，到数据库中取得用户具备的权限码，与当前Controller或Action标识的权限码做比较</span></span><br><span class="line">            <span class="keyword">var</span> userPermissions = <span class="string">"User_Edit"</span>;</span><br><span class="line">            <span class="keyword">if</span> (!authorizeAttributes.Any(s =&gt; s.Permission.Equals(userPermissions)))</span><br><span class="line">            &#123;</span><br><span class="line">                context.Result = <span class="keyword">new</span> JsonResult(<span class="string">"没有权限"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>新建TestAuthorizeAttribute<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestAuthorizeAttribute</span>: <span class="title">AuthorizeAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Permission &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestAuthorizeAttribute</span>(<span class="params"><span class="keyword">string</span> permission</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Permission = permission;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>将IdentityController [Authorize]改为[TestAuthorize(“User_Edit”)]，再运行API项目。</p><p>通过修改权限码，验证是否起作用</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-a99385ed5e940a0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>除了使用过滤器和特性结合使用，貌似还有别的方法，有空再研究。</p><p>本文中的<a href="https://github.com/wjkang/IdentityServer4_ResourceOwnerPasswords" target="_blank" rel="noopener">源码</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;相关知识点&quot;&gt;&lt;a href=&quot;#相关知识点&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="IdentityServer4" scheme="https://jaycewu.site/tags/IdentityServer4/"/>
    
      <category term="Token" scheme="https://jaycewu.site/tags/Token/"/>
    
      <category term="权限控制" scheme="https://jaycewu.site/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>利用AOP实现SqlSugar自动事务</title>
    <link href="https://jaycewu.site/2017/10/25/%E5%88%A9%E7%94%A8AOP%E5%AE%9E%E7%8E%B0SqlSugar%E8%87%AA%E5%8A%A8%E4%BA%8B%E5%8A%A1/"/>
    <id>https://jaycewu.site/2017/10/25/利用AOP实现SqlSugar自动事务/</id>
    <published>2017-10-25T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>先看一下效果,带接口层的三层架构:</p><p>BL层：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentBL</span> : <span class="title">IStudentService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> ILogger mLogger;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IStudentDA mStudentDa;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IValueService mValueService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentService</span>(<span class="params">IStudentDA studentDa,IValueService valueService</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            mLogger = LogManager.GetCurrentClassLogger();</span><br><span class="line">            mStudentDa = studentDa;</span><br><span class="line">            mValueService = valueService;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">TransactionCallHandler</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IList&lt;Student&gt; <span class="title">GetStudentList</span>(<span class="params">Hashtable paramsHash</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = mStudentDa.GetStudents(paramsHash);</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = mValueService.FindAll();</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>假设GetStudentList方法里的mStudentDa.GetStudents和mValueService.FindAll不是查询操作，而是更新操作，当一个失败另一个需要回滚，就需要在同一个事务里，当一个出现异常就要回滚事务。</p><p>特性TransactionCallHandler就表明当前方法需要开启事务，并且当出现异常的时候回滚事务,方法执行完后提交事务。</p><p>DA层：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentDA</span> : <span class="title">IStudentDA</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SqlSugarClient db;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentDA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            db = SugarManager.GetInstance().SqlSugarClient;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IList&lt;Student&gt; <span class="title">GetStudents</span>(<span class="params">Hashtable paramsHash</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> db.Queryable&lt;Student&gt;().AS(<span class="string">"T_Student"</span>).With(SqlWith.NoLock).ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="对SqlSugar做一下包装"><a href="#对SqlSugar做一下包装" class="headerlink" title="对SqlSugar做一下包装"></a>对<a href="https://github.com/sunkaixuan/sqlsugar/" target="_blank" rel="noopener">SqlSugar</a>做一下包装</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SugarManager</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="keyword">string</span>,SqlClient&gt; _cache =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, SqlClient&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;<span class="keyword">string</span>&gt; _threadLocal;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _connStr = <span class="string">@"Data Source=localhost;port=3306;Initial Catalog=thy;user id=root;password=xxxxxx;Charset=utf8"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">SugarManager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _threadLocal = <span class="keyword">new</span> ThreadLocal&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SqlSugarClient <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SqlSugarClient client = <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">            &#123;</span><br><span class="line">                ConnectionString = _connStr, <span class="comment">//必填</span></span><br><span class="line">                DbType = DbType.MySql, <span class="comment">//必填</span></span><br><span class="line">                IsAutoCloseConnection = <span class="literal">true</span>, <span class="comment">//默认false</span></span><br><span class="line">                InitKeyType = InitKeyType.SystemTable</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> key=Guid.NewGuid().ToString().Replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                _cache.TryAdd(key,<span class="keyword">new</span> SqlClient(client));</span><br><span class="line">                _threadLocal.Value = key;</span><br><span class="line">                <span class="keyword">return</span> client;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"创建SqlSugarClient失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlClient <span class="title">GetInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id= _threadLocal.Value;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(id)||!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SqlClient(CreatInstance());</span><br><span class="line">            <span class="keyword">return</span> _cache[id];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> id = GetId();</span><br><span class="line">                <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                Remove(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Remove</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            SqlClient client;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(result = _cache.TryRemove(id, <span class="keyword">out</span> client)))</span><br><span class="line">            &#123;</span><br><span class="line">                index++;</span><br><span class="line">                Thread.Sleep(<span class="number">20</span>);</span><br><span class="line">                <span class="keyword">if</span> (index &gt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = _threadLocal.Value;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(id))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: SqlSugarClient已丢失."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BeginTran</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> instance=GetInstance();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            <span class="keyword">if</span> (!instance.IsBeginTran)</span><br><span class="line">            &#123;</span><br><span class="line">                instance.SqlSugarClient.Ado.BeginTran();</span><br><span class="line">                instance.IsBeginTran = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CommitTran</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: SqlSugarClient已丢失."</span>);</span><br><span class="line">            <span class="keyword">if</span> (_cache[id].TranCount == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _cache[id].SqlSugarClient.Ado.CommitTran();</span><br><span class="line">                _cache[id].IsBeginTran = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RollbackTran</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: SqlSugarClient已丢失."</span>);</span><br><span class="line">            _cache[id].SqlSugarClient.Ado.RollbackTran();</span><br><span class="line">            _cache[id].IsBeginTran = <span class="literal">false</span>;</span><br><span class="line">            _cache[id].TranCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TranCountAddOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: SqlSugarClient已丢失."</span>);</span><br><span class="line">            _cache[id].TranCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TranCountMunisOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: SqlSugarClient已丢失."</span>);</span><br><span class="line">            _cache[id].TranCount--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>_cache保存SqlSugar实例，_threadLocal确保同一线程下取出的是同一个SqlSugar实例。</p><p>不知道SqlSugar判断当前实例是否已经开启事务，所以又将SqlSugar包了一层。<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SqlClient</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> SqlSugarClient SqlSugarClient;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">bool</span> IsBeginTran = <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> TranCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">SqlClient</span>(<span class="params">SqlSugarClient sqlSugarClient</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">this</span>.SqlSugarClient = sqlSugarClient;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p><p>IsBeginTran标识当前SqlSugar实例是否已经开启事务，TranCount是一个避免事务嵌套的计数器。</p><p>一开始的例子</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TransactionCallHandler</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IList&lt;Student&gt; <span class="title">GetStudentList</span>(<span class="params">Hashtable paramsHash</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = mStudentDa.GetStudents(paramsHash);</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">value</span> = mValueService.FindAll();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransactionCallHandler表明该方法要开启事务，但是如果mValueService.FindAll也标识了TransactionCallHandler,又要开启一次事务？所以用TranCount做一个计数。</p><h3 id="使用Castle-DynamicProxy"><a href="#使用Castle-DynamicProxy" class="headerlink" title="使用Castle.DynamicProxy"></a>使用<a href="https://github.com/castleproject/Core" target="_blank" rel="noopener">Castle.DynamicProxy</a></h3><p>要实现标识了TransactionCallHandler的方法实现自动事务，使用Castle.DynamicProxy实现BL类的代理</p><p>Castle.DynamicProxy一般操作<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> : <span class="title">IMyClass</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">"My Mehod"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestIntercept</span> : <span class="title">IInterceptor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"before"</span>);</span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            Console.WriteLine(<span class="string">"after"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> proxyGenerate = <span class="keyword">new</span> ProxyGenerator();</span><br><span class="line"> TestIntercept t=<span class="keyword">new</span> TestIntercept();</span><br><span class="line"> <span class="keyword">var</span> pg = proxyGenerate.CreateClassProxy&lt;MyClass&gt;(t);</span><br><span class="line"> pg.MyMethod();</span><br><span class="line"> <span class="comment">//输出是</span></span><br><span class="line"> <span class="comment">//before</span></span><br><span class="line"> <span class="comment">//My Mehod</span></span><br><span class="line"> <span class="comment">//after</span></span><br></pre></td></tr></table></figure><p></p><p>before就是要开启事务的地方，after就是提交事务的地方<br>最后实现<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransactionInterceptor</span> : <span class="title">IInterceptor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TransactionInterceptor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MethodInfo methodInfo = invocation.MethodInvocationTarget;</span><br><span class="line">            <span class="keyword">if</span> (methodInfo == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                methodInfo = invocation.Method;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TransactionCallHandlerAttribute transaction =</span><br><span class="line">                methodInfo.GetCustomAttributes&lt;TransactionCallHandlerAttribute&gt;(<span class="literal">true</span>).FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span> (transaction != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SugarManager.BeginTran();</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    SugarManager.TranCountAddOne();</span><br><span class="line">                    invocation.Proceed();</span><br><span class="line">                    SugarManager.TranCountMunisOne();</span><br><span class="line">                    SugarManager.CommitTran();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    SugarManager.RollbackTran();</span><br><span class="line">                    logger.Error(e);</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                invocation.Proceed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method, Inherited = true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransactionCallHandlerAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionCallHandlerAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autofac与Castle-DynamicProxy结合使用"><a href="#Autofac与Castle-DynamicProxy结合使用" class="headerlink" title="Autofac与Castle.DynamicProxy结合使用"></a><a href="https://github.com/autofac/Autofac" target="_blank" rel="noopener">Autofac</a>与Castle.DynamicProxy结合使用</h3><p>创建代理的时候一个BL类就要一次操作<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxyGenerate.CreateClassProxy&lt;MyClass&gt;(t);</span><br></pre></td></tr></table></figure><p></p><p>而且项目里BL类的实例化是交给IOC容器控制的，我用的是Autofac。当然Autofac和Castle.DynamicProxy是可以结合使用的<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> Autofac;</span><br><span class="line"><span class="keyword">using</span> Autofac.Extras.DynamicProxy;</span><br><span class="line"><span class="keyword">using</span> Module = Autofac.Module;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BusinessModule</span> : <span class="title">Module</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> business = Assembly.Load(<span class="string">"FTY.Business"</span>);</span><br><span class="line">            builder.RegisterAssemblyTypes(business)</span><br><span class="line">                .AsImplementedInterfaces().InterceptedBy(<span class="keyword">typeof</span>(TransactionInterceptor)).EnableInterfaceInterceptors();</span><br><span class="line">            builder.RegisterType&lt;TransactionInterceptor&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;先看一下效果,带接口层的三层架构:&lt;/p&gt;&lt;p&gt;BL层：&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="AOP" scheme="https://jaycewu.site/tags/AOP/"/>
    
      <category term="SqlSugar" scheme="https://jaycewu.site/tags/SqlSugar/"/>
    
      <category term="事务" scheme="https://jaycewu.site/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="Castle.DynamicProxy" scheme="https://jaycewu.site/tags/Castle-DynamicProxy/"/>
    
  </entry>
  
  <entry>
    <title>三种工厂模式与策略模式</title>
    <link href="https://jaycewu.site/2017/08/13/%E4%B8%89%E7%A7%8D%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://jaycewu.site/2017/08/13/三种工厂模式与策略模式/</id>
    <published>2017-08-13T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>实现一个功能，假设现在有跑车，越野车，商务车，想要开什么车的时候随时能发车。</p><p>抽象汽车<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象汽车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>汽车类型枚举<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CarType</span><br><span class="line">&#123;</span><br><span class="line">    SportCarType = <span class="number">0</span>,</span><br><span class="line">    JeepCarType = <span class="number">1</span>,</span><br><span class="line">    BusinessCarType = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>各种类型汽车实现<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 跑车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SportCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"跑车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 越野车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JeepCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"越野车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 商务车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title">BusinessCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"商务车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>工厂类<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">GetCar</span>(<span class="params">CarType carType</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (carType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> CarType.SportCarType:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SportCar();</span><br><span class="line">            <span class="keyword">case</span> CarType.JeepCarType:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JeepCar();</span><br><span class="line">            <span class="keyword">case</span> CarType.BusinessCarType:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> BusinessCar();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"翻车！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ICar car;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        Console.WriteLine(<span class="string">"老司机跑车发车"</span>);</span><br><span class="line">        car = factory.GetCar(CarType.SportCarType);</span><br><span class="line">        car.Run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>优点：简单工厂模式能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。当要新增一个汽车类型的时候，只要实现指定接口就可以，符合开发关闭原则。</p><p>缺点：很明显工厂类集中了所有实例的创建逻辑，当要加车类型的时候需要修改工厂类源码，违背开放关闭原则。</p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>简单工厂的例子中，可以把工厂类看成汽车仓库，里面是已经生产好的汽车，想要什么类型的汽车，只要是已经生产好的就可以得到。</p><p>现在我们想要开大卡车，但是仓库里没有，怎么办呢?</p><p>我们换个高级点的仓库，一个可以生产大卡车的仓库，而且有很多这种仓库，每个仓库生产指定类型的汽车。</p><p>抽象高级仓库<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICar <span class="title">CreateCar</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>抽象汽车<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象汽车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>各种类型汽车实现<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 跑车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SportCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"跑车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 越野车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JeepCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"越野车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 商务车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title">BusinessCar</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"商务车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 卡车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title">Truck</span> : <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"卡车发车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>具体高级仓库<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  跑车仓库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SportFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">CreateCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SportCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  越野车仓库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JeepFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">CreateCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JeepCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  商务车仓库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BusinessCarFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">CreateCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessCarCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  卡车仓库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TruckFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">CreateCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Truck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IFactory factory = <span class="keyword">new</span> TruckFactory();</span><br><span class="line">            ICar truck = factory.CreateCar();</span><br><span class="line">            truck.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>通过工厂方法模式，只要实现ICar接口，就可以创建一种新的类型的汽车，然后通过实现IFactory接口，创建一个可以生产这种新类型汽车的工厂。使用的时候，new一个新的工厂，就可以生产新类型的车了。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>汽车不仅有不同类型了，还有不同品牌的，比如跑车类型，有劳斯莱斯的,有宾利的，有迈凯伦的。。。假设，现在我们想开劳斯莱斯的跑车，我们的仓库怎么给我们车呢？或者说我们怎么从仓库把我们想要开的车拿到呢？工厂方法模式中我们通过实现仓库的多态，创建了很多可以具体生产某种类型汽车的工厂。</p><p>现在通过实现汽车类型多态，具体的仓库（工厂）可以生产特定品牌不同类型的汽车，比如某个车库（工厂）可以生产宾利的跑车，商务车，越野车，卡车（滑稽）。</p><p>抽象汽车<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象汽车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>抽象汽车类型<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象跑车类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISportCar</span>:<span class="title">ICar</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//具体品牌名称</span></span><br><span class="line">     <span class="keyword">string</span> Name&#123;<span class="keyword">get</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//越野车，商务车类型类似（而且这里用抽象类更加合适）</span></span><br></pre></td></tr></table></figure><p></p><p>具体品牌的汽车类型<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 劳斯莱斯跑车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RollsRoyceSportCar</span>:<span class="title">ISportCar</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//具体品牌名称</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">get</span>&#123;<span class="keyword">return</span> <span class="string">"劳斯莱斯"</span>;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">this</span>.Name+<span class="string">"跑车发车"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 宾利跑车</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BentleySportCar</span>:<span class="title">ISportCar</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//具体品牌名称</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">string</span> Name</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">get</span>&#123;<span class="keyword">return</span> <span class="string">"宾利"</span>;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">this</span>.Name+<span class="string">"跑车发车"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//越野车，商务车类型类似</span></span><br></pre></td></tr></table></figure><p></p><p>抽象车库（工厂）</p><p>之前每个生产具体类型汽车的仓库（工厂）只要返回具体类型（实现ICar的汽车类）的汽车就可以，但是现在返回特定品牌的具体类型的汽车<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ISportCar <span class="title">CreateSportCar</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IJeepCar <span class="title">CreateJeepCar</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IJeepCar <span class="title">CreateJeepCar</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>具体工厂<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  宾利工厂</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BentleyFactory</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISportCar <span class="title">CreateSportCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BentleySportCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IJeepCar <span class="title">CreateJeepCar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BentleyJeepCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其它工厂类似</span></span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//开宾利跑车</span></span><br><span class="line">            IFactory factory = <span class="keyword">new</span> BentleyFactory();</span><br><span class="line">            ISportCar bentleySportCar = factory.CreateSportCar();</span><br><span class="line">            bentleySportCar.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>当我们要新增一个新的类型的汽车，只要加一个继承ICar接口的新类型接口，然后在新类型下创建（实现新类型接口）具体品牌的汽车。但是要修改抽象工厂的源码，然后每个具体工厂的源码也要修改。在现有类型的车下新增品牌就很容易</p><p>使用简单工厂减少具体工厂的数量，这样就可以不用去修改具体工厂的源码<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> ISportCar <span class="title">CreateSportCar</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">            <span class="keyword">if</span>(name==<span class="string">"Bentley"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> BentleySportCar();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(name==<span class="string">"RollsRoyce"</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="function">retutn new <span class="title">RollsRoyceSportCar</span>(<span class="params"></span>)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ...</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> IJeepCar <span class="title">CreateJeepCar</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">            <span class="keyword">if</span>(name==<span class="string">"Bentley"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> BentleyJeepCar();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(name==<span class="string">"RollsRoyce"</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="function">retutn new <span class="title">RollsRoyceJeepCar</span>(<span class="params"></span>)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ...</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//开宾利跑车</span></span><br><span class="line">            Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">            ISportCar bentleySportCar = factory.CreateSportCar(<span class="string">"Bentley"</span>);</span><br><span class="line">            bentleySportCar.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>还有更加方便的方法就是使用反射</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>工厂模式是从工厂里new一个服务对象出来给客户使用，策略模式是客户注入一个具体实例对象给工厂以使用工厂提供的服务</p><p>将上面的工厂改造一下<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">private</span> ISportCar sportCar;</span><br><span class="line">        <span class="keyword">private</span> IJeepCar jeepCar;</span><br><span class="line">        ...</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CreateSportCar</span>(<span class="params">ISportCar sportCar</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">           <span class="keyword">this</span>.sportCar=sportCar;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CreateJeepCar</span>(<span class="params">IJeepCar jeepCar</span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">             <span class="keyword">this</span>.jeepCar=jeepCar;</span><br><span class="line">          &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SportCarRun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">this</span>.sportCar.Run();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JeepCarRun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          &#123;</span><br><span class="line">             <span class="keyword">this</span>.jeepCar.Run();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p><p>调用<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//开宾利跑车</span></span><br><span class="line">            ISportCar bentleySportCar = <span class="keyword">new</span> BentleySportCar();</span><br><span class="line">            Factory factory=<span class="keyword">new</span> Factory();</span><br><span class="line">            factory.CreateSportCar(bentleySportCar);</span><br><span class="line">            factory.SportCarRun();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>可能会因为注入的具体实现不同而得到不同的服务功能;</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="工厂模式" scheme="https://jaycewu.site/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://jaycewu.site/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>学习依赖注入与控制反转</title>
    <link href="https://jaycewu.site/2017/08/01/%E5%AD%A6%E4%B9%A0%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    <id>https://jaycewu.site/2017/08/01/学习依赖注入与控制反转/</id>
    <published>2017-08-01T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p>IoC很好的体现了面向对象设计法则之一:由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><p>一个叫IGame的游戏公司，正在开发一款ARPG游戏（动作&amp;角色扮演类游戏，如魔兽世界、梦幻西游这一类的游戏）。一般这类游戏都有一个基本的功能，就是打怪（玩家攻击怪物，借此获得经验、虚拟货币和虚拟装备），并且根据玩家角色所装备的武器不同，攻击效果也不同.打怪功能中的某一个功能:</p><p>1、角色可向怪物实施攻击，一次攻击后，怪物掉部分HP，HP掉完后，怪物死亡。</p><p>2、角色可装配不同武器，有木剑、铁剑、魔剑。</p><p>3、木剑每次攻击，怪物掉20PH，铁剑掉50HP,魔剑掉100PH。</p><h4 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h4><p>HP当然是怪物的一个属性成员，而武器是角色的一个属性成员，类型可以使字符串，用于描述目前角色所装备的武器。角色类有一个攻击方法，以被攻击怪物为参数，当实施一次攻击时，攻击方法被调用，而这个方法首先判断当前角色装备了什么武器，然后据此对被攻击怪物的HP进行操作，以产生不同效果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的名字</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的生命值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> Int32 HP &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params">String name,Int32 hp</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.HP = hp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Role</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Random _random = <span class="keyword">new</span> Random();</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 表示角色目前所持武器的字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String WeaponTag &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 攻击怪物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="monster"&gt;</span>被攻击的怪物<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"此怪物已死"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"WoodSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                monster.HP -= <span class="number">20</span>;</span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失20HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"IronSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                monster.HP -= <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失50HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"MagicSword"</span> == <span class="keyword">this</span>.WeaponTag)</span><br><span class="line">            &#123;</span><br><span class="line">                Int32 loss = (_random.NextDouble() &lt; <span class="number">0.5</span>) ? <span class="number">100</span> : <span class="number">200</span>;</span><br><span class="line">                monster.HP -= loss;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">200</span> == loss)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"出现暴击！！！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">if</span> (monster.HP &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"已死亡"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"攻击成功！怪物"</span> + monster.Name + <span class="string">"损失"</span> + loss + <span class="string">"HP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"角色手里没有武器，无法攻击！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//生成怪物</span></span><br><span class="line">            Monster monster1 = <span class="keyword">new</span> Monster(<span class="string">"小怪A"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster2 = <span class="keyword">new</span> Monster(<span class="string">"小怪B"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster3 = <span class="keyword">new</span> Monster(<span class="string">"关主"</span>, <span class="number">200</span>);</span><br><span class="line">            Monster monster4 = <span class="keyword">new</span> Monster(<span class="string">"最终Boss"</span>, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//生成角色</span></span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//木剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"WoodSword"</span>;</span><br><span class="line">            role.Attack(monster1);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//铁剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"IronSword"</span>;</span><br><span class="line">            role.Attack(monster2);</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//魔剑攻击</span></span><br><span class="line">            role.WeaponTag = <span class="string">"MagicSword"</span>;</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">  </span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题:</p><p>Role类的Attack方法很长，并且方法中有一个冗长的if…else结构，且每个分支的代码的业务逻辑很相似，只是很少的地方不同</p><p>违反了OCP原则。在这个设计中，如果以后我们增加一个新的武器，如倚天剑，每次攻击损失500HP，那么，我们就要打开Role，修改Attack方法。而我们的代码应该是对修改关闭的，当有新武器加入的时候，应该使用扩展完成，避免修改已有代码。</p><p>一般来说，当一个方法里面出现冗长的if…else或switch…case结构，且每个分支代码业务相似时，往往预示这里应该引入多态性来解决问题。而这里，如果把不同武器攻击看成一个策略，那么引入策略模式（Strategy Pattern）是明智的选择。</p><p>最后说一个小的问题，被攻击后，减HP、死亡判断等都是怪物的职责，这里放在Role中有些不当</p><p>Tip：OCP原则，即开放关闭原则，指设计应该对扩展开放，对修改关闭。</p><p>Tip：策略模式，英文名Strategy Pattern，指定义算法族，分别封装起来，让他们之间可以相互替换，此模式使得算法的变化独立于客户。</p><h4 id="第二种实现"><a href="#第二种实现" class="headerlink" title="第二种实现"></a>第二种实现</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">WoodSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            monster.Notify(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">IronSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            monster.Notify(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MagicSword</span> : <span class="title">IAttackStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Random _random = <span class="keyword">new</span> Random();</span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AttackTarget</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Int32 loss = (_random.NextDouble() &lt; <span class="number">0.5</span>) ? <span class="number">100</span> : <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">200</span> == loss)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"出现暴击！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            monster.Notify(loss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 怪物</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的名字</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> String Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物的生命值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> Int32 HP &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params">String name,Int32 hp</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Name = name;</span><br><span class="line">            <span class="keyword">this</span>.HP = hp;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 怪物被攻击时，被调用的方法，用来处理被攻击后的状态更改</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="loss"&gt;</span>此次攻击损失的HP<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params">Int32 loss</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"此怪物已死"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">this</span>.HP -= loss;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.HP &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"怪物"</span> + <span class="keyword">this</span>.Name + <span class="string">"被打死"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"怪物"</span> + <span class="keyword">this</span>.Name + <span class="string">"损失"</span> + loss + <span class="string">"HP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 角色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Role</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 表示角色目前所持武器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> IAttackStrategy Weapon &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 攻击怪物</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="monster"&gt;</span>被攻击的怪物<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>(<span class="params">Monster monster</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Weapon.AttackTarget(monster);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IGameLiAdv</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//生成怪物</span></span><br><span class="line">            Monster monster1 = <span class="keyword">new</span> Monster(<span class="string">"小怪A"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster2 = <span class="keyword">new</span> Monster(<span class="string">"小怪B"</span>, <span class="number">50</span>);</span><br><span class="line">            Monster monster3 = <span class="keyword">new</span> Monster(<span class="string">"关主"</span>, <span class="number">200</span>);</span><br><span class="line">            Monster monster4 = <span class="keyword">new</span> Monster(<span class="string">"最终Boss"</span>, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//生成角色</span></span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//木剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> WoodSword();</span><br><span class="line">            role.Attack(monster1);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//铁剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> IronSword();</span><br><span class="line">            role.Attack(monster2);</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//魔剑攻击</span></span><br><span class="line">            role.Weapon = <span class="keyword">new</span> MagicSword();</span><br><span class="line">            role.Attack(monster3);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">            role.Attack(monster4);</span><br><span class="line">  </span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><p>第一，虽然类的数量增加了，但是每个类中方法的代码都非常短，没有了以前Attack方法那种很长的方法，也没有了冗长的if…else，代码结构变得很清晰。</p><p>第二，类的职责更明确了。在第一个设计中，Role不但负责攻击，还负责给怪物减少HP和判断怪物是否已死。这明显不应该是Role的职责，改进后的代码将这两个职责移入Monster内，使得职责明确，提高了类的内聚性。</p><p>第三，引入Strategy模式后，不但消除了重复性代码，更重要的是，使得设计符合了OCP。如果以后要加一个新武器，只要新建一个类，实现IAttackStrategy接口，当角色需要装备这个新武器时，客户代码只要实例化一个新武器类，并赋给Role的Weapon成员就可以了，已有的Role和Monster代码都不用改动。这样就实现了对扩展开发，对修改关闭。</p><h3 id="初窥依赖注入"><a href="#初窥依赖注入" class="headerlink" title="初窥依赖注入"></a>初窥依赖注入</h3><p>上面例子的第二种实现中，Role不依赖具体武器，而仅仅依赖一个IAttackStrategy接口，接口是不能实例化的，虽然Role的Weapon成员类型定义为IAttackStrategy，但最终还是会被赋予一个实现了IAttackStrategy接口的具体武器，并且随着程序进展，一个角色会装备不同的武器，从而产生不同的效用。赋予武器的职责，在Demo中是放在了测试代码里。</p><p>这里，测试代码实例化一个具体的武器，并赋给Role的Weapon成员的过程，就是依赖注入！这里要清楚，依赖注入其实是一个过程的称谓！</p><p>依赖注入产生的背景：</p><p>随着面向对象分析与设计的发展，一个良好的设计，核心原则之一就是将变化隔离，使得变化部分发生变化时，不变部分不受影响（这也是OCP的目的）。为了做到这一点，要利用面向对象中的多态性，使用多态性后，客户类不再直接依赖服务类，而是依赖于一个抽象的接口，这样，客户类就不能在内部直接实例化具体的服务类。但是，客户类在运作中又客观需要具体的服务类提供服务，因为接口是不能实例化去提供服务的。就产生了“客户类不准实例化具体服务类”和“客户类需要具体服务类”这样一对矛盾。为了解决这个矛盾，开发人员提出了一种模式：客户类（如上例中的Role）定义一个注入点（Public成员Weapon），用于服务类（实现IAttackStrategy的具体类，如WoodSword、IronSword和MagicSword，也包括以后加进来的所有实现IAttackStrategy的新类）的注入，而客户类的客户类（Program，即测试代码）负责根据情况，实例化服务类，注入到客户类中，从而解决了这个矛盾。</p><p>依赖注入的正式定义：</p><p>依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p><h3 id="依赖注入的类别"><a href="#依赖注入的类别" class="headerlink" title="依赖注入的类别"></a>依赖注入的类别</h3><p>依赖注入有很多种方法，上面看到的例子中，只是其中的一种，下面从另一个例子了解不同的依赖注入类型。</p><h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><p>《墨攻》这部电影讲述了战国时期墨家人革离帮助梁国反抗赵国侵略的个人英雄主义故事，恢宏壮阔，浑雄凝重的历史场面相当震撼。其中有一个场景：当刘德华所饰的墨者革离到达梁国都城下，城上梁国守军问：“来者何人？”，刘德华回答：“墨者革离！”，对这段“城门问对”的场景进行编剧并借由这个例子来理解IoC的内涵。</p><h4 id="剧本与演员直接耦合"><a href="#剧本与演员直接耦合" class="headerlink" title="剧本与演员直接耦合"></a>剧本与演员直接耦合</h4><p>MoAttack代表《墨攻》的剧本，CityGetAsk()代表“城门问对”这段剧情，LiuDeHua是具体饰演者刘德华</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LiuDeHua</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResponseAsk</span>(<span class="params"><span class="keyword">string</span> res</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoAttack</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MoAttack</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CityGateAsk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            LiuDeHua ldh = <span class="keyword">new</span> LiuDeHua();<span class="comment">//演员直接侵入剧本</span></span><br><span class="line">   </span><br><span class="line">            ldh.ResponseAsk(<span class="string">"墨者革离！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们会发现,作为具体饰演者的刘德华直接侵入到剧本中，使剧本和演员直接耦合在一起</p><h4 id="引入剧本角色"><a href="#引入剧本角色" class="headerlink" title="引入剧本角色"></a>引入剧本角色</h4><p>一个明智的编剧在剧情创作时应围绕故事的角色进行，而不应考虑角色的具体饰演者，这样才可能在剧本投拍时自由地选择任何适合的演员，而非绑定在刘德华一人身上。通过以上的分析，我们知道需要为该剧本主人公革离定义一个接口，以角色进行剧情安排，饰演者实现角色的接口.</p><p>添加革离角色接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IGeLi</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">ResponseAsk</span>(<span class="params"><span class="keyword">string</span> res</span>)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>饰演者实现接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LiuDeHua</span>:<span class="title">IGeLi</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResponseAsk</span>(<span class="params"><span class="keyword">string</span> res</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>剧本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MoAttack</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        public MoAttack() &#123; &#125;</span><br><span class="line"></span><br><span class="line">        public void CityGateAsk()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            IGeLi ldh = new LiuDeHua();</span><br><span class="line"></span><br><span class="line">            ldh.ResponseAsk(&quot;墨者革离！&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="剧本和饰演者解耦"><a href="#剧本和饰演者解耦" class="headerlink" title="剧本和饰演者解耦"></a>剧本和饰演者解耦</h4><p>我们希望剧本和演员无关，可是即使加入了剧本角色，我们看到MoAttack同时依赖于IGeLi接口和LiuDeHua类，并没有达到我们所期望的剧本仅依赖于角色的目的。可是角色最终又必须通过具体的演员才能完成拍摄，如何将让LiuDeHua和剧本无关而又能完成IGeLi的具体动作呢？当然是在影片投拍时，导演将LiuDeHua安排在GeLi的角色上，通过导演之手将剧本、角色、饰演者装配起来。</p><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>新的MoAttack</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoAttack</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IGeLi geli;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MoAttack</span>(<span class="params">IGeLi geli</span>)<span class="comment">//注入革离的具体扮演者</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.geli = geli;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CityGateAsk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.geli.ResponseAsk(<span class="string">"墨者革离！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MoAttack的构造函数不关心具体是谁扮演革离这个角色，只要传入的扮演者按剧本要求完成角色功能即可</p><p>角色的具体扮演者由导演来安排:<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">direct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            IGeLi geli = <span class="keyword">new</span> LiuDeHua(); <span class="comment">//指定角色的扮演者</span></span><br><span class="line"></span><br><span class="line">            MoAttack moAttack = <span class="keyword">new</span> MoAttack(geli); <span class="comment">//注入具体扮演者到剧本中</span></span><br><span class="line"></span><br><span class="line">            moAttack.CityGateAsk();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><p>有时，导演会发现，虽然革离是影片《墨攻》的第一主人公，但并非每场戏都需要革离的出现，通过构造函数方式注入显得很不妥当，在这种情况下，可以使用属性注入进行改造。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoAttack</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IGeLi geli;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> IGeLi GeLi <span class="comment">//属性注入方法</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">set</span> &#123; <span class="keyword">this</span>.geli=<span class="keyword">value</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CityGateAsk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.geli.ResponseAsk(<span class="string">"墨者革离！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">direct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            IGeLi geli = <span class="keyword">new</span> LiuDeHua(); <span class="comment">//指定角色的扮演者</span></span><br><span class="line"></span><br><span class="line">            MoAttack moAttack = <span class="keyword">new</span> MoAttack();</span><br><span class="line"></span><br><span class="line">            moAttack.GeLi = geli;<span class="comment">//调用属性注入</span></span><br><span class="line"></span><br><span class="line">            moAttack.CityGateAsk();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>MoAttack在geli 字段提供一个属性，以便让导演在拍需要革离的戏时才将geli的具体扮演者注入，而不需要刘德华从头到尾跟着墨攻剧组跑</p><p>和通过构造函数注入革离扮演者不同，在实例化MoAttack时，并未指定任何扮演者，而是在实例化MoAttack后，调用其属性注入扮演者。按照类似的方式，我们还可以为剧本中其他如巷淹中，梁王等角色分别提供注入的属性，导演即可以根据所拍剧段的不同，注入所需要的角色了。</p><h4 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h4><p>将客户类所有注入的方法抽取到一个接口中，客户类通过实现这一接口提供注入的方法。为了采取接口注入的方式，需要声明一个额外的接口：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IActorArrangable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">InjectGeli</span>(<span class="params">IGeLi geli</span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>MoAttack实现这个接口并实现接口中的方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoAttack</span> : <span class="title">IActorArrangable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IGeLi geli;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CityGateAsk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.geli.ResponseAsk(<span class="string">"墨者革离！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InjectGeli</span>(<span class="params">IGeLi geli</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.geli = geli;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Director通过IActorArrangable接口的injectGeli()方法完成扮演者的注入工作</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Director</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">direct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            IGeLi geli = <span class="keyword">new</span> LiuDeHua(); <span class="comment">//指定角色的扮演者</span></span><br><span class="line"></span><br><span class="line">            MoAttack moAttack = <span class="keyword">new</span> MoAttack();</span><br><span class="line"></span><br><span class="line">            moAttack.InjectGeli(geli);</span><br><span class="line"></span><br><span class="line">            moAttack.CityGateAsk();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于通过接口注入需要额外声明一个接口，增加了类的数目，而且它的效果和属性注入并无本质区别，因此我们不提倡这种方式</p><h4 id="通过容器完成依赖关系的建立"><a href="#通过容器完成依赖关系的建立" class="headerlink" title="通过容器完成依赖关系的建立"></a>通过容器完成依赖关系的建立</h4><p>虽然MoAttack和LiuDeHua实现了解耦，无需关注实现类的实例化工作，但这些工作在代码中依然存在，只是转移到Director中而已，导致导演的权力非常大，潜规则不断滋生。假设某一制片人想改变这一局面，在相中某个剧本后，通过一个“海选”或者第三公正中介来选择导演、演员，让他们各司其职，那剧本、导演、演员就都实现解耦了。</p><p>所谓媒体“海选”和中介机构在程序领域即是一个第三方容器，它帮助我们完成类的初始化和装配工作，让我们从这些底层的实现类实例化，依赖关系的装配中脱离出来，专注于更有意思的业务代码的编写工作，那确实是挺惬意的事情。</p><p>Spring.Net就是这样一个容器，它通过配置文件描述类之间的依赖关系，下面是Spring.Net配置文件的对以上实例进行配置的样式代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objects</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"geli"</span> <span class="attr">type</span>=<span class="string">"RuoXie.IOCTest.LiuDeHua"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"moAttack"</span> <span class="attr">type</span>=<span class="string">"RuoXie.IOCTest.MoAttack"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"geli"</span>&gt;</span><span class="tag">&lt;<span class="name">ref="geli"</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">objects</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考文档：</p><p><a href="http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html" target="_blank" rel="noopener">依赖注入那些事儿</a></p><p><a href="http://www.cnblogs.com/zhangchenliang/archive/2013/01/08/2850975.html" target="_blank" rel="noopener">墨攻IOC</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="IOC" scheme="https://jaycewu.site/tags/IOC/"/>
    
      <category term="DI" scheme="https://jaycewu.site/tags/DI/"/>
    
      <category term="依赖注入" scheme="https://jaycewu.site/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="控制反转" scheme="https://jaycewu.site/tags/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>将数据库事务从dao层提升到service层</title>
    <link href="https://jaycewu.site/2017/07/30/%E5%B0%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%BB%8Edao%E5%B1%82%E6%8F%90%E5%8D%87%E5%88%B0service%E5%B1%82/"/>
    <id>https://jaycewu.site/2017/07/30/将数据库事务从dao层提升到service层/</id>
    <published>2017-07-30T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>学习后端语言的时候，都会涉及到数据库的相关操作，不同语言在操作数据库方面有不同的驱动程序，比如java的JDBC,C#的ADO.NET。当进行数据的新增，更新以及删除的时候，经常需要开启数据库事务。比如ADO.NET是这样使用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection con = <span class="keyword">new</span> Sqlconnection(<span class="string">"数据库连接语句"</span>);</span><br><span class="line">con.Open();</span><br><span class="line"><span class="keyword">var</span> trans = con.BeginTransaction();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">     SqlCommand com = <span class="keyword">new</span> SqlCommand(trans);</span><br><span class="line">     <span class="comment">//处理插入或更新逻辑</span></span><br><span class="line">     trans.Commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">     trans.Rollback();<span class="comment">//如果前面有异常则事务回滚</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">     con.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多教程都将事务写在数据访问层(dao层)，但是更多时候我们需要的是业务逻辑层(service层)级别的事务控制。比如我们有一个学生表，一个班级表。学生表存有对应的班级字段，学生与班级表都有对应的dao和service操作类。每个dao只操作相关的数据，不能即操作学生的数据，又操作班级的数据。现在我们要删除一个班级，并且将该班级的学生一并删除。不管是先删除班级还是先删除学生(不存在外键约束)，反正就是要一起删除。因为每个dao只操作单一的对象，这时候dao中进行删除操作的时候开启事务是达不到我们目的。班级删除失败，学生的删除操作是不会回滚的，反之也一样。<br>删除班级的同时一并删除学生，某一个失败，另一个删除操作回滚。这属于一个业务层的原子操作。在班级的service操作类中可以引入班级和学生的dao进行操作，两个dao的操作放到同一事务中进行操作。</p><h3 id="连接Id类"><a href="#连接Id类" class="headerlink" title="连接Id类"></a>连接Id类</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RuoXieTranscation</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConnId</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">string</span> _cconId = Guid.NewGuid().ToString().Replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">       <span class="keyword">private</span> DateTime _createTime=DateTime.Now;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">ConnId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> CconId</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">get</span> &#123; <span class="keyword">return</span> _cconId; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> DateTime CreateTime</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _createTime; &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成一个guid，后面标识每个连接实例的唯一性。</p><h3 id="连接类"><a href="#连接类" class="headerlink" title="连接类"></a>连接类</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RuoXieTranscation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbConnection</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _sConnStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">private</span> ConnId _connId = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> SqlConnection _sqlConnection = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> SqlCommand _sqlCommand = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ConnId ConnId</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _connId; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> SqlCommand SqlCommand</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _sqlCommand; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DbConnection</span>(<span class="params"><span class="keyword">string</span> connStr</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _sConnStr = connStr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConnId <span class="title">ConnOpen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlConnection = <span class="keyword">new</span> SqlConnection(_sConnStr);</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand = <span class="keyword">new</span> SqlCommand();</span><br><span class="line">                _sqlCommand.Connection = <span class="keyword">this</span>._sqlConnection;</span><br><span class="line">                <span class="keyword">this</span>._connId = <span class="keyword">new</span> ConnId();</span><br><span class="line">                _sqlConnection.Open();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._sqlConnection.State != System.Data.ConnectionState.Closed)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._sqlConnection.Close();</span><br><span class="line">                    <span class="keyword">this</span>._sqlConnection.Dispose();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>._sqlConnection = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._connId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BeginTransaction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                _sqlCommand.Transaction =</span><br><span class="line">                    _sqlConnection.BeginTransaction(System.Data.IsolationLevel.ReadCommitted,</span><br><span class="line">                        <span class="keyword">this</span>._connId.CconId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._sqlConnection.State != System.Data.ConnectionState.Closed)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._sqlConnection.Close();</span><br><span class="line">                    <span class="keyword">this</span>._sqlConnection.Dispose();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>._sqlConnection = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Commit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand.Transaction.Commit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand.Transaction.Rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rollback</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand.Transaction.Rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand.Transaction.Rollback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._sqlCommand != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlCommand.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>._sqlConnection.State != System.Data.ConnectionState.Closed)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._sqlConnection.Close();</span><br><span class="line">                <span class="keyword">this</span>._sqlConnection.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开连接后可以显式调用BeginTransaction来决定使用事务</p><h3 id="连接管理类"><a href="#连接管理类" class="headerlink" title="连接管理类"></a>连接管理类</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">RuoXieTranscation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConnManager</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, DbConnection&gt; _cache =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="keyword">string</span>, DbConnection&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;<span class="keyword">string</span>&gt; _threadLocal;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _connStr = <span class="string">@"Password=977865769;Persist Security Info=True;User ID=sa;Initial Catalog=RuoXie;Data Source=5ENALIZN94GYJZZ\SQLEXPRESS"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ConnManager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _threadLocal=<span class="keyword">new</span> ThreadLocal&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CreateConn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DbConnection dbconn = <span class="keyword">new</span> DbConnection(_connStr);</span><br><span class="line">            ConnId key = dbconn.ConnOpen();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(key.CconId))</span><br><span class="line">            &#123;</span><br><span class="line">                _cache.TryAdd(key.CconId, dbconn);</span><br><span class="line">                _threadLocal.Value = key.CconId;</span><br><span class="line">                Console.WriteLine(<span class="string">"创建数据库连接,Id: "</span> + key.CconId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"打开数据库连接失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BeginTransaction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误，链接已丢失"</span>);</span><br><span class="line">            _cache[id].BeginTransaction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Commit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> id = GetId();</span><br><span class="line">                <span class="keyword">if</span>(!_cache.ContainsKey(id))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误，链接已丢失"</span>);</span><br><span class="line">                _cache[id].Commit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Rollback</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> id = GetId();</span><br><span class="line">                <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误，链接已丢失"</span>);</span><br><span class="line">                _cache[id].Rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReleaseConn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> id = GetId();</span><br><span class="line">                <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误，链接已丢失"</span>);</span><br><span class="line">                _cache[id].Close();</span><br><span class="line">                Remove(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlCommand <span class="title">GetSqlCommand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> id = GetId();</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: 连接已丢失."</span>);</span><br><span class="line">            <span class="keyword">return</span> _cache[id].SqlCommand;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = _threadLocal.Value;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(id))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"内部错误: 连接已丢失."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Remove</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_cache.ContainsKey(id)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            DbConnection dbConnection;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(result = _cache.TryRemove(id, <span class="keyword">out</span> dbConnection)))</span><br><span class="line">            &#123;</span><br><span class="line">                index++;</span><br><span class="line">                Thread.Sleep(<span class="number">20</span>);</span><br><span class="line">                <span class="keyword">if</span> (index &gt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过静态属性_cache保存每个连接的Id,_threadLocal保存当前线程中的连接Id，不管一个service中涉及多少个dao操作，都是处于同一线程中，通过_threadLocal就可以取出同一个连接对象进行操作。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SQLHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ExecuteNonQuery</span>(<span class="params"><span class="keyword">string</span> sql, SqlParameter[] parameters = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> command = ConnManager.GetSqlCommand();</span><br><span class="line">            command.CommandText = sql;</span><br><span class="line">            command.CommandType = System.Data.CommandType.Text;</span><br><span class="line">            <span class="keyword">if</span> (parameters != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                command.Parameters.Clear();</span><br><span class="line">                command.Parameters.AddRange(parameters);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> command.ExecuteNonQuery();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">object</span> <span class="title">ExecuteScalar</span>(<span class="params"><span class="keyword">string</span> sql, SqlParameter[] parameters = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> command = ConnManager.GetSqlCommand();</span><br><span class="line">            command.CommandText = sql;</span><br><span class="line">            command.CommandType = System.Data.CommandType.Text;</span><br><span class="line">            <span class="keyword">if</span> (parameters != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                command.Parameters.Clear();</span><br><span class="line">                command.Parameters.AddRange(parameters);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> command.ExecuteScalar();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentDao</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Add</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">string</span> no</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> sql = <span class="keyword">string</span>.Format(<span class="string">"insert into T_Student(Name12,No) values(@name,@no)"</span>);</span><br><span class="line">            <span class="keyword">var</span> nameParameter = <span class="keyword">new</span> SqlParameter(<span class="string">"@name"</span>, SqlDbType.NVarChar);</span><br><span class="line">            <span class="keyword">var</span> noParameter = <span class="keyword">new</span> SqlParameter(<span class="string">"@no"</span>, SqlDbType.NVarChar);</span><br><span class="line">            nameParameter.Value = name;</span><br><span class="line">            noParameter.Value = no;</span><br><span class="line">            SqlParameter[] paras = <span class="keyword">new</span> SqlParameter[]&#123;</span><br><span class="line">                nameParameter,noParameter</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> SQLHelper.ExecuteNonQuery(sql, paras) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentBll</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> StudentDao mDao;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">StudentBll</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           mDao=<span class="keyword">new</span> StudentDao();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">AddStudent</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">string</span> no</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">return</span> mDao.Add(name, no);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            test();</span><br><span class="line">            test2();</span><br><span class="line">            test3();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ConnManager.CreateConn();</span><br><span class="line">            ConnManager.BeginTransaction();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> classService = <span class="keyword">new</span> ClassBll();</span><br><span class="line">                classService.AddClass(<span class="string">"7班"</span>);</span><br><span class="line">                ConnManager.Commit();</span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                ConnManager.Rollback();</span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ConnManager.CreateConn();</span><br><span class="line">            ConnManager.BeginTransaction();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> classService = <span class="keyword">new</span> ClassBll();</span><br><span class="line">                <span class="keyword">var</span> studentService=<span class="keyword">new</span> StudentBll();</span><br><span class="line">                classService.AddClass(<span class="string">"8班"</span>);</span><br><span class="line">                studentService.AddStudent(<span class="string">"李四"</span>,<span class="string">"001"</span>);</span><br><span class="line">                ConnManager.Commit();</span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                ConnManager.Rollback();</span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ConnManager.CreateConn();</span><br><span class="line">            <span class="comment">//ConnManager.BeginTransaction();</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> classService = <span class="keyword">new</span> ClassBll();</span><br><span class="line">                <span class="keyword">var</span> studentService = <span class="keyword">new</span> StudentBll();</span><br><span class="line">                classService.AddClass(<span class="string">"8班"</span>);</span><br><span class="line">                studentService.AddStudent(<span class="string">"李四"</span>, <span class="string">"001"</span>);</span><br><span class="line">                <span class="comment">//ConnManager.Commit();</span></span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//ConnManager.Rollback();</span></span><br><span class="line">                ConnManager.ReleaseConn();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虽然将事务提取到了service层，但是每次都要写这样的代码<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ConnManager.CreateConn();</span><br><span class="line">ConnManager.BeginTransaction();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//业务逻辑调用</span></span><br><span class="line">    ConnManager.Commit();</span><br><span class="line">    ConnManager.ReleaseConn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ConnManager.Rollback();</span><br><span class="line">    ConnManager.ReleaseConn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用过spring或者spring.net的应该都知道将事务控制转到业务层事多简单，比如spring.net<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Transaction</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteData</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UserDao.Delete(name);</span><br><span class="line">    AccountDao.Delete(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>只需要在service方法加上Transaction attribute。原理就是AOP编程。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;学习后端语言的时候，都会涉及到数据库的相关操作，不同语言在操作数据库方面有不同的驱动程序，比如java的JDB
      
    
    </summary>
    
      <category term="后端" scheme="https://jaycewu.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="C#" scheme="https://jaycewu.site/tags/C/"/>
    
      <category term="数据库事务" scheme="https://jaycewu.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现Tab布局</title>
    <link href="https://jaycewu.site/2017/04/05/CSS%E5%AE%9E%E7%8E%B0Tab%E5%B8%83%E5%B1%80/"/>
    <id>https://jaycewu.site/2017/04/05/CSS实现Tab布局/</id>
    <published>2017-04-05T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><h3 id="一、布局方式"><a href="#一、布局方式" class="headerlink" title="一、布局方式"></a>一、布局方式</h3><h4 id="1、内容与tab分离"><a href="#1、内容与tab分离" class="headerlink" title="1、内容与tab分离"></a>1、内容与tab分离</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item2"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item3"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item4"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-control"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item1"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item2"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item3"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item4"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#7b7474</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-bc4ca39b535f7aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><h4 id="2、内容与tab一体"><a href="#2、内容与tab一体" class="headerlink" title="2、内容与tab一体"></a>2、内容与tab一体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml3"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml2</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml3</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">300%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>:none;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-9d4160c5eda4d4c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>利用负margin，将内容区对齐，然后内容去添加背景色，避免不同tab对应的区域透视重叠。</p><h3 id="二、CSS实现交互"><a href="#二、CSS实现交互" class="headerlink" title="二、CSS实现交互"></a>二、CSS实现交互</h3><h4 id="1、锚点实现（target）"><a href="#1、锚点实现（target）" class="headerlink" title="1、锚点实现（target）"></a>1、锚点实现（target）</h4><p><strong>(1)针对布局一</strong>：item从上往下排列，父元素tab-content加上overflow:hidden。利用锚点，点击不同a标签的时候，具有对应ID的item会切换到tab-content的视图中，然后利用hover给tab按钮加上切换样式。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item2"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item3"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item4"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-control"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item1"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item2"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item3"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item4"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#7b7474</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法只是利用了锚点切换，没有使用：target。修改CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#7b7474</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>item使用绝对定位，然后使用:target修改元素z-index达到切换效果（其实也可以通过控制元素的display来达到切换效果）</p><p><strong>（2）针对布局二：</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item active"</span> <span class="attr">id</span>=<span class="string">"item1"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item2"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item3"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item4"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml3"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: silver;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid silver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ml1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ml2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ml3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">300%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:target</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、hover实现"><a href="#2、hover实现" class="headerlink" title="2、hover实现"></a>2、hover实现</h4><p><strong>（1）针对布局一：</strong><br>无法简单的通过CSS实现</p><p><strong>（2）针对布局二：</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml3"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml2</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml3</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">300%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>:none;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、label与-checked实现"><a href="#3、label与-checked实现" class="headerlink" title="3、label与:checked实现"></a>3、label与:checked实现</h4><p><strong>（1）针对布局一：</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item1"</span> <span class="attr">checked</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-control"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"item1"</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"item2"</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"item3"</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"item4"</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: silver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#7b7474</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tab-control</span> <span class="selector-tag">label</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.radio-item</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-content</span> <span class="selector-class">.radio-item</span><span class="selector-pseudo">:checked+.item</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用css :checked与+（选择紧接在另一个元素后的元素，而且二者有相同的父元素）选择符。</p><p><strong>（2）针对布局二：</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item1"</span> <span class="attr">checked</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">for</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item2"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">for</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml1"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item3"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">for</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml2"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"radio-item"</span> <span class="attr">id</span>=<span class="string">"item4"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">for</span>=<span class="string">"item4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"content ml3"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid silver;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml2</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ml3</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">300%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.radio-item</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.radio-item</span><span class="selector-pseudo">:checked</span>~<span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">  <span class="attribute">border-bottom</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.radio-item</span><span class="selector-pseudo">:checked</span>~<span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;一、布局方式&quot;&gt;&lt;a href=&quot;#一、布局方式&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Tab布局" scheme="https://jaycewu.site/tags/Tab%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>CSS中line-height与vertical-align</title>
    <link href="https://jaycewu.site/2017/03/28/CSS%E4%B8%ADline-height%E4%B8%8Evertical-align/"/>
    <id>https://jaycewu.site/2017/03/28/CSS中line-height与vertical-align/</id>
    <published>2017-03-28T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><blockquote><p>参考文章：<br><a href="http://mp.weixin.qq.com/s?__biz=MzAwNzAzMDY1NQ==&amp;mid=206445305&amp;idx=1&amp;sn=899beb2d7e98194c000f9818c79f7778&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">深入了解CSS的line-height属性</a><br><a href="http://mxd.tencent.com/vertical-align" target="_blank" rel="noopener">Vertical-Align: 你需要知道的所有事【译】</a><br><a href="http://christopheraue.net/2014/03/05/vertical-align/" target="_blank" rel="noopener">Vertical-Align: All You Need To Know</a></p></blockquote><h3 id="1、什么是行间距或者行高（line-height）"><a href="#1、什么是行间距或者行高（line-height）" class="headerlink" title="1、什么是行间距或者行高（line-height）"></a>1、什么是行间距或者行高（line-height）</h3><p>line-height是指文本行基线间的垂直距离。</p><h4 id="1-1、顶线，中线，基线，底线"><a href="#1-1、顶线，中线，基线，底线" class="headerlink" title="1.1、顶线，中线，基线，底线"></a>1.1、顶线，中线，基线，底线</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-757a5ead60960914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>从上到下分别是顶线，中线，基线，底线。vertical-align的四个属性top,middle,baseline,bottom就是与这四条线有关。</p><h4 id="1-2、行高，行距，半行距"><a href="#1-2、行高，行距，半行距" class="headerlink" title="1.2、行高，行距，半行距"></a>1.2、行高，行距，半行距</h4><ul><li>行高是指上下文本行基线间的垂直距离。（上图中两条红线间的垂直距离）</li><li>行距是指一行底线到下一行顶线的垂直距离。（第一条粉线和第二条绿线间的垂直距离）</li><li>半行距就是行距/2。(图中可以看出，半行距=(行高-字体size)/2 )<figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-0d6db0a0be6aea55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure></li></ul><h4 id="1-3、内容区，行内框，行框"><a href="#1-3、内容区，行内框，行框" class="headerlink" title="1.3、内容区，行内框，行框"></a>1.3、内容区，行内框，行框</h4><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-c2700d187c56e2ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><ul><li>内容区：顶线和底线包裹的区域（字体的size）</li><li>行内框：在没有其他因素影响的时候（padding等），行内框等于内容区。而设定行高时行内框高度不变，半行距分别增加/减少到内容区的上下两边（深蓝色区域）行框（line box）。（字体size不变，修改行高就是修改行距）</li><li>行框：行框高度等于本行内所有元素中行内框最大的值（以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度），当有多行内容时，每行都会有自己的行框。</li></ul><h4 id="1-4、line-height的设置"><a href="#1-4、line-height的设置" class="headerlink" title="1.4、line-height的设置"></a>1.4、line-height的设置</h4><p><strong>百分比方式设置</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  121212</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>121212<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">120%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>line-height的百分比（120%）和body的字体大小（16px），被用来计算（16*120=19.2），这个值会被层叠下去的元素所继承。<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-64f8ac452bd0518e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-78b4087a3cd4be60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>补充</strong><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最终盒模型</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-0c2e089a48a24e41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-433cdef3b48b6d29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>盒模型中，内容（不是上文说的内容区，上文的内容区是顶线与底线间的区域）的高度等于line-height的值。为什么会有margin？浏览器默认P的上下margin是1em,设置了P的font-size是32px,所以1em=32px。上下margin就是32px。</p><p><strong>长度方式（px）设置</strong><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  121212</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>121212<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-10466171680bb1e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-f96f2fa3cd805769.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>值normal</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  121212</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>121212<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-07ca5eb22b4f162d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="body"></div><div class="image-caption">body</div></figure><p>body的line的line-height是22px,所以normal等于1.375</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-6f20ee57b87ffe34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>p的line-height：32px*1.375=44px（normal并不是精确的等于1.375）</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-fa34a0ff48157fea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>纯数字</strong><br>就是将normal改为一个想要的准确数字。</p><h4 id="1-5、各种BOX"><a href="#1-5、各种BOX" class="headerlink" title="1.5、各种BOX"></a>1.5、各种BOX</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个<span class="tag">&lt;<span class="name">em</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">em</span>&gt;</span> 元素为行内元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-6da3ca94f2274bd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>containing box</strong><br>p就是一个containing box，包含了其他boxs。</p><p><strong>inline box</strong><br>在段落内，有一系列的inline box,inline box不会让内容成块显示，而是排成一行。“强调”是一种inline box,“这个”，“元素为行内元素”为一种匿名inline box。</p><p><strong>line box</strong><br>多个inline box组成line box，多个line box组成containing box。</p><p><strong>Content Area</strong><br>Content Area是围绕着文字的一种看不见的box,高度取决与font-size</p><p><strong>inline box与line-height</strong><br>font-size:32px，line-height:48px，行间距=48px-32px=16px，半行间距=8px。<br>半行间距会用在Content Area的顶部和底部。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-54c422b0a06e7682.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>这里inline box的高度就是line-height。inline box包着Content Area</p><p>但是，当line-height小于font-size。line box的高度还是line-height,所以line-box的高度小于Content Area的高度，Content Area会溢出line-box。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-3c057a9446434303.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>inline box 与line box</strong><br>line box的高度取决于他内部最高的inline box。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-bc4f96a4733b1fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-fbe2f27a7b3c5d2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-3f348ef9d532567b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-d7d9db120455ff05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><h3 id="2、vertical-align"><a href="#2、vertical-align" class="headerlink" title="2、vertical-align"></a>2、vertical-align</h3><p>vertical-align是用来对齐内联级元素的。设置为以下display属性的元素，它们都被认为属于内联级元素。<strong>inline</strong>、<strong>inline-block</strong> or <strong>inline-table </strong>(本文中不涉及此种情况)：</p><p>inline内联元素基本上是包裹文本的标签。</p><p>inline-block内联块元素则如它们的名字所示：拥有内联特性的块元素。他们可以有width和height（可能是由自己的内容定义），以及padding、border和margin。</p><p>内联级元素彼此紧挨着放在一行中。一旦有更多的元素被放置到当前行中，一个新的行将会在它下面创建。所有这些行有所谓的“行框”，行框中包含所有的内容。不同大小的内容意味着不同高度的行框。在下面的插图中，行框的顶部和底部都是用红线表示的。<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-7aab0dba5bc20d39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><p>在行框中，元素的vertical-align属性是负责垂直对齐的。那么，到底元素垂直对齐的参照物是什么？</p><p><strong>参照物：父元素的基线和外边缘</strong><br>看看元素的基线和行框的外观：<br><strong>inline元素</strong>：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-08b7390e62d919fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>三行并排的文本。行框的顶部和底部边缘用红线表示，字体的高度由绿线表示，基线由一条蓝线表示。在左边，有一个line-height设置为与字体font-size大小相同高度的文本，绿线和红线重叠在一条线上。在中间，line-height是字体的两倍大。在右边，line-height是字体大小的一半大。</p><p>内联元素（display:inline）的外边缘与其行高的顶部和底部边缘对齐，行高可以小于字体的高度。所以，行框就是上面的图中的红线。</p><p>内联元素的基线是字符放置的位置线（字母x底部所在的水平线），即图中的蓝线。粗略地说，基线是在字体1/2高度的下面的某个地方。</p><p><strong>inline-block元素</strong>：<br>inline-block因为已经有宽和高，可能存在多行，每行都有自己的基线和行框，所以会比较特殊。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-924628ed8ffdeee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>上图中，最外层是div，里面分别是三个inline-block的span，黄色为border，绿色为padding，蓝色为content area（一个span，其中有一个字母“C”）。左边的inline-block的span的内容（span）是一个正常文档流元素。中间的inline-block的span还额外加了overflow: hidden。右边的inline-block的span包含一个流外的span(但内容区域有一个高度)(译者注：流内的元素必须是普通文档流（normal flow）中的元素，流外的元素必须是浮动或绝对定位的元素以及根元素。)。蓝线为每个inline-block的span的基线。内联块元素的外边缘是其margin框的顶部和底部边缘，即图中的红线。</p><p>内联块元素（上图三个inline-block的span）的基线取决它包含的内容是否在文档流中：</p><ul><li>在流内内容的情况下，内联块元素的基线是正常流中最后一个内容元素的基线（左边的例子）。对于这最后一个元素，它的基线是根据它自己的规则找到的。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">  x<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    x<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display:inline-block;height:30px;width:100px;background-color:blue"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    x</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">90px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e1f47b4cd9e6e5d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>灰色背景的元素内部有三个子元素，两个“x”,一个span。元素的基线就是最后一个正常流元素（“x”）的基线。<br>修改元素的长度，使其内容出现多行：</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-62c45b8a73e166db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>最外面的X怎么也跟着移动了？这涉及行框基线的移动，下文细说。</p><ul><li>在流内内容但内联块元素有overflow:hidden属性的情况下，基线是内联块元素margin框的底部边缘（例如在中间的图）。<br>修改上面的例子样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-97fa3f9c028cfce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>通过最外面的x大致知道行框的基线位置，就是内联块元素的下外边距的地方，也是内联块元素元素的基线位置。<br><strong>一开始此处有疑惑</strong>：内联块元素元素的基线跑到了下外边距处，那么元素里面的内容不应该以这条基线做定位吗？群里问了大佬，内联块元素已经设了宽高，可能有多行（即使只有一行），每行有各自的行框，然后又根据规则定位了，跟内联块元素的基线已经没有关系。</p><ul><li>在流外内容的情况下，基线是内联块元素margin框的底部边缘（例如在右边）。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">  x<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display:inline-block;height:30px;width:100px;background-color:blue;"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span>&gt;<span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-1bf79648253f0178.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>加上浮动<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">  x<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display:inline-block;height:30px;width:100px;background-color:blue;float:left"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e1340e0337c09cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>行框的基线是可变的</strong><br>当使用vertical-align时，基线放置在哪里可能是最令人疑惑的部分。它需要满足vertical-align的值和行框的高度等所有条件。基线的位置犹如是方程中的一个自由参数。</p><p>行框的基线是看不见的，但你可以使它很容易看到。只要在文本行的开头添加一个字符，像我增加了一个“X”的字母。如果这个字符不以任何方式对齐，它将默认地坐在基线上。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-17a321a13fb1de4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>围绕着行框的基线的部分（绿线），我们可以称其为文本框。文本框可以简单地被认为是行框内的内联元素，没有任何对齐。文本框的高度等于它的父元素的字体大小。因此，文本框只围住了行框内的无格式文本。由于这个文本框是绑在基线上的，当基线移动时它将移动。（注：此文本框在W3C规范中称为“strut（支柱）”）</p><p><strong>vertical-align的值</strong><br><strong>1）将元素的基线，参照父元素的基线对齐</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-be511377e0cbfe01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>baseline：元素的基线与父元素的基线对齐。</p><p>sub：元素的基线偏移到父元素的基线之下。</p><p>sup：元素的基线偏移到父元素的基线之上。</p><p><percentage>：元素的基线相对于父元素的基线偏移了一个百分比（该百分比是对比元素自身的line-height计算得出）。</percentage></p><p><length>：元素的基线相对于父元素的基线偏移了一个绝对长度。</length></p><p><strong>2）将元素的中心点，参照父元素的基线对齐</strong></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-7e62e2f007fae25b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>middle：将元素的顶部和底部之间的中心点，对齐父元素的基线之上x-height的1/2之处（x-height为字母x的字符高度）。</p><p><strong>3）将元素的外边缘，参照父元素的文本框对齐</strong></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-ad50fa22b3971468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>text-top：将元素的顶部边缘，对齐到父元素的文本框的顶部边缘。</p><p>text-bottom：将元素的底部边缘，对齐到父元素的文本框的底部边缘。</p><p><strong>4）将元素的外边缘，参照父元素行框的外边缘对齐</strong></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-22702eed5b65c234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>top：元素的顶部边缘对齐到父元素的顶部边缘。</p><p>bottom：元素的底部边缘对齐到父元素的底部边缘。</p><p><strong>基线的移动</strong><br>如果一行中有一个高个的元素占据了整行的高度，那么vertical-align对它没有影响。它的顶部和底部没有空间让它移动。为了满足行框基线的对齐方式，行框的基线必须移动。矮个元素设置了vertical-align: baseline。在左边，高个元素设置了vertical-align: text-bottom。在右边，高个元素设置了vertical-align: text-top。你可以看到右边的基线跳起来了。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-c1814fe05aab774b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>（左）将两个元素放在一行中并设置vertical-align ，它们会使得行框的基线移动到符合它俩的对齐规则之处，然后行框的高度也会随之调整。（中）添加第三个元素，不超越行框的边缘，既不影响行框的高度，也不影响基线的位置。（右）添加第三个元素，如果它超出了行框的边缘，行框的高度和基线调整。在这种情况下，我们的前两个元素也会跟着发生变化。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-2116d86a4125a740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p><strong>内联级元素底部的小间隙</strong></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-09bed4e30dbca377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>列表项坐在基线上。下面的一点空间，是文本的基线以下预留的depth（在W3C规范中，一个字体的基线以上称为characteristic height，基线以下称为depth）。想要去掉这个depth空隙，有解决的办法吗？只要移动基线的位置就可以，例如通过设置列表项目vertical-align: middle</p><p><strong>水平垂直居中</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          自适应垂直居中</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>:inline-block;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:<span class="number">#e1e3cd</span>;</span><br><span class="line">   <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">    <span class="attribute">background-color</span>:silver;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-0ebe9d2f22f572c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>要将content水平垂直居中定位在box里，利用vertical-align是其中一种方法。原理是：vertical-align：middle（将元素的顶部和底部之间的中心点，对齐父元素的基线之上x-height的1/2之处（x-height为字母x的字符高度）。），content肯定是要垂直居中的，那只能修改行框的基线位置（<strong>注意：不是修改box的基线，box具有宽高，它里面的内容可能会有多行，每行有各自的行框，box的基线已经不会影响内容的布局，但是box的基线还是会受里面内容的影响（内联块元素的基线是正常流中最后一个内容元素的基线）</strong>），使其位于box的垂直中心位置。修改行框的基线，只要在box内加一个高度为100%的空元素，然后设置vertical-align:middle，添加的元素已经占满整个行框高度，而只要移动行框的基线，就可以满足定位规则，所以行框的基线就被移动到box垂直中心位置。content再按规则对齐到行框基线上就可以了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;blockquote&gt;&lt;p&gt;参考文章：&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="line-height" scheme="https://jaycewu.site/tags/line-height/"/>
    
      <category term="vertical-align" scheme="https://jaycewu.site/tags/vertical-align/"/>
    
  </entry>
  
  <entry>
    <title>CSS中的BFC，外边距折叠，清除浮动</title>
    <link href="https://jaycewu.site/2017/03/16/CSS%E4%B8%AD%E7%9A%84BFC%EF%BC%8C%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0%EF%BC%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>https://jaycewu.site/2017/03/16/CSS中的BFC，外边距折叠，清除浮动/</id>
    <published>2017-03-16T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><h3 id="BFC是什么？"><a href="#BFC是什么？" class="headerlink" title="BFC是什么？"></a>BFC是什么？</h3><p>BFC（Block Formatting Context）直译为“<strong><em>块级格式化范围</em></strong> ”。</p><blockquote><p>是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。当涉及到可视化布局的时候，Block Formatting Context提供了一个环境，HTML元素在这个环境中按照一定规则进行布局。一个环境中的元素不会影响到其它环境中的布局。</p></blockquote><h3 id="BFC-的特征"><a href="#BFC-的特征" class="headerlink" title="BFC 的特征"></a>BFC 的特征</h3><p>在BFC中，盒子从顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin 值所决定的。在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。</p><p>在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p><p>BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><p>计算BFC的高度时，浮动元素也参与计算（可用于解决浮动造成的高度塌陷问题）</p><p>BFC的区域不会与float box重叠(解决浮动元素文字环绕问题)</p><h3 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h3><ul><li>float 的值不为none</li><li>position 的值不为static或者relative</li><li>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个</li><li>overflow的值不为visible<br>满足上述条件中至少一项，即可触发 BFC</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="1、外边距折叠问题"><a href="#1、外边距折叠问题" class="headerlink" title="1、外边距折叠问题"></a>1、外边距折叠问题</h4><p>折叠的条件：两个元素的 margin 必须是 相邻 的；两个 margin 是邻接的必须满足以下条件：</p><ul><li>必须是处于常规文档流（非float和绝对定位）的块级盒子,并且处于同一个 BFC 当中。</li><li>没有inline盒子，没有空隙，没有 padding 和 border 将他们分隔开。</li><li>都属于垂直方向上相邻的外边距。<br>如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">clss</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s-block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f-block</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s-block</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-622c3f6fc1d8b669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>解决方法：<br>破坏产生折叠的条件即可：<br>1、给元素添加浮动或者绝对定位（会影响整体布局，改动大）<br>2、将元素改为行内元素（会影响整体布局，改动大）<br>3、元素间插入一个高度大于0的div<br>4、使元素不在同一BFC中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--元素间插入一个高度大于0的div--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-block"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:0.01px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s-block"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-abe89b14510dc229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="元素间插入一个高度大于0的div"></div><div class="image-caption">元素间插入一个高度大于0的div</div></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>f-block,s-block以及s-block外层div已经还是处在相同BFC中，所以还是会产生外边距折叠。这里产生的折叠比较复杂：<br>首先是s-block和外层div的外边距折叠，然后是合并后的折叠外边距再与f-block产生外边距折叠。<br>下面解决父子元素的外边距折叠问题：</p><p><strong>给父元素添加padding 或 border（破坏外边距折叠条件）</strong></p><p></p><div class="f-block"></div><p></p><p></p><div style="background-color:red;border:1px solid #000"><br><div class="s-block"></div><br></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](http://upload-images.jianshu.io/upload_images/2125695-d1892c0eba36f877.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**给父元素创建新的块级格式化上下文（创建了新的块级格式化上下文的块元素，不与它的子元素发生margin 折叠）**</span><br><span class="line">```xml</span><br><span class="line">&lt;div class=&quot;f-block&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;background-color:red;overflow:hidden&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;s-block&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-6050f96cc1f7c74d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><h4 id="2、清除浮动"><a href="#2、清除浮动" class="headerlink" title="2、清除浮动"></a>2、清除浮动</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">550px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">  <span class="attribute">background-color</span>:silver;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码，我们希望得到这样的结果：<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-5f14985076b9a5a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><p>但结果却是这样的：<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-86de3ce2fa4746f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><p>原因是因为浮动元素脱离文档流，container的高度无法被撑开。</p><p>清除浮动的方法及原理：</p><p><strong>clear属性</strong>：<br>clear属性的意义就是禁止特定方向上存在浮动元素，例如clear: left就是不允许元素左方存在文档流之前浮动元素（注意，这里左边如果存在文档流之后的浮动元素是无法清理的）<br>根据CSS权威指南，具体的实现原理是通过引入清除区域，这个相当于加了一块看不见的框把定义clear属性的元素向下挤，直到元素指定方向刚好没有浮动元素，这样看起来包含框就把浮动框给包含了，实际上浮动框脱离文本流的性质没变，它们依然是“浮”在上面的<br>用法：<br>1、容器内结尾处加空div标签 clear:both<br>2、容器定义伪类:after 和 zoom(IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题)<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;<span class="attribute">content</span>:<span class="string">""</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">height</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>容器形成新BFC</strong>：<br>计算BFC的高度时，浮动元素也参与计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">550px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">5px</span> solid red;</span><br><span class="line">  <span class="attribute">overfow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使容器自身浮动也可以</p><p>消除浮动引起的文字环绕效果：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span>image<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>信息信息信息信息信息信息信息信息信息信息信息信信息信息信息信息信息信息信息信息信息信息信息信信息信息信息信息信息信息信息信息信息信息信息信信息信息信息信息信息信息信息信息信息信息信息信<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;<span class="attribute">width</span>:<span class="number">210px</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;<span class="attribute">float</span>: left;&#125; </span><br><span class="line"><span class="selector-class">.img</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: <span class="number">#696</span>;<span class="attribute">float</span>: left;&#125; </span><br><span class="line"><span class="selector-class">.info</span> &#123;<span class="attribute">background</span>: <span class="number">#ccc</span>;<span class="attribute">color</span>: <span class="number">#fff</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-6527144ca5ae7997.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>带有浮动属性的元素会脱离标准流进行排列布局，脱离标准流后的元素就不和块元素相处在同一个流不居中，使得带有浮动属性的元素漂浮在正常块元素上面。但是<strong>浮动的块虽然脱离了正常的文档流，但是依然占据正常文档流的文本空间</strong>。于是在其后面写的文本并不会被浮动元素所覆盖而是继续水平排列超出换行。<br>标准流中块元素每个各占一行。内联元素则是水平排列，直到一行排列不下进行换行操作。因为使用了float的元素占据文本空间，使得后面的文本以除了浮动元素之外的空间为排列基准，形成了文本环绕的效果。</p><p>清除环绕效果就是使info形成一个新的BFC（BFC的区域不会与float box重叠），添加overflow:hidden即可。<br>注意：给info绝对定位也会形成一个新的BFC，但是info会按照绝对定位的规则进行布局，会与img重叠。</p><p>参考文章<br><a href="http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html" target="_blank" rel="noopener">深入理解BFC和Margin Collapse</a><br><a href="https://juejin.im/post/583bb606a22b9d006c141286" target="_blank" rel="noopener">细说CSS中的BFC</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;BFC是什么？&quot;&gt;&lt;a href=&quot;#BFC是什么？&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="BFC" scheme="https://jaycewu.site/tags/BFC/"/>
    
      <category term="外边距折叠" scheme="https://jaycewu.site/tags/%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0/"/>
    
      <category term="清除浮动" scheme="https://jaycewu.site/tags/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>一个商品SKU是怎么生成的</title>
    <link href="https://jaycewu.site/2017/03/04/%E4%B8%80%E4%B8%AA%E5%95%86%E5%93%81SKU%E6%98%AF%E6%80%8E%E4%B9%88%E7%94%9F%E6%88%90%E7%9A%84/"/>
    <id>https://jaycewu.site/2017/03/04/一个商品SKU是怎么生成的/</id>
    <published>2017-03-04T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>首先说一说什么是SKU。。。。。。。自己百度去。。。</p><p>类似京东上面，未来人类S5这个台笔记本</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-7c81b33ee95b81b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>都是S5这个型号，但是因为CPU,显卡，内存，硬盘等不同，价格也不一样。CPU,显卡，内存，硬盘等属性组合成的一个唯一的商品，就可以用一个SKU来表示,像图上就有10个SKU。一系列的SKU可以归到一个SPU下进行管理。</p><p>那么一个SKU是怎么生成的呢？下面结合自己的一些经验，说说一些电商平台的大致产品结构以及SKU的生成方式。</p><p>1.阿里速卖通平台,阿里国际站</p><p>这两个平台同一个爸爸，基本差不多。要创建一个商品需要先选一个类目，类目下面挂了一堆的属性，属性上又挂了一堆的属性值。属性分为销售属性和非销售属性（销售属性就是类似颜色，尺寸这些单个SKU独有的，非销售属性就是多个SKU共有的，比如同一个品牌型号“未来人类S5”）。非销售属性有必填和非必填，可以是单选，多选，文本等。销售属性就是构成SKU的关键。比如说有销售属性颜色和尺寸，颜色属性下有很多属性值（红，黄，蓝等等），尺寸（1,2,3,4等等）也是。当颜色选了红，黄，尺寸选了1,2，那么就应该生成2x2=4个SKU，每个SKU有各自的价格，库存等。保存SKU的时候会与对应的销售属性相关联。<br>大致的数据模型如下</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-f229d9a02c3b47db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>当然，实际比这更加复杂（比如产品的图片，单个SKU的图片，多个SKU共同的图片,非销售属性可以自定义添加分类不具有的。。。）</p><p>2.eBay<br>跟上面两个平台类似，创建一个产品也要先选一个分类，分类下面也是有很多属性，属性有很多属性值。。。，不同的地方是eBay没有区分销售属性和非销售属性（或者说全部是非销售属性），也允许添加自定义属性和属性值。eBay上SKU是手动添加的，SKU上的属性(SKU上的属性暂且都叫做销售属性)也是自定义的。比如说添加了一个SKU A,价格和数量这两个是必须的，还可以手动加个颜色属性，然后填上属性值红色。当然，若果增加一个SKU B，那么这个SKU也会有颜色这个属性，属性值可以自定义。最后校验这些SKU的属性值组合起来是否唯一。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-86e5783f51ccd238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>这样的优势就是可以随意控制SKU的数量，如果按照上面两个平台的规则，这里应该有4x4x1=16个SKU。这样自由度更高会不会使结构更加复杂呢？当然是NO，用上面的数据模型就可以搞定</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-432f5db22f1abb53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>3.Lazada,Linio平台<br>国际惯例，先选一个类目，类目下面一堆属性，有必填和非必填，属性下一堆属性值。最大的区别就是，一个产品只有一个SKU，属性不支持自定义。比如说要添加一个商品，有两种颜色，那么只能创建两个产品，这两个产品可能只有图片不一样（颜色不一样，可能没有颜色这个属性来选）</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-02c4fb4b0e3cc8d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>4.Wish平台<br>比较奇特，没有分类，产品有固定的属性，比如标题，描述，运费等。一个产品下可以有多个SKU，SKU的生成取决于固定的两大类属性，两个大类为：颜色和尺寸。比如颜色这个属性就是归类于颜色这个类，其他的属性（品牌，型号，容量等等归为尺寸这个大类）。尺寸类的属性值支持自定义，但只能选一个尺寸类属性（比如选了品牌就不能选容量，选了品牌后可以添加任意值）。两类属性不是必须同时存在，比如颜色选了红，可以不选尺寸类的属性，反之也一样。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-023a5dc66e83b821.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>忘记说了，一个SKU是靠一串唯一编码来标识的，比如1234A，1234B。一般来说一个平台下不会存在两个相同的SKU，或这一个店铺下不会存在两个相同的SKU。</p><p>大致的逻辑和数据模型就这些，接下来说说开发实现方面。</p><p>数据库大致就依靠上面的数据模型进行设计，编辑的时候，后端按照这些关联关系取出数据给到前端（我这边前后端未分离，页面还是后端渲染，但我还是把数据格式化为JSON再渲染到前端），保存的时候再进行相关的逻辑校验。因为后端的一些逻辑操作涉及后公司内部的业务，这里就不细说了。说说前端的具体细节，以速卖通的为例，用的是vue，前端拿到的数据如下</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-6650f4a87748bb03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="属性数据，(变量properties)"></div><div class="image-caption">属性数据，(变量properties)</div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-d1108580038850d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sku数据（变量skus）"></div><div class="image-caption">sku数据（变量skus）</div></figure><p>实现后的粗糙界面</p><p><img src="http://upload-images.jianshu.io/upload_images/2125695-2422c2ed8eea1a79.gif?imageMogr2/auto-orient/strip" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">            properties: properties,</span><br><span class="line">            skus: skus</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>遍历properties，得到材质，颜色，发货地，套餐这些属性对象，接着遍历这些对象里的values属性,得到属性值对象,根据属性对象的selectedValues判断属性值是否选上（因为我是后端渲染的js变量，所以初始化的时候selectedValues里的数据直接引用的属性值对象，如果是非后端渲染的话，要根据skus里的属性和属性值去初始化selectedValues的数据，并且存的是属性值对象的引用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;item.Name&#125;&#125;：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">"value in item.values"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">"value"</span> <span class="attr">v-model</span>=<span class="string">"item.selectedValues"</span>/&gt;</span>&#123;&#123;value.Name&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"list_table"</span> <span class="attr">v-if</span>=<span class="string">"item.Name!='发货地'&amp;&amp;item.selectedValues.length&gt;0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>&#123;&#123;item.Name&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-if</span>=<span class="string">"item.Name=='颜色'"</span>&gt;</span>图片（无图片可以不填）<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"selectedValue in item.selectedValues"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;selectedValue.Name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"selectedValue.DefinitionName"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-if</span>=<span class="string">"item.Name=='颜色'"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>  <span class="attr">style</span>=<span class="string">"width: 63px;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: right"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">rel</span>=<span class="string">"link"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                ![](selectedValue.ImageUrl)</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为selectedValues通过v-model绑定，当选中或取消一个属性值的时候后，selectedValues也会随着改变，selectedValues里的数据是直接引用属性值而不是拷贝一份数据，所以修改selectedValues中的数据也会直接反映到属性值上，实现了属性值的自定义。</p><p>那么怎么根据选中的属性值生成SKU呢？<br>SKU表格处的表头是要根据选中的属性动态更新的，可以这样做<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">"item in properties"</span> <span class="attr">v-if</span>=<span class="string">"item.selectedValues.length&gt;0"</span>&gt;</span>&#123;&#123;item.Name&#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"c_red"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>零售价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"c_red"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>库存<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品编码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>如果属性里的属性值都没有被选中（selectedValues.length==0），就不在表头显示这个属性。</p><p>SKU的初始显示<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"sku in skus"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"item in properties"</span> <span class="attr">v-if</span>=<span class="string">"item.selectedValues.length&gt;0"</span>&gt;</span>&#123;&#123;getValueName(sku,item)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>US $<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sku.SkuPrice"</span> <span class="attr">class</span>=<span class="string">"w50"</span> <span class="attr">maxlength</span>=<span class="string">"9"</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">name</span>=<span class="string">"productUnitTips"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sku.StockQuantity"</span> <span class="attr">class</span>=<span class="string">"w50"</span> <span class="attr">maxlength</span>=<span class="string">"9"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sku.SkuCode"</span> <span class="attr">class</span>=<span class="string">"w180"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>也是利用selectedValues.length让SKU的属性值列数与表头列数保持一致。因为SKU对象里的保存的是属性值Id和属性Id,需要一个方法去获取属性值的值<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getValueName: <span class="function"><span class="keyword">function</span> (<span class="params">sku, property</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> valueName = <span class="string">""</span>;</span><br><span class="line">                $.each(sku.values,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.propertyId == property.Id) &#123;</span><br><span class="line">                                $.each(property.selectedValues, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (_this.valueId == <span class="keyword">this</span>.Id) &#123;</span><br><span class="line">                                        valueName = <span class="keyword">this</span>.Name;</span><br><span class="line">                                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                <span class="keyword">return</span> valueName;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p></p><p>你没有看错，这是JQ。。。</p><p>接下来就是SKU表格的更新了，我的做法是变更整块区域，就是给skus重新赋值。赋的新值从哪来呢？</p><p>将选中的属性值放到一个数组中<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ori = [];</span><br><span class="line"> $.each(vm.properties,</span><br><span class="line">         <span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> selectValues = <span class="keyword">this</span>.selectedValues;</span><br><span class="line">             <span class="keyword">if</span> (selectValues.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 ori.push(selectValues);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><p></p><p>得到这种结构的数组<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 477,</span><br><span class="line">      'Name': '铝',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 529,</span><br><span class="line">      'Name': '帆布',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655809,</span><br><span class="line">      'Name': '壳＋贴膜',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655810,</span><br><span class="line">      'Name': '壳＋挂绳',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>求笛卡尔积后（后面有求笛卡尔积参考链接）<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = descartes(ori);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 477,</span><br><span class="line">      'Name': '铝',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655809,</span><br><span class="line">      'Name': '壳＋贴膜',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 477,</span><br><span class="line">      'Name': '铝',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655810,</span><br><span class="line">      'Name': '壳＋挂绳',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 529,</span><br><span class="line">      'Name': '帆布',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655809,</span><br><span class="line">      'Name': '壳＋贴膜',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 10,</span><br><span class="line">      'Id': 529,</span><br><span class="line">      'Name': '帆布',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      'PropertyId': 200000828,</span><br><span class="line">      'Id': 201655810,</span><br><span class="line">      'Name': '壳＋挂绳',</span><br><span class="line">      'DefinitionName': '',</span><br><span class="line">      'ImageUrl': ''</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大前端也用上了算法有木有，这里需要弄明白拿到的是什么数据，需要的是什么数据，然后就去想实现就OK了。<br>想要的数据已经拿到，重新构建skus<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ret.length; i++) &#123;</span><br><span class="line">           <span class="keyword">var</span> sku = &#123;<span class="attr">SkuCode</span>: <span class="string">""</span>, <span class="attr">SkuPrice</span>: <span class="string">""</span>, <span class="attr">StockQuantity</span>: <span class="string">""</span>&#125;;</span><br><span class="line">           sku.values = [];</span><br><span class="line">           $.each(ret[i],</span><br><span class="line">                   <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                       sku.values.push(&#123;<span class="attr">propertyId</span>: <span class="keyword">this</span>.PropertyId, <span class="attr">valueId</span>: <span class="keyword">this</span>.Id&#125;);</span><br><span class="line">                   &#125;);</span><br><span class="line">           vmSkus.push(sku);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p><p>到此，更新SKU表格的代码已经实现，数据驱动视图更新，很清晰。但是什么时候去触发这个更新呢（何时去重新构建skus）? 很简单嘛，就是勾选或取消勾选属性值的时候去触发更新操作。勾选或取消勾选我们能直接从selectedValues.length上得到反馈，然后使用vue 的watch就可以实现了。但是selectedValues是properties数组中元素的一个属性，vue的watch是无法用在数组元素的某一个字段上的（至少目前我发现是这样的），那么暴力一点，直接watch整个properties数组并且加上deep:true。这样是可以实现，但是当修改自定义属性的时候也会触发变更（业务会提刀来见的）。</p><p>最终解决方案<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">            allCheckedLength:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> length=<span class="number">0</span>;</span><br><span class="line">                $.each(<span class="keyword">this</span>.properties,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    length+=<span class="keyword">this</span>.selectedValues.length;</span><br><span class="line">                &#125;);</span><br><span class="line">               <span class="keyword">return</span> length;</span><br><span class="line">            &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">            <span class="string">'allCheckedLength'</span>: &#123;</span><br><span class="line">                handler: <span class="string">'reBuild'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>reBuild就是重新构建的方法。</p><p><a href="http://codepen.io/JayceWu/pen/dOxLex" target="_blank" rel="noopener">demo</a></p><p><a href="http://coconut-zhang.iteye.com/blog/1709547" target="_blank" rel="noopener">Java 笛卡尔积算法的简单实现</a><br><a href="http://stackoverflow.com/questions/12303989/cartesian-product-of-multiple-arrays-in-javascript/" target="_blank" rel="noopener">Cartesian product of multiple arrays in JavaScript</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;首先说一说什么是SKU。。。。。。。自己百度去。。。&lt;/p&gt;&lt;p&gt;类似京东上面，未来人类S5这个台笔记本&lt;/p
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="sku" scheme="https://jaycewu.site/tags/sku/"/>
    
  </entry>
  
  <entry>
    <title>webpack resolve.alias ProvidePlugin externals</title>
    <link href="https://jaycewu.site/2016/12/27/webpack%20resolve.alias%20ProvidePlugin%20externals/"/>
    <id>https://jaycewu.site/2016/12/27/webpack resolve.alias ProvidePlugin externals/</id>
    <published>2016-12-27T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><blockquote><p>resolve.alias这个配置项相当于为文件目录配置一个别名</p></blockquote><p>比如下面这样的目录结构<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-3636aa829ece4cda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><p>要在main.js中使用jquery,需要这样<code>var $=require(&quot;./lib/jquery&quot;)</code>。如果lib中的库很多，而且目录也很多，使用的时候就要写一长串的地址。</p><p>使用resolve.alias配置如下<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:</span><br><span class="line">  &#123;</span><br><span class="line">    main:<span class="string">'./main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    <span class="comment">//配置别名，在项目中可缩减引用路径</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      jquery: <span class="string">"./lib/jquery"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>使用的时候，这样就可以<code>var $=require(&quot;jquery&quot;);</code><br>配置项中，key值得配置方式也有很多种，更多的可以看<a href="http://webpack.github.io/docs/configuration.html#resolve" target="_blank" rel="noopener">这里</a></p><blockquote><p>resolve.alias使我们不用频繁地写一长串的引用路径，但是使用的时候还是先要require，如果我们懒到require都不想写呢？ProvidePlugin这个插件就派上用场了。</p></blockquote><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack=<span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:</span><br><span class="line">  &#123;</span><br><span class="line">    main:<span class="string">'./main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    <span class="comment">//配置别名，在项目中可缩减引用路径</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      jquery: <span class="string">"./lib/jquery"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">//提供全局的变量，在模块中使用无需用require引入</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">"jquery"</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>因为已经配置的别名，所以<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="attr">$</span>: <span class="string">"jquery"</span> &#125;)</span><br></pre></td></tr></table></figure><p></p><p>就可以，jquery就是我们配置的别名，如果没有配置别名，则要这样写<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="attr">$</span>: <span class="string">"./lib/jquery"</span> &#125;)</span><br></pre></td></tr></table></figure><p></p><p>使用的时候<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>没毛病，但是如果没有配置ProvidePlugin，也没有require,这样写webpack打包的时候是不会报错的，浏览器运行的时候才知道错误。</p><blockquote><p>不管是使用resolve.alias还是ProvidePlugin，打包的时候，webpack都会将使用到的库进行打包。打包的方式可以使用CommonsChunkPlugin这个插件再进行配置（我以前的文章中有写这个插件的详细用法）。如果我们不想webpack打包某个文件，而是直接在页面使用script标签手动引入，或者使用CDN资源的时候，externals这个配置项就起作用了。</p></blockquote><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:</span><br><span class="line">  &#123;</span><br><span class="line">    main:<span class="string">'./main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path:__dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123; <span class="attr">$</span>: <span class="string">"window.jQuery"</span> &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>使用<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">"$"</span>);</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>一定要记得require,不然和不配置externals没区别，不想写可以使用ProvidePlugin<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123; <span class="attr">$</span>: <span class="string">"window.jQuery"</span> &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">//提供全局的变量，在模块中使用无需用require引入</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">"$"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p></p><p>打包后<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-d74bd937b98805bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><br>然后页面上通过script标签手动引入CDN地址或者本地文件地址就行了，需要注意的是引入的顺序和依赖关系，将webpack打包的文件放到后面引入。<p></p><p>其实不使用externals也是可以的，我们看一下不使用externals，直接这样写<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>打包后</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-46b49a86f084eaee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>当我们手动引入JQ后，$肯定是有的，没毛病。但始终感觉这样会给自己挖坑。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;blockquote&gt;&lt;p&gt;resolve.alias这个配置项相当于为文件目录配置一个别名&lt;/p&gt;&lt;/block
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://jaycewu.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>聊聊浏览器的渲染机制</title>
    <link href="https://jaycewu.site/2016/12/17/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://jaycewu.site/2016/12/17/聊聊浏览器的渲染机制/</id>
    <published>2016-12-17T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><blockquote><p>本文中浏览器特指Chrome浏览器</p></blockquote><p>开始之前说说几个概念，以及在准备写这篇文章之前对浏览器的渲染机制的了解：</p><blockquote><p>DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。<br>CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构<br>Render Tree：DOM 和 CSSOM 合并后生成 Render Tree(Render Tree 和DOM一样，以多叉树的形式保存了每个节点的css属性、节点本身属性、以及节点的孩子节点，display:none 的节点不会被加入 Render Tree，而 visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为 display:none 是更优的。)</p></blockquote><p>查阅了一些关于浏览器渲染机制的文章后，得到以下比较重要或者有争议性的观点：</p><blockquote><p>1.<strong>Create/Update DOM And request css/image/js</strong>：浏览器请求到HTML代码后，在生成DOM的最开始阶段（应该是 Bytes → characters 后），并行发起css、图片、js的请求，无论他们是否在HEAD里。<em>注意：发起 js 文件的下载 request 并不需要 DOM 处理到那个 script 节点，比如：简单的正则匹配就能做到这一点，虽然实际上并不一定是通过正则：）。这是很多人在理解渲染机制的时候存在的误区。</em><br>2.<strong>Create/Update Render CSSOM</strong>：CSS文件下载完成，开始构建CSSOM<br>3.<strong>Create/Update Render Tree</strong>：所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。<br>4.<strong>Layout</strong>：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置。<br>5.<strong>Painting</strong>：Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。</p></blockquote><p><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="noopener">出处</a></p><blockquote><p>浏览器的主要组件为 (1.1)：<br>1.<strong>用户界面</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。<br>2.<strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。<br>3.<strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。<br>4.<strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。<br>5.<strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。<br>6.<strong>JavaScript 解释器</strong>。用于解析和执行 JavaScript 代码。<br>7.<strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。<br>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p></blockquote><blockquote><p><strong>主流程</strong><br>呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。<br>然后进行如下所示的基本流程：<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/flow.png" alt></div><div class="image-caption"></div></figure><br>呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的 DOM 节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：呈现树。<br>呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。<br>呈现树构建完毕之后，进入“布局”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是绘制 - 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。<br>需要着重指出的是，这是一个<strong>渐进</strong>的过程。为达到更好的用户体验，呈现引擎会力求尽快将内容显示在屏幕上。它<strong>不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局</strong>。在<strong>不断接收和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来</strong>。<p></p></blockquote><blockquote><p><strong>解析算法</strong><br>HTML 无法用常规的自上而下或自下而上的解析器进行解析。<br>原因在于：<br>1.语言的宽容本质。<br>2.浏览器历来对一些常见的无效 HTML 用法采取包容态度。<br>3.解析过程需要不断地反复。源内容在解析过程中通常不会改变，但是在 HTML 中，脚本标记如果包含 document.write，就会添加额外的标记，这样解析过程实际上就更改了输入内容。<br>由于不能使用常规的解析技术，浏览器就创建了自定义的解析器来解析 HTML</p></blockquote><blockquote><p><strong>处理脚本和样式表的顺序</strong><br><strong>脚本</strong><br>网络的模型是同步的。网页作者希望解析器遇到<code>&lt;script&gt;</code>标记时立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在 HTML4 和 HTML5 规范中进行了指定。作者也可以将脚本标注为“defer”，这样它就不会停止文档解析，而是等到解析结束才执行。HTML5 增加了一个选项，可将脚本标记为异步，以便由其他线程解析和执行。<br><strong>预解析</strong><br>WebKit 和 Firefox 都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。请注意，预解析器不会修改 DOM 树，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。<br><strong>样式表</strong><br>另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改 DOM 树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去是一个非典型案例，但事实上非常普遍。Firefox 在样式表加载和解析的过程中，会禁止所有脚本。而对于 WebKit 而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。<br><strong>呈现树构建</strong><br>在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p></blockquote><p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_order_of_processing_scripts_and_style_sheets" target="_blank" rel="noopener">出处</a></p><p>根据以上长篇大论，可以归结为以下几点：</p><blockquote><p><strong><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="noopener">文章一</a></strong>：<br>1.浏览器请求到html结构后，并发请求js,css,图片等资源，并不是解析到相应节点才去发送网络请求。</p></blockquote><blockquote><p><strong><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_order_of_processing_scripts_and_style_sheets" target="_blank" rel="noopener">文章二</a></strong>：<br>1.HTML解析为dom树，不是简单的自上而下，而是需要不断地反复，比如解析到脚本标签，脚本修改之前已经解析的dom，这就要往回重新解析一遍<br>2.HTML 解析一部分就显示一部分（不管样式表是否已经下载完成）<br>3.<code>&lt;script&gt;</code>标记会阻塞文档的解析(DOM树的构建)直到脚本执行完，如果脚本是外部的，需等到脚本下载并执行完成才继续往下解析。<br>4.外部资源是解析过程中预解析加载的(脚本阻塞了解析，其他线程会解析文档的其余部分，找出并加载)，而不是一开始就一起请求的(实际上看起来也是并发请求的，因为请求不相互依赖)</p></blockquote><p>为了直观的观察浏览器加载和渲染的细节，本地用nodejs搭建一个简单的HTTP Server。<br>server.js:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url == <span class="string">'/a.js'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'a.js'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                res.write(data);</span><br><span class="line">                res.end()</span><br><span class="line">            &#125;, <span class="number">10000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">'/b.js'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'b.js'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">            res.write(data);</span><br><span class="line">            res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">'/style.css'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'style.css'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/css'</span>&#125;);</span><br><span class="line">            res.write(data);</span><br><span class="line">            res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">'/index.html'</span>) &#123;</span><br><span class="line">        fs.readFile(<span class="string">'index.html'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">            res.write(data);</span><br><span class="line">            res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port, hostname, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running at '</span> + hostname);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>index.html:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>可以看到，服务端将对a.js的请求延迟10秒返回。</p><p>Server启动后，在chrome浏览器中打开<a href="http://127.0.0.1:8080/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/index.html</a></p><h4 id="外部资源是如何请求的"><a href="#外部资源是如何请求的" class="headerlink" title="外部资源是如何请求的"></a>外部资源是如何请求的</h4><p>看一下TimeLine</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-c94bff6f56b4d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>可以看到，第一次解析html的时候，外部资源好像是一起请求的，最后一次Finish Loading是a.js的，因为服务端延迟的10秒钟。文章二中说资源是预解析加载的，就是说style.css和b.js是a.js造成阻塞的时候才发起的请求，图中也是可以解释得通，因为第一次Parse HTML的时候就遇到阻塞，然后预解析就去发起请求，所以看起来是一起请求的。<br>将index.html内容增加足够多，并且在最后面才加入script:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>重复<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>重复<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">....</span><br><span class="line">....重复5000行</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>多刷新几次，查看TimeLine</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-a083e77f86cbdd64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-969ad259436c806f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>可以发现，当html内容太多的时候，浏览器需要分段接收，解析的时候也要分段解析。还可以看到，请求资源的时机是无法确定的，但肯定不是同时请求的，也不是解析到指定标签的时候才去请求，浏览器会自行判断，如果当前操作比较耗时，就会去加载后面的资源。</p><h4 id="HTML-是否解析一部分就显示一部分"><a href="#HTML-是否解析一部分就显示一部分" class="headerlink" title="HTML 是否解析一部分就显示一部分"></a>HTML 是否解析一部分就显示一部分</h4><p>修改 index.html：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-158f157de2dcfe94.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>因为a.js的延迟，解析到a.js所在的script标签的时候，a.js还没有下载完成，阻塞并停止解析，之前解析的已经绘制显示出来了。当a.js下载完成并执行完之后继续后面的解析。当然，浏览器不是解析一个标签就绘制显示一次，当遇到阻塞或者比较耗时的操作的时候才会先绘制一部分解析好的。</p><h4 id="script标签的位置对HTML解析有什么影响"><a href="#script标签的位置对HTML解析有什么影响" class="headerlink" title="script标签的位置对HTML解析有什么影响"></a><code>script</code>标签的位置对HTML解析有什么影响</h4><p>修改index.html：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-26b26dfb7981d3f6.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>还是因为a.js的阻塞使得解析停止，a.js下载完成之前，页面无法显示任何东西。<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-f0832497c722b2ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><br>整个处理过程中，Parse HTML 3次，计算元素样式1次，页面布局计算1次，绘制一次。<p></p><p>修改index.html：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-3cc4c4bf49217436.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>解析到a.js部分的时候，页面要显示的东西已经解析完了，a.js不会影响页面的呈现速度。<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e794dfa1aac30651.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><br>整个处理过程中，Parse HTML 3次，计算元素样式2次，页面布局计算1次，绘制一次。<p></p><p>修改index.html<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/b.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-0dcaaf21c8a38aa5.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>阻塞后面的解析，导致不能很快的显示。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-3dce52c52ab84223.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>整个处理过程中，Parse HTML 3次，计算元素样式2次，页面布局计算2次，绘制2次。<br>可以发现浏览器优化得非常好，当阻塞在a.js的时候，现将已经解析的部分显示（计算元素样式，布局排版，绘制），当a.js下载好后接着解析和显示后面的（因为a.js后面还有要显示到页面上的元素，所以还需要进行1次计算元素样式，布局排版，绘制）</p><p>修改index.html<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"hh"</span>).style.height=<span class="string">"200px"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>a.js阻塞的时候，排版，绘制1次；a.js下载完后重排，重绘一次；修改DOM,引起重排，重绘一次。是不是这样呢？看下图<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-a1003e53325edcdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p></p><p>事实是修改DOM并没有引起重排，重绘。因为浏览器将a.js下载完成并执行后的一次重排和重绘与修改DOM本应该导致的重排和重绘积攒一批，然后做一次重排，重绘</p><blockquote><p>浏览器是聪明的，它不会你每改一次样式，它就reflow或repaint一次。<strong>一般来说，浏览器会把这样的操作积攒一批，然后做一次reflow，这又叫异步reflow或增量异步reflow</strong>。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行reflow。</p></blockquote><h4 id="css文件的影响"><a href="#css文件的影响" class="headerlink" title="css文件的影响"></a>css文件的影响</h4><p>服务端将style.css的相应也设置延迟。<br>修改index.html：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e422b46948376311.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>可以看出来，css文件不会阻塞HTML解析，但是会阻塞渲染，导致css文件未下载完成之前已经解析好html也无法先显示出来。</p><p>接着修改index.html：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>同样阻塞渲染</p><p>修改index.html<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://127.0.0.1:8080/a.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>注意media=”print”<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-c3e40d64eb51ddbe.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><br>因为指定了media=”print”，样式不起作用，不会阻塞渲染。<p></p><blockquote><link href="style.css" rel="stylesheet"></blockquote><p><link href="style.css" rel="stylesheet" media="all"></p><p>&lt;link href=”portrait.css” rel=”stylesheet media=”orientation:portrait”&gt;</p><p><link href="print.css" rel="stylesheet" media="print"><br>第一条声明阻塞渲染，匹配所有情况。<br>第二条声明一样阻塞渲染：”all” 是默认类型，如果你未指定任何类型，则默认为 “all”。因此，第一条声明和第二条声明实际上是一样的。<br>第三条声明有一条动态媒体查询，在页面加载时判断。根据页面加载时设备的方向，portrait.css 可能阻塞渲染，也可能不阻塞。<br>最后一条声明只适用打印，因此，页面在浏览器中首次加载时，不会阻塞渲染。</p><p>但是。。。看一下火狐的表现<br></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-f89c59117b544bb1.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p></p><h4 id="图片资源的影响"><a href="#图片资源的影响" class="headerlink" title="图片资源的影响"></a>图片资源的影响</h4><p>修改index.html<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache,no-store, must-revalidate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://127.0.0.1:8080/style.css"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'hh'</span>&gt;</span>1111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">[站外图片上传中……(2)]</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3333333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>图片比较大，2M多，但服务端还是要延迟10秒响应。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-885f25070824c811.gif?imageMogr2/auto-orient/strip" alt></div><div class="image-caption"></div></figure><p>图片既不阻塞解析，也不阻塞渲染。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e5e8e2a262aeaba7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-045480359bdfb725.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://upload-images.jianshu.io/upload_images/2125695-e53be79aa842709d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></div><div class="image-caption"></div></figure><p>图片未请求回来之前，先进行一次layout和paint，paint的范围就是页面初始的可视区域。当返回一部分图片信息后（估计是得到了图片的尺寸），再进行一次layout和paint,paint的范围受到图片尺寸的影响。当图片信息全部返回时，最后进行一次paint。<br>如果固定img的宽高，当返回一部分图片信息后，不会再layout，但仍会paint一次。<br>补充：图片用作背景（不是写在CSS文件内）是在Recalculate Style的时候才发起的请求，layout、paint次数和固定宽高的img一样。背景图属性写在CSS文件里，则CSS文件下载并执行Recalculate Style的时候才会请求图片。</p><p>参考</p><blockquote><p><a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="noopener">浏览器的渲染原理简介</a><br><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_order_of_processing_scripts_and_style_sheets" target="_blank" rel="noopener">浏览器的工作原理：新式网络浏览器幕后揭秘</a><br><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="noopener">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制</a><br><a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="noopener">https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html</a><br><a href="https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/render-blocking-css" target="_blank" rel="noopener">https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/render-blocking-css</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;blockquote&gt;&lt;p&gt;本文中浏览器特指Chrome浏览器&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;开始之前说说
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="渲染机制" scheme="https://jaycewu.site/tags/%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>npm小结</title>
    <link href="https://jaycewu.site/2016/11/22/npm%E5%B0%8F%E7%BB%93/"/>
    <id>https://jaycewu.site/2016/11/22/npm小结/</id>
    <published>2016-11-22T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><h3 id="修改公共仓库地址"><a href="#修改公共仓库地址" class="headerlink" title="修改公共仓库地址"></a>修改公共仓库地址</h3><p>windows下，修改C:\Users\Administrator下的文件.npmrc，将registry改为淘宝镜像地址，registry=<a href="https://registry.npm.taobao.org/。" target="_blank" rel="noopener">https://registry.npm.taobao.org/。</a></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>项目根目录下执行命令行<code>npm init</code>，各种参数根据自己需求填写，生成package.json文件。</p><h3 id="发布自己的npm包"><a href="#发布自己的npm包" class="headerlink" title="发布自己的npm包"></a>发布自己的npm包</h3><p>在 npm 官网 <a href="https://www.npmjs.org/" target="_blank" rel="noopener">https://www.npmjs.org</a> 申请一个账号。</p><p><code>npm init</code>后，添加要发布的包的相关内容（什么都不加也是可以发布的）。</p><p>命令行执行<code>npm adduser --registry http://registry.npmjs.org</code>，输入npm官网申请的账户名，密码和邮箱（因为公共npm仓库已经改为淘宝镜像地址，所以<code>--registry http://registry.npmjs.org</code>不能省略）。</p><p>执行<code>npm publish --registry http://registry.npmjs.org</code>将包发布到npm上。登录到npm官网，点击右上角头像，选中Profile就可以看到发布的包。</p><h3 id="更新已经发布的包"><a href="#更新已经发布的包" class="headerlink" title="更新已经发布的包"></a>更新已经发布的包</h3><p>修改相关的内容后，修改包目录下的package.json文件，修改version版本号，比如之前是1.0.0，修改为2.0.0。然后执行<code>npm publish --registry http://registry.npmjs.org</code>就可以将包更新到npm上。<br>npm install<br>全局安装<code>npm install 包名称 -g</code></p><p>本地安装,并更新package.json的dependencies<code>npm install 包名称 --save</code>。</p><p>本地安装,并更新package.json的devDependencies<code>npm install 包名称 --save-dev</code>。<br>pm update失败<br>比如说之前我们发布到npm上的包名称npm-test,版本为1.0.0，未更新之前<code>npm install npm-test --save-dev</code>安装的就是1.0.0版本的。新发布了一个可用的版本2.0.0后，想更新到最新的版本，运行<code>npm update npm-test</code>,不起作用。原因是因为npm规定了<a href="https://docs.npmjs.com/misc/semver#prerelease-identifiers" target="_blank" rel="noopener">https://docs.npmjs.com/misc/semver#prerelease-identifiers</a>，看不太懂，只知道是这个原因☹</p><h3 id="dependencies和devDependencies的区别"><a href="#dependencies和devDependencies的区别" class="headerlink" title="dependencies和devDependencies的区别"></a>dependencies和devDependencies的区别</h3><p>当我们适用别人的包的时候，经常会疑惑，是该<code>npm install xxx --save</code>还是<code>npm install xxx --save-dev</code>。前者是安装包并且更新package.json的dependencies，后者是安装包并更新package.json的devDependencies，如果只是使用别人的包，而不将包发布到npm上，两种方式都可以正常使用。但是当我们要把我们的包发布到npm上时，一定要区分好dependencies和devDependencies的区别。<br>比方说我们之前发布的npm-test包，包中需要使用了vue，那是要执行<code>npm install vue --save</code>还是<code>npm install vue --save-dev</code>呢？当别人使用我们这个包的时候，前提vue这个包已经安装了，但是用户不会去看我们的包依赖哪些包，然后一一得手动去安装这些依赖包。所以当用户 <code>npm insall npm-test --save</code>要使用我们这个包的时候，应该也要自动安装vue这个包。而当我们的包中安装vue的时候，使用<code>npm install vue --save</code>就可以了，用户使用我们的包的时候，也会安装vue这个包。如果我们包的相关的功能代码是用es6写的，并且安装了babel,webpack等相关的包，这些包的安装应该使用<code>npm install vue --save-dev</code>，当用户使用我们的包的时候，不会安装这些包。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;修改公共仓库地址&quot;&gt;&lt;a href=&quot;#修改公共仓库地址&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="npm" scheme="https://jaycewu.site/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>vue-curd</title>
    <link href="https://jaycewu.site/2016/09/20/vue-curd/"/>
    <id>https://jaycewu.site/2016/09/20/vue-curd/</id>
    <published>2016-09-20T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --><p>一个简单的vue 增删改查的例子。[在线地址][1]<br>html:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"searchQuery"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">grid-s</span> <span class="attr">:list</span>=<span class="string">"list"</span> <span class="attr">:colums</span>=<span class="string">"colums"</span> <span class="attr">:search-Query</span>=<span class="string">"searchQuery"</span>&gt;</span><span class="tag">&lt;/<span class="name">grid-s</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"grid-tpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dialog-s</span> <span class="attr">:index</span>=<span class="string">"index"</span> <span class="attr">:mode</span>=<span class="string">"mode"</span> <span class="attr">:fields</span>=<span class="string">"colums"</span> <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">:item</span>=<span class="string">"item"</span> @<span class="attr">create-item</span>=<span class="string">"createItem"</span> @<span class="attr">modify-item</span>=<span class="string">"modifyItem"</span>&gt;</span><span class="tag">&lt;/<span class="name">dialog-s</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">"col in colums"</span>&gt;</span></span><br><span class="line">          &#123;&#123;col.title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(index,item) in list|filterBy searchQuery"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"col in colums"</span>&gt;</span></span><br><span class="line">          &#123;&#123;item[col.title]&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"openModifyItemDialog(item,index)"</span>  <span class="attr">class</span>=<span class="string">"btn btn-success btn-xs"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"delItem(index)"</span>  <span class="attr">class</span>=<span class="string">"btn btn-danger btn-xs"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> @<span class="attr">click</span>=<span class="string">"openNewItemDialog('新增')"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"dialog-tpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialogs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog"</span> <span class="attr">:class</span>=<span class="string">"&#123;'dialog-active':show&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"dialog-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"dialog-title"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"field in fields"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;field.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"item[field.title]"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-btn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"save"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"close"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>css<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line"><span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"><span class="attribute">perspective</span>: <span class="number">1300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-active</span> &#123;</span><br><span class="line"><span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-active</span> <span class="selector-class">.dialog-content</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-active</span> ~ <span class="selector-class">.dialog-mask</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-content</span> &#123;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.1);</span><br><span class="line"><span class="attribute">transition</span>: .<span class="number">5s</span> ease-in-out;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-70deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-header</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0090d3</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-title</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-body</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-footer</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dialog-mask</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line"><span class="attribute">transition</span>: all .<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-horizontal</span> <span class="selector-class">.form-group</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"grid-s"</span>,&#123;</span><br><span class="line">  template:<span class="string">"#grid-tpl"</span>,</span><br><span class="line">  props:[<span class="string">"list"</span>,<span class="string">"colums"</span>,<span class="string">"searchQuery"</span>],</span><br><span class="line">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      mode:<span class="number">0</span>,</span><br><span class="line">      item:&#123;&#125;,</span><br><span class="line">      title:<span class="string">""</span>,</span><br><span class="line">      index:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    openNewItemDialog:<span class="function"><span class="keyword">function</span>(<span class="params">title</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.title=title;</span><br><span class="line">      <span class="keyword">this</span>.mode=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">this</span>.item=&#123;&#125;;</span><br><span class="line">      <span class="keyword">this</span>.$broadcast(<span class="string">'showDialog'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    createItem:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.item);</span><br><span class="line">      <span class="keyword">this</span>.$broadcast(<span class="string">'showDialog'</span>, <span class="literal">false</span>);</span><br><span class="line">      wilddog.set(item);</span><br><span class="line">      <span class="keyword">this</span>.item = &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    delItem:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.list.splice(index,<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    modifyItem:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> <span class="keyword">this</span>.item) &#123;</span><br><span class="line">           <span class="keyword">this</span>.list[<span class="keyword">this</span>.index][j] = <span class="keyword">this</span>.item[j]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.$broadcast(<span class="string">'showDialog'</span>, <span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">this</span>.item = &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    openModifyItemDialog:<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.title=<span class="string">"Edit "</span>+item.title;</span><br><span class="line">      <span class="keyword">this</span>.mode=<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">this</span>.item=_.cloneDeep(item);</span><br><span class="line">      <span class="keyword">this</span>.index=index;</span><br><span class="line">      <span class="keyword">this</span>.$broadcast(<span class="string">'showDialog'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">"dialog-s"</span>:&#123;</span><br><span class="line">      template:<span class="string">"#dialog-tpl"</span>,</span><br><span class="line">      props:[<span class="string">"mode"</span>,<span class="string">"title"</span>,<span class="string">"fields"</span>,<span class="string">"item"</span>,<span class="string">"index"</span>],</span><br><span class="line">      data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          show:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        close:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.show=<span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        save:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.mode==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$dispatch(<span class="string">'create-item'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$dispatch(<span class="string">'modify-item'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      events:&#123;</span><br><span class="line">        <span class="string">'showDialog'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">show</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.show = show;</span><br><span class="line">                &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> demo=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    searchQuery:<span class="string">''</span>,</span><br><span class="line">    colums:[&#123;<span class="attr">title</span>:<span class="string">"title"</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">"sku"</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">"price"</span>&#125;],</span><br><span class="line">    list:[&#123;</span><br><span class="line">      title:<span class="string">"sony"</span>,</span><br><span class="line">      sku:<span class="string">"23232323A"</span>,</span><br><span class="line">      price:<span class="number">5000</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      title:<span class="string">"Apple"</span>,</span><br><span class="line">      sku:<span class="string">"45454545A"</span>,</span><br><span class="line">      price:<span class="number">6000</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p><a href="http://codepen.io/JayceWu/pen/pbkYEA" target="_blank" rel="noopener">demo</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:57 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;一个简单的vue 增删改查的例子。[在线地址][1]&lt;br&gt;html:&lt;br&gt;&lt;/p&gt;&lt;figure clas
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://jaycewu.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>简要分析webpack打包后代码</title>
    <link href="https://jaycewu.site/2016/09/04/%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90webpack%E6%89%93%E5%8C%85%E5%90%8E%E4%BB%A3%E7%A0%81/"/>
    <id>https://jaycewu.site/2016/09/04/简要分析webpack打包后代码/</id>
    <published>2016-09-04T00:00:00.000Z</published>
    <updated>2019-05-15T16:05:35.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --><p>开门见山</p><h3 id="1-打包单一模块"><a href="#1-打包单一模块" class="headerlink" title="1.打包单一模块"></a>1.打包单一模块</h3><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">"./chunk1.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>chunk1.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br></pre></td></tr></table></figure><p></p><p>打包后，main.js(webpack生成的一些注释已经去掉)<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"> <span class="comment">// The module cache</span></span><br><span class="line"> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"> <span class="comment">// The require function</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Check if module is in cache</span></span><br><span class="line"> <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"> exports: &#123;&#125;,</span><br><span class="line"> id: moduleId,</span><br><span class="line"> loaded: <span class="literal">false</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// Execute the module function</span></span><br><span class="line"> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"> <span class="comment">// Flag the module as loaded</span></span><br><span class="line"> <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"> <span class="comment">// Return the exports of the module</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"> __webpack_require__.m = modules;</span><br><span class="line"> <span class="comment">// expose the module cache</span></span><br><span class="line"> __webpack_require__.c = installedModules;</span><br><span class="line"> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"> __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"> <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"> &#125;)([<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>这其实就是一个立即执行函数，简化一下就是：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">module</span>)</span>&#123;&#125;)([<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>OK,看一下自运行的匿名函数里面干了什么：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"> <span class="comment">// modules就是一个数组，元素就是一个个函数体，就是我们声明的模块</span></span><br><span class="line"> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"> <span class="comment">// The require function</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"> __webpack_require__.m = modules;</span><br><span class="line"> <span class="comment">// expose the module cache</span></span><br><span class="line"> __webpack_require__.c = installedModules;</span><br><span class="line"> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"> __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"> <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><p>整个函数里就声明了一个变量installedModules 和函数<strong>webpack_require</strong>，并在函数上添加了一个m,c,p属性，m属性保存的是传入的模块数组，c属性保存的是installedModules变量，P是一个空字符串。最后执行<strong>webpack_require</strong>函数，参数为零，并将其执行结果返回。下面看一下<strong>webpack_require</strong>干了什么：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">//moduleId就是调用是传入的0</span></span><br><span class="line"> <span class="comment">// installedModules[0]是undefined,继续往下</span></span><br><span class="line"> <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"> <span class="comment">// module就是&#123;exports: &#123;&#125;,id: 0,loaded: false&#125;</span></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"> exports: &#123;&#125;,</span><br><span class="line"> id: moduleId,</span><br><span class="line"> loaded: <span class="literal">false</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 下面接着分析这个</span></span><br><span class="line"> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"> <span class="comment">// 表明模块已经载入</span></span><br><span class="line"> <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"> <span class="comment">// 返回module.exports(注意modules[moduleId].call的时候module.exports会被修改)</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><p>接着看一下modules[moduleId].call(module.exports, module, module.exports, <strong>webpack_require</strong>)，其实就是<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules[moduleId].call(&#123;&#125;, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__)</span><br></pre></td></tr></table></figure><p></p><p>对call不了解当然也可以认为是这样(但是并不是等价，call能确保当模块中使用this的时候，this是指向module.exports的)：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">a</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="built_in">module</span>, exports,__webpack_require__);</span><br></pre></td></tr></table></figure><p></p><p>传入的module就是{exports: {},id: 0,loaded: false}，exports就是{}，<strong>webpack_require</strong>就是声明的<strong>webpack_require</strong>函数(传入这个函数有什么用呢，第二节将会介绍)；<br>运行后module.exports就是{chunk1:1}。所以当我们使用chunk1这个模块的时候（比如var chunk1=require(“chunk1”),得到的就是一个对象{chunk1:1}）。如果模块里没有exports.chunk1=chunk1或者module.exports=chunk1得到的就是一个空对象{}</p><h3 id="2-使用模块"><a href="#2-使用模块" class="headerlink" title="2.使用模块"></a>2.使用模块</h3><p>上面我们已经分析了webpack是怎么打包一个模块的（入口文件就是一个模块），现在我们来看一下使用一个模块，然后使用模块的文件作为入口文件<br>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">"./main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunk1=<span class="built_in">require</span>(<span class="string">"./chunk1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br></pre></td></tr></table></figure><p></p><p>打包后<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">// The module cache</span></span><br><span class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">// The require function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="keyword">if</span> (installedModules[moduleId])</span><br><span class="line"><span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: moduleId,</span><br><span class="line">loaded: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">__webpack_require__.m = modules;</span><br><span class="line"><span class="comment">// expose the module cache</span></span><br><span class="line">__webpack_require__.c = installedModules;</span><br><span class="line"><span class="comment">// __webpack_public_path__</span></span><br><span class="line">__webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;)([<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chunk1 = <span class="number">1</span>;</span><br><span class="line">exports.chunk1 = chunk1;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>不一样的地方就是自执行函数的参数由<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123; <span class="keyword">var</span> chunk1=<span class="number">1</span>; exports.chunk1=chunk1;&#125;]</span><br></pre></td></tr></table></figure><p></p><p>变为<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chunk1 = <span class="number">1</span>;</span><br><span class="line">exports.chunk1 = chunk1;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p></p><p>其实就是多了一个main模块，不过这个模块没有导出项，而且这个模块依赖于chunk1模块。所以当运行<strong>webpack_require</strong>(0)的时候，main模块缓存到installedModules[0]上，modules[0].call(也就是调用main模块)的时候，chunk1被缓存到installedModules[1]上，并且导出对象{chunk1：1}给模块main使用</p><h3 id="3-重复使用模块"><a href="#3-重复使用模块" class="headerlink" title="3.重复使用模块"></a>3.重复使用模块</h3><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">"./main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunk1=<span class="built_in">require</span>(<span class="string">"./chunk1"</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2=<span class="built_in">require</span>(<span class="string">".chunlk2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line"><span class="built_in">console</span>.log(chunk2);</span><br></pre></td></tr></table></figure><p></p><p>chunk1.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunk2=<span class="built_in">require</span>(<span class="string">"./chunk2"</span>);</span><br><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br></pre></td></tr></table></figure><p></p><p>chunk2.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunk2=<span class="number">1</span>;</span><br><span class="line">exports.chunk2=chunk2;</span><br></pre></td></tr></table></figure><p></p><p>打包后<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">// The module cache</span></span><br><span class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">// The require function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="keyword">if</span> (installedModules[moduleId])</span><br><span class="line"><span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: moduleId,</span><br><span class="line">loaded: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">__webpack_require__.m = modules;</span><br><span class="line"><span class="comment">// expose the module cache</span></span><br><span class="line">__webpack_require__.c = installedModules;</span><br><span class="line"><span class="comment">// __webpack_public_path__</span></span><br><span class="line">__webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;)([<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2 = __webpack_require__(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line"><span class="built_in">console</span>.log(chunk2);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> chunk1 = <span class="number">1</span>;</span><br><span class="line">exports.chunk1 = chunk1;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk2 = <span class="number">1</span>;</span><br><span class="line">exports.chunk2 = chunk2;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>不难发现，当需要重复使用模块的时候，缓存变量installedModules 就起作用了</p><h3 id="4-多个打包入口"><a href="#4-多个打包入口" class="headerlink" title="4.多个打包入口"></a>4.多个打包入口</h3><p>不管是单一模块还是重复模块，和以上两种一样</p><h3 id="5-入口参数为数组"><a href="#5-入口参数为数组" class="headerlink" title="5.入口参数为数组"></a>5.入口参数为数组</h3><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:[<span class="string">'./main.js'</span>,<span class="string">'./main1.js'</span>],</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>打包后<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = __webpack_require__(<span class="number">3</span>);</span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br><span class="line"><span class="comment">/***/</span> &#125;,</span><br><span class="line"><span class="comment">/* 3 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">2</span>);</span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]</span><br></pre></td></tr></table></figure><p></p><p>这里只截取自执行匿名函数的参数，因为其他代码与之前一样。可以看到1就是main默模块，2就是chunk1模块，3就是mian1模块，0的作用就是运行模块mian,mian1,然后将main1模块导出（main1中没有导出项，所以到导出{}），总结一下：入口参数是字符串不管是多入口还是单入口，最后都会将入口模块的导出项导出,没有导出项就导出{}，而入口参数是数组，就会将最后一个模块导出（webpackg官网有说明）</p><h3 id="6-使用CommonsChunkPlugin插件"><a href="#6-使用CommonsChunkPlugin插件" class="headerlink" title="6.使用CommonsChunkPlugin插件"></a>6.使用CommonsChunkPlugin插件</h3><p>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">'./main.js'</span>,</span><br><span class="line">        main1: <span class="string">'./main1.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">"common"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>main mian1中都require了chunk1,所以chunk1会被打包到common。<br>打包后，common.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line"><span class="keyword">var</span> parentJsonpFunction = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>];</span><br><span class="line"><span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules</span>) </span>&#123;</span><br><span class="line"><span class="comment">// add "moreModules" to the modules object,</span></span><br><span class="line"><span class="comment">// then flag all "chunkIds" as loaded and fire callback</span></span><br><span class="line"><span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">chunkId = chunkIds[i];</span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId])</span><br><span class="line">callbacks.push.apply(callbacks, installedChunks[chunkId]);</span><br><span class="line">installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">modules[moduleId] = moreModules[moduleId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="keyword">while</span> (callbacks.length)</span><br><span class="line">callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="keyword">if</span> (moreModules[<span class="number">0</span>]) &#123;</span><br><span class="line">installedModules[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// The module cache</span></span><br><span class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">// object to store loaded and loading chunks</span></span><br><span class="line"><span class="comment">// "0" means "already loaded"</span></span><br><span class="line"><span class="comment">// Array means "loading", array contains callbacks</span></span><br><span class="line"><span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="number">2</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// The require function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="keyword">if</span> (installedModules[moduleId])</span><br><span class="line"><span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: moduleId,</span><br><span class="line">loaded: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This file contains only the entry chunk.</span></span><br><span class="line"><span class="comment">// The chunk loading function for additional chunks</span></span><br><span class="line">__webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId, callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">// "0" is the signal for "already loaded"</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> callback.call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="comment">// an array means "currently loading".</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">installedChunks[chunkId].push(callback);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// start chunk loading</span></span><br><span class="line">installedChunks[chunkId] = [callback];</span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">script.async = <span class="literal">true</span>;</span><br><span class="line">script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">"."</span> + (&#123; <span class="string">"0"</span>: <span class="string">"main"</span>, <span class="string">"1"</span>: <span class="string">"main1"</span> &#125;[chunkId] || chunkId) + <span class="string">".js"</span>;</span><br><span class="line">head.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">__webpack_require__.m = modules;</span><br><span class="line"><span class="comment">// expose the module cache</span></span><br><span class="line">__webpack_require__.c = installedModules;</span><br><span class="line"><span class="comment">// __webpack_public_path__</span></span><br><span class="line">__webpack_require__.p = <span class="string">""</span>;</span><br><span class="line">&#125;)([, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = <span class="number">1</span>;</span><br><span class="line">exports.chunk1 = chunk1;</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">0</span>],[<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line"> &#125;]);</span><br></pre></td></tr></table></figure><p></p><p>main1.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">1</span>],[<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>与之前相比，多了webpackJsonp函数，立即执行的匿名函数没有立即调用<strong>webpack_require</strong>(0)。看一下webpackJsonp：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentJsonpFunction = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>];</span><br><span class="line"><span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules</span>) </span>&#123;</span><br><span class="line"><span class="comment">//moreModules为独立chunk代码，chunkIds标记独立chunk唯一性避免按需加载时重复加载</span></span><br><span class="line"><span class="comment">//以main.js中代码为例，chunkIds为[0],moreModules为</span></span><br><span class="line"><span class="comment">//[function(module, exports, __webpack_require__) &#123;</span></span><br><span class="line"><span class="comment">//var chunk1=__webpack_require__(1);</span></span><br><span class="line"><span class="comment">//console.log(chunk1);</span></span><br><span class="line"><span class="comment">//&#125;]</span></span><br><span class="line"><span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">chunkId = chunkIds[i];<span class="comment">//chunkId=0</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId])</span><br><span class="line">callbacks.push.apply(callbacks,installedChunks[chunkId]);<span class="comment">//0 push入callbacks(使用requireEnsure不再是0)</span></span><br><span class="line"><span class="comment">//赋值为0表明chunk已经loaded</span></span><br><span class="line">installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">//modules[0]会被覆盖</span></span><br><span class="line">modules[moduleId] = moreModules[moduleId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按当前情况parentJsonpFunction一直未undefined</span></span><br><span class="line"><span class="keyword">if</span> (parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="comment">//按当前情况callbacks=[]</span></span><br><span class="line"><span class="keyword">while</span> (callbacks.length)</span><br><span class="line">callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="keyword">if</span> (moreModules[<span class="number">0</span>]) &#123;</span><br><span class="line">installedModules[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 缓存模块，通过闭包引用(window["webpackJsonp"]可以访问到)</span></span><br><span class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">//2为公共chunck唯一ID，0表示已经loaded</span></span><br><span class="line"><span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="number">2</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// The require function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="keyword">if</span> (installedModules[moduleId])</span><br><span class="line"><span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">exports: &#123;&#125;,</span><br><span class="line">id: moduleId,</span><br><span class="line">loaded: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Execute the module function</span></span><br><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按需加载</span></span><br><span class="line">__webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId, callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">// "0" is the signal for "already loaded"</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> callback.call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="comment">// an array means "currently loading".</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">installedChunks[chunkId].push(callback);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// start chunk loading</span></span><br><span class="line">installedChunks[chunkId] = [callback];</span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">script.async = <span class="literal">true</span>;</span><br><span class="line">script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">"."</span> + (&#123; <span class="string">"0"</span>: <span class="string">"main"</span>, <span class="string">"1"</span>: <span class="string">"main1"</span> &#125;[chunkId] || chunkId) + <span class="string">".js"</span>;</span><br><span class="line">head.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>好像看不出什么。。。，修改一下<br>webpack.config.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">'./main.js'</span>,</span><br><span class="line">        main1: <span class="string">'./main1.js'</span>,</span><br><span class="line">        chunk1:[<span class="string">"./chunk1"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/dist2'</span>,</span><br><span class="line">        filename: <span class="string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">        name: [<span class="string">"chunk1"</span>],</span><br><span class="line">        filename:<span class="string">"common.js"</span>,</span><br><span class="line">        minChunks:<span class="number">3</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>main,main1都分别require chunk1,chunk2,然后将chunk1打包到公共模块（minChunks:3，chunk2不会被打包到公共模块）。自运行匿名函数最后多了<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p></p><p>则installedModules[0]为已经loaded,看common.js，installedModules[1]也会loaded。<br>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">1</span>], [<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2 = __webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;, , <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk2 = <span class="number">1</span>;</span><br><span class="line">exports.chunk2 = chunk2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><p>main1.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">2</span>], [<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2 = __webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;, , <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk2 = <span class="number">1</span>;</span><br><span class="line">exports.chunk2 = chunk2;</span><br><span class="line">&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><p>common.js modules：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = __webpack_require__(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = <span class="number">1</span>;</span><br><span class="line">exports.chunk1 = chunk1;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p></p><p>以main.js的代码为例，调用webpackJsonp，传入的参数chunkIds为[1],moreModules为<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1 = __webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2 = __webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;, , <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> chunk2 = <span class="number">1</span>;</span><br><span class="line">exports.chunk2 = chunk2;</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">chunkId = chunkIds[i];<span class="comment">//1</span></span><br><span class="line"><span class="comment">//false,赋值为0后还是false</span></span><br><span class="line"><span class="keyword">if</span> (installedChunks[chunkId])</span><br><span class="line">callbacks.push.apply(callbacks, installedChunks[chunkId]);</span><br><span class="line">installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三个模块</span></span><br><span class="line"><span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">//moduleId:0,1,2  moreModules[1]为空模块，自执行函数的参数(公共模块)会被覆盖，但是参数中的相应模块已经loaded并且缓存</span></span><br><span class="line">modules[moduleId] = moreModules[moduleId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="keyword">while</span> (callbacks.length)</span><br><span class="line">callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="keyword">if</span> (moreModules[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="comment">//installedModules[0]会重新load,但是load的是moreModules[0]，因为modules[0]已经被覆盖，moreModules[0]依赖于</span></span><br><span class="line"><span class="comment">//modules[1]、modules[2],modules[1]已经loaded</span></span><br><span class="line">installedModules[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下面的情况：<br>common.js 自执行函数参数（公共模块）（没有return <strong>webpack_require</strong>(0)）<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[,<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> chunk2=__webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.chunk1=chunk1;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk2=<span class="number">1</span>;</span><br><span class="line">exports.chunk2=chunk2;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p></p><p>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">0</span>],[</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2=__webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><p>以main调用分析<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">chunkId = chunkIds[i];<span class="comment">//0</span></span><br><span class="line"><span class="keyword">if</span>(installedChunks[chunkId])</span><br><span class="line">callbacks.push.apply(callbacks, installedChunks[chunkId]);</span><br><span class="line">installedChunks[chunkId] = <span class="number">0</span>;<span class="comment">//表明唯一索引为0的chunk已经loaded</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">//moreModules只有一个元素，所以modules[1]、modules[2]不会被覆盖</span></span><br><span class="line">modules[moduleId] = moreModules[moduleId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="keyword">while</span>(callbacks.length)</span><br><span class="line">callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="keyword">if</span>(moreModules[<span class="number">0</span>]) &#123;</span><br><span class="line">installedModules[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//moreModules[0]即modules[0]依赖modules[1]、即modules[2](没有被覆盖很关键)</span></span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>还有这种打包情况：<br>common.js不包含公共模块，即自执行函数参数为[]。<br>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">0</span>,<span class="number">1</span>],[</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunk1=__webpack_require__(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> chunk2=__webpack_require__(<span class="number">2</span>);</span><br><span class="line">exports.a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(chunk1);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chunk1=<span class="number">1</span>;</span><br><span class="line">exports.chunk1=chunk1;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chunk2=<span class="number">1</span>;</span><br><span class="line">exports.chunk2=chunk2;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p></p><p>以main调用分析<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">chunkId = chunkIds[i];<span class="comment">//0,1</span></span><br><span class="line"><span class="keyword">if</span>(installedChunks[chunkId])</span><br><span class="line">callbacks.push.apply(callbacks, installedChunks[chunkId]);</span><br><span class="line">installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">         <span class="comment">//moreModules全部转移到modules</span></span><br><span class="line">modules[moduleId] = moreModules[moduleId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="keyword">while</span>(callbacks.length)</span><br><span class="line">callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"><span class="keyword">if</span>(moreModules[<span class="number">0</span>]) &#123;</span><br><span class="line">         <span class="comment">//modules[0]是chunk文件运行代码</span></span><br><span class="line">installedModules[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="7-按需加载"><a href="#7-按需加载" class="headerlink" title="7.按需加载"></a>7.按需加载</h3><p>webpack.config.json<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>main.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>a.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</span><br></pre></td></tr></table></figure><p></p><p>打包后</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://segmentfault.com/img/bVEHy5?w=193&h=136" alt></div><div class="image-caption"></div></figure><p>bundle.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// install a JSONP callback for chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> parentJsonpFunction = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>];</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// add "moreModules" to the modules object,</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// then flag all "chunkIds" as loaded and fire callback</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> chunkId = chunkIds[i];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId])</span><br><span class="line"><span class="comment">/******/</span> callbacks.push.apply(callbacks, installedChunks[chunkId]);</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">/******/</span> modules[moduleId] = moreModules[moduleId];</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">while</span>(callbacks.length)</span><br><span class="line"><span class="comment">/******/</span> callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// object to store loaded and loading chunks</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// "0" means "already loaded"</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Array means "loading", array contains callbacks</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="number">0</span>:<span class="number">0</span></span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> __webpack_require__(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedModules[moduleId])</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> exports: &#123;&#125;,</span><br><span class="line"><span class="comment">/******/</span> id: moduleId,</span><br><span class="line"><span class="comment">/******/</span> loaded: <span class="literal">false</span></span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This file contains only the entry chunk.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The chunk loading function for additional chunks</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId, callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// "0" is the signal for "already loaded"</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> callback.call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// an array means "currently loading".</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId].push(callback);</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// start chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId] = [callback];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">/******/</span> script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">".bundle.js"</span>;</span><br><span class="line"><span class="comment">/******/</span> head.appendChild(script);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* nsure */</span>(<span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = __webpack_require__(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p></p><p>1.bundle.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpackJsonp([<span class="number">1</span>],[</span><br><span class="line"><span class="comment">/* 0 */</span>,</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><p>和使用CommonsChunkPlugin打包的差异在于<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> <span class="comment">// This file contains only the entry chunk.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The chunk loading function for additional chunks</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId, callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// "0" is the signal for "already loaded"</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> callback.call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// an array means "currently loading".</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId].push(callback);</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// start chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId] = [callback];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">/******/</span> script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">".bundle.js"</span>;</span><br><span class="line"><span class="comment">/******/</span> head.appendChild(script);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br></pre></td></tr></table></figure><p></p><p>模块main的id为0，模块a的id为1。return <strong>webpack_require</strong>(0)，则加载main模块，<br>modules[0].call(module.exports, module, module.exports, <strong>webpack_require</strong>)则调用函数<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">__webpack_require__.e<span class="comment">/* nsure */</span>(<span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = __webpack_require__(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> <span class="comment">// This file contains only the entry chunk.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The chunk loading function for additional chunks</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId, callback</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//installedChunks[1]为undefined</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// "0" is the signal for "already loaded"</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] === <span class="number">0</span>)</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> callback.call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// an array means "currently loading".</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId].push(callback);</span><br><span class="line"><span class="comment">/******/</span> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// start chunk loading</span></span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId] = [callback];<span class="comment">//installedChunks[1]为数组，表明currently loading</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">/******/</span> script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line"><span class="comment">/******/</span> script.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">".bundle.js"</span>;</span><br><span class="line"><span class="comment">/******/</span> head.appendChild(script);</span><br><span class="line"><span class="comment">//加载完后直接调用</span></span><br><span class="line"><span class="comment">/******/</span>webpackJsonp([<span class="number">1</span>],[</span><br><span class="line"><span class="comment">/******/</span><span class="comment">/* 0 */</span>,</span><br><span class="line"><span class="comment">/******/</span><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/******/</span><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span><span class="comment">/***/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span>]);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">//installedChunks[1]在webpackJsonp得到调用</span></span><br></pre></td></tr></table></figure><p>installedChunks[1]为数组，元素为main模块的执行代码<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">chunkIds, moreModules</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//moreModules为模块a的代码</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// add "moreModules" to the modules object,</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// then flag all "chunkIds" as loaded and fire callback</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>, callbacks = [];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(;i &lt; chunkIds.length; i++) &#123;</span><br><span class="line"><span class="comment">/******/</span> chunkId = chunkIds[i];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedChunks[chunkId])<span class="comment">//installedChunks[0]==0,installedChunks[1]为数组</span></span><br><span class="line"><span class="comment">/******/</span> callbacks.push.apply(callbacks, installedChunks[chunkId]);<span class="comment">//callbacks为模块main执行代码，不为数组</span></span><br><span class="line"><span class="comment">/******/</span> installedChunks[chunkId] = <span class="number">0</span>;<span class="comment">//installedChunks[1]不为数组，表明已经加载</span></span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line"><span class="comment">/******/</span> modules[moduleId] = moreModules[moduleId];</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">while</span>(callbacks.length)</span><br><span class="line"><span class="comment">/******/</span> callbacks.shift().call(<span class="literal">null</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed May 15 2019 16:05:58 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;开门见山&lt;/p&gt;&lt;h3 id=&quot;1-打包单一模块&quot;&gt;&lt;a href=&quot;#1-打包单一模块&quot; class=&quot;he
      
    
    </summary>
    
      <category term="前端" scheme="https://jaycewu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://jaycewu.site/tags/webpack/"/>
    
  </entry>
  
</feed>
